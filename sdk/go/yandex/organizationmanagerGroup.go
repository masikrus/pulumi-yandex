// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OrganizationmanagerGroup struct {
	pulumi.CustomResourceState

	// The creation timestamp of the resource.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The resource description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization to attach this Group to.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
}

// NewOrganizationmanagerGroup registers a new resource with the given unique name, arguments, and options.
func NewOrganizationmanagerGroup(ctx *pulumi.Context,
	name string, args *OrganizationmanagerGroupArgs, opts ...pulumi.ResourceOption) (*OrganizationmanagerGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrganizationmanagerGroup
	err := ctx.RegisterResource("yandex:index/organizationmanagerGroup:OrganizationmanagerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationmanagerGroup gets an existing OrganizationmanagerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationmanagerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationmanagerGroupState, opts ...pulumi.ResourceOption) (*OrganizationmanagerGroup, error) {
	var resource OrganizationmanagerGroup
	err := ctx.ReadResource("yandex:index/organizationmanagerGroup:OrganizationmanagerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationmanagerGroup resources.
type organizationmanagerGroupState struct {
	// The creation timestamp of the resource.
	CreatedAt *string `pulumi:"createdAt"`
	// The resource description.
	Description *string `pulumi:"description"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The organization to attach this Group to.
	OrganizationId *string `pulumi:"organizationId"`
}

type OrganizationmanagerGroupState struct {
	// The creation timestamp of the resource.
	CreatedAt pulumi.StringPtrInput
	// The resource description.
	Description pulumi.StringPtrInput
	// The resource name.
	Name pulumi.StringPtrInput
	// The organization to attach this Group to.
	OrganizationId pulumi.StringPtrInput
}

func (OrganizationmanagerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationmanagerGroupState)(nil)).Elem()
}

type organizationmanagerGroupArgs struct {
	// The resource description.
	Description *string `pulumi:"description"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The organization to attach this Group to.
	OrganizationId string `pulumi:"organizationId"`
}

// The set of arguments for constructing a OrganizationmanagerGroup resource.
type OrganizationmanagerGroupArgs struct {
	// The resource description.
	Description pulumi.StringPtrInput
	// The resource name.
	Name pulumi.StringPtrInput
	// The organization to attach this Group to.
	OrganizationId pulumi.StringInput
}

func (OrganizationmanagerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationmanagerGroupArgs)(nil)).Elem()
}

type OrganizationmanagerGroupInput interface {
	pulumi.Input

	ToOrganizationmanagerGroupOutput() OrganizationmanagerGroupOutput
	ToOrganizationmanagerGroupOutputWithContext(ctx context.Context) OrganizationmanagerGroupOutput
}

func (*OrganizationmanagerGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationmanagerGroup)(nil)).Elem()
}

func (i *OrganizationmanagerGroup) ToOrganizationmanagerGroupOutput() OrganizationmanagerGroupOutput {
	return i.ToOrganizationmanagerGroupOutputWithContext(context.Background())
}

func (i *OrganizationmanagerGroup) ToOrganizationmanagerGroupOutputWithContext(ctx context.Context) OrganizationmanagerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationmanagerGroupOutput)
}

// OrganizationmanagerGroupArrayInput is an input type that accepts OrganizationmanagerGroupArray and OrganizationmanagerGroupArrayOutput values.
// You can construct a concrete instance of `OrganizationmanagerGroupArrayInput` via:
//
//	OrganizationmanagerGroupArray{ OrganizationmanagerGroupArgs{...} }
type OrganizationmanagerGroupArrayInput interface {
	pulumi.Input

	ToOrganizationmanagerGroupArrayOutput() OrganizationmanagerGroupArrayOutput
	ToOrganizationmanagerGroupArrayOutputWithContext(context.Context) OrganizationmanagerGroupArrayOutput
}

type OrganizationmanagerGroupArray []OrganizationmanagerGroupInput

func (OrganizationmanagerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationmanagerGroup)(nil)).Elem()
}

func (i OrganizationmanagerGroupArray) ToOrganizationmanagerGroupArrayOutput() OrganizationmanagerGroupArrayOutput {
	return i.ToOrganizationmanagerGroupArrayOutputWithContext(context.Background())
}

func (i OrganizationmanagerGroupArray) ToOrganizationmanagerGroupArrayOutputWithContext(ctx context.Context) OrganizationmanagerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationmanagerGroupArrayOutput)
}

// OrganizationmanagerGroupMapInput is an input type that accepts OrganizationmanagerGroupMap and OrganizationmanagerGroupMapOutput values.
// You can construct a concrete instance of `OrganizationmanagerGroupMapInput` via:
//
//	OrganizationmanagerGroupMap{ "key": OrganizationmanagerGroupArgs{...} }
type OrganizationmanagerGroupMapInput interface {
	pulumi.Input

	ToOrganizationmanagerGroupMapOutput() OrganizationmanagerGroupMapOutput
	ToOrganizationmanagerGroupMapOutputWithContext(context.Context) OrganizationmanagerGroupMapOutput
}

type OrganizationmanagerGroupMap map[string]OrganizationmanagerGroupInput

func (OrganizationmanagerGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationmanagerGroup)(nil)).Elem()
}

func (i OrganizationmanagerGroupMap) ToOrganizationmanagerGroupMapOutput() OrganizationmanagerGroupMapOutput {
	return i.ToOrganizationmanagerGroupMapOutputWithContext(context.Background())
}

func (i OrganizationmanagerGroupMap) ToOrganizationmanagerGroupMapOutputWithContext(ctx context.Context) OrganizationmanagerGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationmanagerGroupMapOutput)
}

type OrganizationmanagerGroupOutput struct{ *pulumi.OutputState }

func (OrganizationmanagerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationmanagerGroup)(nil)).Elem()
}

func (o OrganizationmanagerGroupOutput) ToOrganizationmanagerGroupOutput() OrganizationmanagerGroupOutput {
	return o
}

func (o OrganizationmanagerGroupOutput) ToOrganizationmanagerGroupOutputWithContext(ctx context.Context) OrganizationmanagerGroupOutput {
	return o
}

// The creation timestamp of the resource.
func (o OrganizationmanagerGroupOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationmanagerGroup) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The resource description.
func (o OrganizationmanagerGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationmanagerGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The resource name.
func (o OrganizationmanagerGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationmanagerGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization to attach this Group to.
func (o OrganizationmanagerGroupOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationmanagerGroup) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

type OrganizationmanagerGroupArrayOutput struct{ *pulumi.OutputState }

func (OrganizationmanagerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationmanagerGroup)(nil)).Elem()
}

func (o OrganizationmanagerGroupArrayOutput) ToOrganizationmanagerGroupArrayOutput() OrganizationmanagerGroupArrayOutput {
	return o
}

func (o OrganizationmanagerGroupArrayOutput) ToOrganizationmanagerGroupArrayOutputWithContext(ctx context.Context) OrganizationmanagerGroupArrayOutput {
	return o
}

func (o OrganizationmanagerGroupArrayOutput) Index(i pulumi.IntInput) OrganizationmanagerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrganizationmanagerGroup {
		return vs[0].([]*OrganizationmanagerGroup)[vs[1].(int)]
	}).(OrganizationmanagerGroupOutput)
}

type OrganizationmanagerGroupMapOutput struct{ *pulumi.OutputState }

func (OrganizationmanagerGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationmanagerGroup)(nil)).Elem()
}

func (o OrganizationmanagerGroupMapOutput) ToOrganizationmanagerGroupMapOutput() OrganizationmanagerGroupMapOutput {
	return o
}

func (o OrganizationmanagerGroupMapOutput) ToOrganizationmanagerGroupMapOutputWithContext(ctx context.Context) OrganizationmanagerGroupMapOutput {
	return o
}

func (o OrganizationmanagerGroupMapOutput) MapIndex(k pulumi.StringInput) OrganizationmanagerGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrganizationmanagerGroup {
		return vs[0].(map[string]*OrganizationmanagerGroup)[vs[1].(string)]
	}).(OrganizationmanagerGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationmanagerGroupInput)(nil)).Elem(), &OrganizationmanagerGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationmanagerGroupArrayInput)(nil)).Elem(), OrganizationmanagerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationmanagerGroupMapInput)(nil)).Elem(), OrganizationmanagerGroupMap{})
	pulumi.RegisterOutputType(OrganizationmanagerGroupOutput{})
	pulumi.RegisterOutputType(OrganizationmanagerGroupArrayOutput{})
	pulumi.RegisterOutputType(OrganizationmanagerGroupMapOutput{})
}
