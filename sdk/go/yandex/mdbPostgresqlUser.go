// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MdbPostgresqlUser struct {
	pulumi.CustomResourceState

	// The ID of the PostgreSQL cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The maximum number of connections per user. (Default 50).
	ConnLimit pulumi.IntOutput `pulumi:"connLimit"`
	// Connection Manager connection configuration. Filled in by the server automatically.
	ConnectionManager pulumi.StringMapOutput `pulumi:"connectionManager"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection pulumi.StringPtrOutput `pulumi:"deletionProtection"`
	// Generate password using Connection Manager. Allowed values: true or false. It's used only during user creation and is
	// ignored during updating. > **Must specify either password or generate_password**.
	GeneratePassword pulumi.BoolPtrOutput `pulumi:"generatePassword"`
	// List of the user's grants.
	Grants pulumi.StringArrayOutput `pulumi:"grants"`
	// User's ability to login.
	Login pulumi.BoolPtrOutput `pulumi:"login"`
	// The name of the user.
	Name pulumi.StringOutput `pulumi:"name"`
	// The password of the user.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Set of permissions granted to the user.
	Permissions MdbPostgresqlUserPermissionArrayOutput `pulumi:"permissions"`
	// Map of user settings. [Full
	// description](https://yandex.cloud/docs/managed-postgresql/api-ref/grpc/Cluster/create#yandex.cloud.mdb.postgresql.v1.UserSettings).
	// * `defaultTransactionIsolation` - defines the default isolation level to be set for all new SQL transactions. One of: -
	//   0: `unspecified` - 1: `read uncommitted` - 2: `read committed` - 3: `repeatable read` - 4: `serializable` *
	//   `lockTimeout` - The maximum time (in milliseconds) for any statement to wait for acquiring a lock on an table, index,
	//   row or other database object (default 0) * `logMinDurationStatement` - This setting controls logging of the duration of
	//   statements. (default -1 disables logging of the duration of statements.) * `synchronousCommit` - This setting defines
	//   whether DBMS will commit transaction in a synchronous way. One of: - 0: `unspecified` - 1: `on` - 2: `off` - 3: `local`
	// - 4: `remote write` - 5: `remote apply` * `tempFileLimit` - The maximum storage space size (in kilobytes) that a single
	//   process can use to create temporary files. * `logStatement` - This setting specifies which SQL statements should be
	//   logged (on the user level). One of: - 0: `unspecified` - 1: `none` - 2: `ddl` - 3: `mod` - 4: `all` * `poolMode` - Mode
	//   that the connection pooler is working in with specified user. One of: - 1: `session` - 2: `transaction` - 3: `statement`
	// * `preparedStatementsPooling` - This setting allows user to use prepared statements with transaction pooling. Boolean. *
	//   `catchupTimeout` - The connection pooler setting. It determines the maximum allowed replication lag (in seconds). Pooler
	//   will reject connections to the replica with a lag above this threshold. Default value is 0, which disables this feature.
	//   Integer. * `walSenderTimeout` - The maximum time (in milliseconds) to wait for WAL replication (can be set only for
	//   PostgreSQL 12+). Terminate replication connections that are inactive for longer than this amount of time. Integer. *
	//   `idleInTransactionSessionTimeout` - Sets the maximum allowed idle time (in milliseconds) between queries, when in a
	//   transaction. Value of 0 (default) disables the timeout. Integer. * `statementTimeout` - The maximum time (in
	//   milliseconds) to wait for statement. Value of 0 (default) disables the timeout. Integer
	Settings pulumi.StringMapOutput `pulumi:"settings"`
}

// NewMdbPostgresqlUser registers a new resource with the given unique name, arguments, and options.
func NewMdbPostgresqlUser(ctx *pulumi.Context,
	name string, args *MdbPostgresqlUserArgs, opts ...pulumi.ResourceOption) (*MdbPostgresqlUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MdbPostgresqlUser
	err := ctx.RegisterResource("yandex:index/mdbPostgresqlUser:MdbPostgresqlUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMdbPostgresqlUser gets an existing MdbPostgresqlUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMdbPostgresqlUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MdbPostgresqlUserState, opts ...pulumi.ResourceOption) (*MdbPostgresqlUser, error) {
	var resource MdbPostgresqlUser
	err := ctx.ReadResource("yandex:index/mdbPostgresqlUser:MdbPostgresqlUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MdbPostgresqlUser resources.
type mdbPostgresqlUserState struct {
	// The ID of the PostgreSQL cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The maximum number of connections per user. (Default 50).
	ConnLimit *int `pulumi:"connLimit"`
	// Connection Manager connection configuration. Filled in by the server automatically.
	ConnectionManager map[string]string `pulumi:"connectionManager"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection *string `pulumi:"deletionProtection"`
	// Generate password using Connection Manager. Allowed values: true or false. It's used only during user creation and is
	// ignored during updating. > **Must specify either password or generate_password**.
	GeneratePassword *bool `pulumi:"generatePassword"`
	// List of the user's grants.
	Grants []string `pulumi:"grants"`
	// User's ability to login.
	Login *bool `pulumi:"login"`
	// The name of the user.
	Name *string `pulumi:"name"`
	// The password of the user.
	Password *string `pulumi:"password"`
	// Set of permissions granted to the user.
	Permissions []MdbPostgresqlUserPermission `pulumi:"permissions"`
	// Map of user settings. [Full
	// description](https://yandex.cloud/docs/managed-postgresql/api-ref/grpc/Cluster/create#yandex.cloud.mdb.postgresql.v1.UserSettings).
	// * `defaultTransactionIsolation` - defines the default isolation level to be set for all new SQL transactions. One of: -
	//   0: `unspecified` - 1: `read uncommitted` - 2: `read committed` - 3: `repeatable read` - 4: `serializable` *
	//   `lockTimeout` - The maximum time (in milliseconds) for any statement to wait for acquiring a lock on an table, index,
	//   row or other database object (default 0) * `logMinDurationStatement` - This setting controls logging of the duration of
	//   statements. (default -1 disables logging of the duration of statements.) * `synchronousCommit` - This setting defines
	//   whether DBMS will commit transaction in a synchronous way. One of: - 0: `unspecified` - 1: `on` - 2: `off` - 3: `local`
	// - 4: `remote write` - 5: `remote apply` * `tempFileLimit` - The maximum storage space size (in kilobytes) that a single
	//   process can use to create temporary files. * `logStatement` - This setting specifies which SQL statements should be
	//   logged (on the user level). One of: - 0: `unspecified` - 1: `none` - 2: `ddl` - 3: `mod` - 4: `all` * `poolMode` - Mode
	//   that the connection pooler is working in with specified user. One of: - 1: `session` - 2: `transaction` - 3: `statement`
	// * `preparedStatementsPooling` - This setting allows user to use prepared statements with transaction pooling. Boolean. *
	//   `catchupTimeout` - The connection pooler setting. It determines the maximum allowed replication lag (in seconds). Pooler
	//   will reject connections to the replica with a lag above this threshold. Default value is 0, which disables this feature.
	//   Integer. * `walSenderTimeout` - The maximum time (in milliseconds) to wait for WAL replication (can be set only for
	//   PostgreSQL 12+). Terminate replication connections that are inactive for longer than this amount of time. Integer. *
	//   `idleInTransactionSessionTimeout` - Sets the maximum allowed idle time (in milliseconds) between queries, when in a
	//   transaction. Value of 0 (default) disables the timeout. Integer. * `statementTimeout` - The maximum time (in
	//   milliseconds) to wait for statement. Value of 0 (default) disables the timeout. Integer
	Settings map[string]string `pulumi:"settings"`
}

type MdbPostgresqlUserState struct {
	// The ID of the PostgreSQL cluster.
	ClusterId pulumi.StringPtrInput
	// The maximum number of connections per user. (Default 50).
	ConnLimit pulumi.IntPtrInput
	// Connection Manager connection configuration. Filled in by the server automatically.
	ConnectionManager pulumi.StringMapInput
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection pulumi.StringPtrInput
	// Generate password using Connection Manager. Allowed values: true or false. It's used only during user creation and is
	// ignored during updating. > **Must specify either password or generate_password**.
	GeneratePassword pulumi.BoolPtrInput
	// List of the user's grants.
	Grants pulumi.StringArrayInput
	// User's ability to login.
	Login pulumi.BoolPtrInput
	// The name of the user.
	Name pulumi.StringPtrInput
	// The password of the user.
	Password pulumi.StringPtrInput
	// Set of permissions granted to the user.
	Permissions MdbPostgresqlUserPermissionArrayInput
	// Map of user settings. [Full
	// description](https://yandex.cloud/docs/managed-postgresql/api-ref/grpc/Cluster/create#yandex.cloud.mdb.postgresql.v1.UserSettings).
	// * `defaultTransactionIsolation` - defines the default isolation level to be set for all new SQL transactions. One of: -
	//   0: `unspecified` - 1: `read uncommitted` - 2: `read committed` - 3: `repeatable read` - 4: `serializable` *
	//   `lockTimeout` - The maximum time (in milliseconds) for any statement to wait for acquiring a lock on an table, index,
	//   row or other database object (default 0) * `logMinDurationStatement` - This setting controls logging of the duration of
	//   statements. (default -1 disables logging of the duration of statements.) * `synchronousCommit` - This setting defines
	//   whether DBMS will commit transaction in a synchronous way. One of: - 0: `unspecified` - 1: `on` - 2: `off` - 3: `local`
	// - 4: `remote write` - 5: `remote apply` * `tempFileLimit` - The maximum storage space size (in kilobytes) that a single
	//   process can use to create temporary files. * `logStatement` - This setting specifies which SQL statements should be
	//   logged (on the user level). One of: - 0: `unspecified` - 1: `none` - 2: `ddl` - 3: `mod` - 4: `all` * `poolMode` - Mode
	//   that the connection pooler is working in with specified user. One of: - 1: `session` - 2: `transaction` - 3: `statement`
	// * `preparedStatementsPooling` - This setting allows user to use prepared statements with transaction pooling. Boolean. *
	//   `catchupTimeout` - The connection pooler setting. It determines the maximum allowed replication lag (in seconds). Pooler
	//   will reject connections to the replica with a lag above this threshold. Default value is 0, which disables this feature.
	//   Integer. * `walSenderTimeout` - The maximum time (in milliseconds) to wait for WAL replication (can be set only for
	//   PostgreSQL 12+). Terminate replication connections that are inactive for longer than this amount of time. Integer. *
	//   `idleInTransactionSessionTimeout` - Sets the maximum allowed idle time (in milliseconds) between queries, when in a
	//   transaction. Value of 0 (default) disables the timeout. Integer. * `statementTimeout` - The maximum time (in
	//   milliseconds) to wait for statement. Value of 0 (default) disables the timeout. Integer
	Settings pulumi.StringMapInput
}

func (MdbPostgresqlUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbPostgresqlUserState)(nil)).Elem()
}

type mdbPostgresqlUserArgs struct {
	// The ID of the PostgreSQL cluster.
	ClusterId string `pulumi:"clusterId"`
	// The maximum number of connections per user. (Default 50).
	ConnLimit *int `pulumi:"connLimit"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection *string `pulumi:"deletionProtection"`
	// Generate password using Connection Manager. Allowed values: true or false. It's used only during user creation and is
	// ignored during updating. > **Must specify either password or generate_password**.
	GeneratePassword *bool `pulumi:"generatePassword"`
	// List of the user's grants.
	Grants []string `pulumi:"grants"`
	// User's ability to login.
	Login *bool `pulumi:"login"`
	// The name of the user.
	Name *string `pulumi:"name"`
	// The password of the user.
	Password *string `pulumi:"password"`
	// Set of permissions granted to the user.
	Permissions []MdbPostgresqlUserPermission `pulumi:"permissions"`
	// Map of user settings. [Full
	// description](https://yandex.cloud/docs/managed-postgresql/api-ref/grpc/Cluster/create#yandex.cloud.mdb.postgresql.v1.UserSettings).
	// * `defaultTransactionIsolation` - defines the default isolation level to be set for all new SQL transactions. One of: -
	//   0: `unspecified` - 1: `read uncommitted` - 2: `read committed` - 3: `repeatable read` - 4: `serializable` *
	//   `lockTimeout` - The maximum time (in milliseconds) for any statement to wait for acquiring a lock on an table, index,
	//   row or other database object (default 0) * `logMinDurationStatement` - This setting controls logging of the duration of
	//   statements. (default -1 disables logging of the duration of statements.) * `synchronousCommit` - This setting defines
	//   whether DBMS will commit transaction in a synchronous way. One of: - 0: `unspecified` - 1: `on` - 2: `off` - 3: `local`
	// - 4: `remote write` - 5: `remote apply` * `tempFileLimit` - The maximum storage space size (in kilobytes) that a single
	//   process can use to create temporary files. * `logStatement` - This setting specifies which SQL statements should be
	//   logged (on the user level). One of: - 0: `unspecified` - 1: `none` - 2: `ddl` - 3: `mod` - 4: `all` * `poolMode` - Mode
	//   that the connection pooler is working in with specified user. One of: - 1: `session` - 2: `transaction` - 3: `statement`
	// * `preparedStatementsPooling` - This setting allows user to use prepared statements with transaction pooling. Boolean. *
	//   `catchupTimeout` - The connection pooler setting. It determines the maximum allowed replication lag (in seconds). Pooler
	//   will reject connections to the replica with a lag above this threshold. Default value is 0, which disables this feature.
	//   Integer. * `walSenderTimeout` - The maximum time (in milliseconds) to wait for WAL replication (can be set only for
	//   PostgreSQL 12+). Terminate replication connections that are inactive for longer than this amount of time. Integer. *
	//   `idleInTransactionSessionTimeout` - Sets the maximum allowed idle time (in milliseconds) between queries, when in a
	//   transaction. Value of 0 (default) disables the timeout. Integer. * `statementTimeout` - The maximum time (in
	//   milliseconds) to wait for statement. Value of 0 (default) disables the timeout. Integer
	Settings map[string]string `pulumi:"settings"`
}

// The set of arguments for constructing a MdbPostgresqlUser resource.
type MdbPostgresqlUserArgs struct {
	// The ID of the PostgreSQL cluster.
	ClusterId pulumi.StringInput
	// The maximum number of connections per user. (Default 50).
	ConnLimit pulumi.IntPtrInput
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection pulumi.StringPtrInput
	// Generate password using Connection Manager. Allowed values: true or false. It's used only during user creation and is
	// ignored during updating. > **Must specify either password or generate_password**.
	GeneratePassword pulumi.BoolPtrInput
	// List of the user's grants.
	Grants pulumi.StringArrayInput
	// User's ability to login.
	Login pulumi.BoolPtrInput
	// The name of the user.
	Name pulumi.StringPtrInput
	// The password of the user.
	Password pulumi.StringPtrInput
	// Set of permissions granted to the user.
	Permissions MdbPostgresqlUserPermissionArrayInput
	// Map of user settings. [Full
	// description](https://yandex.cloud/docs/managed-postgresql/api-ref/grpc/Cluster/create#yandex.cloud.mdb.postgresql.v1.UserSettings).
	// * `defaultTransactionIsolation` - defines the default isolation level to be set for all new SQL transactions. One of: -
	//   0: `unspecified` - 1: `read uncommitted` - 2: `read committed` - 3: `repeatable read` - 4: `serializable` *
	//   `lockTimeout` - The maximum time (in milliseconds) for any statement to wait for acquiring a lock on an table, index,
	//   row or other database object (default 0) * `logMinDurationStatement` - This setting controls logging of the duration of
	//   statements. (default -1 disables logging of the duration of statements.) * `synchronousCommit` - This setting defines
	//   whether DBMS will commit transaction in a synchronous way. One of: - 0: `unspecified` - 1: `on` - 2: `off` - 3: `local`
	// - 4: `remote write` - 5: `remote apply` * `tempFileLimit` - The maximum storage space size (in kilobytes) that a single
	//   process can use to create temporary files. * `logStatement` - This setting specifies which SQL statements should be
	//   logged (on the user level). One of: - 0: `unspecified` - 1: `none` - 2: `ddl` - 3: `mod` - 4: `all` * `poolMode` - Mode
	//   that the connection pooler is working in with specified user. One of: - 1: `session` - 2: `transaction` - 3: `statement`
	// * `preparedStatementsPooling` - This setting allows user to use prepared statements with transaction pooling. Boolean. *
	//   `catchupTimeout` - The connection pooler setting. It determines the maximum allowed replication lag (in seconds). Pooler
	//   will reject connections to the replica with a lag above this threshold. Default value is 0, which disables this feature.
	//   Integer. * `walSenderTimeout` - The maximum time (in milliseconds) to wait for WAL replication (can be set only for
	//   PostgreSQL 12+). Terminate replication connections that are inactive for longer than this amount of time. Integer. *
	//   `idleInTransactionSessionTimeout` - Sets the maximum allowed idle time (in milliseconds) between queries, when in a
	//   transaction. Value of 0 (default) disables the timeout. Integer. * `statementTimeout` - The maximum time (in
	//   milliseconds) to wait for statement. Value of 0 (default) disables the timeout. Integer
	Settings pulumi.StringMapInput
}

func (MdbPostgresqlUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbPostgresqlUserArgs)(nil)).Elem()
}

type MdbPostgresqlUserInput interface {
	pulumi.Input

	ToMdbPostgresqlUserOutput() MdbPostgresqlUserOutput
	ToMdbPostgresqlUserOutputWithContext(ctx context.Context) MdbPostgresqlUserOutput
}

func (*MdbPostgresqlUser) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbPostgresqlUser)(nil)).Elem()
}

func (i *MdbPostgresqlUser) ToMdbPostgresqlUserOutput() MdbPostgresqlUserOutput {
	return i.ToMdbPostgresqlUserOutputWithContext(context.Background())
}

func (i *MdbPostgresqlUser) ToMdbPostgresqlUserOutputWithContext(ctx context.Context) MdbPostgresqlUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbPostgresqlUserOutput)
}

// MdbPostgresqlUserArrayInput is an input type that accepts MdbPostgresqlUserArray and MdbPostgresqlUserArrayOutput values.
// You can construct a concrete instance of `MdbPostgresqlUserArrayInput` via:
//
//	MdbPostgresqlUserArray{ MdbPostgresqlUserArgs{...} }
type MdbPostgresqlUserArrayInput interface {
	pulumi.Input

	ToMdbPostgresqlUserArrayOutput() MdbPostgresqlUserArrayOutput
	ToMdbPostgresqlUserArrayOutputWithContext(context.Context) MdbPostgresqlUserArrayOutput
}

type MdbPostgresqlUserArray []MdbPostgresqlUserInput

func (MdbPostgresqlUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MdbPostgresqlUser)(nil)).Elem()
}

func (i MdbPostgresqlUserArray) ToMdbPostgresqlUserArrayOutput() MdbPostgresqlUserArrayOutput {
	return i.ToMdbPostgresqlUserArrayOutputWithContext(context.Background())
}

func (i MdbPostgresqlUserArray) ToMdbPostgresqlUserArrayOutputWithContext(ctx context.Context) MdbPostgresqlUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbPostgresqlUserArrayOutput)
}

// MdbPostgresqlUserMapInput is an input type that accepts MdbPostgresqlUserMap and MdbPostgresqlUserMapOutput values.
// You can construct a concrete instance of `MdbPostgresqlUserMapInput` via:
//
//	MdbPostgresqlUserMap{ "key": MdbPostgresqlUserArgs{...} }
type MdbPostgresqlUserMapInput interface {
	pulumi.Input

	ToMdbPostgresqlUserMapOutput() MdbPostgresqlUserMapOutput
	ToMdbPostgresqlUserMapOutputWithContext(context.Context) MdbPostgresqlUserMapOutput
}

type MdbPostgresqlUserMap map[string]MdbPostgresqlUserInput

func (MdbPostgresqlUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MdbPostgresqlUser)(nil)).Elem()
}

func (i MdbPostgresqlUserMap) ToMdbPostgresqlUserMapOutput() MdbPostgresqlUserMapOutput {
	return i.ToMdbPostgresqlUserMapOutputWithContext(context.Background())
}

func (i MdbPostgresqlUserMap) ToMdbPostgresqlUserMapOutputWithContext(ctx context.Context) MdbPostgresqlUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbPostgresqlUserMapOutput)
}

type MdbPostgresqlUserOutput struct{ *pulumi.OutputState }

func (MdbPostgresqlUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbPostgresqlUser)(nil)).Elem()
}

func (o MdbPostgresqlUserOutput) ToMdbPostgresqlUserOutput() MdbPostgresqlUserOutput {
	return o
}

func (o MdbPostgresqlUserOutput) ToMdbPostgresqlUserOutputWithContext(ctx context.Context) MdbPostgresqlUserOutput {
	return o
}

// The ID of the PostgreSQL cluster.
func (o MdbPostgresqlUserOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbPostgresqlUser) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The maximum number of connections per user. (Default 50).
func (o MdbPostgresqlUserOutput) ConnLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *MdbPostgresqlUser) pulumi.IntOutput { return v.ConnLimit }).(pulumi.IntOutput)
}

// Connection Manager connection configuration. Filled in by the server automatically.
func (o MdbPostgresqlUserOutput) ConnectionManager() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MdbPostgresqlUser) pulumi.StringMapOutput { return v.ConnectionManager }).(pulumi.StringMapOutput)
}

// The `true` value means that resource is protected from accidental deletion.
func (o MdbPostgresqlUserOutput) DeletionProtection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MdbPostgresqlUser) pulumi.StringPtrOutput { return v.DeletionProtection }).(pulumi.StringPtrOutput)
}

// Generate password using Connection Manager. Allowed values: true or false. It's used only during user creation and is
// ignored during updating. > **Must specify either password or generate_password**.
func (o MdbPostgresqlUserOutput) GeneratePassword() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MdbPostgresqlUser) pulumi.BoolPtrOutput { return v.GeneratePassword }).(pulumi.BoolPtrOutput)
}

// List of the user's grants.
func (o MdbPostgresqlUserOutput) Grants() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MdbPostgresqlUser) pulumi.StringArrayOutput { return v.Grants }).(pulumi.StringArrayOutput)
}

// User's ability to login.
func (o MdbPostgresqlUserOutput) Login() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MdbPostgresqlUser) pulumi.BoolPtrOutput { return v.Login }).(pulumi.BoolPtrOutput)
}

// The name of the user.
func (o MdbPostgresqlUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbPostgresqlUser) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The password of the user.
func (o MdbPostgresqlUserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MdbPostgresqlUser) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Set of permissions granted to the user.
func (o MdbPostgresqlUserOutput) Permissions() MdbPostgresqlUserPermissionArrayOutput {
	return o.ApplyT(func(v *MdbPostgresqlUser) MdbPostgresqlUserPermissionArrayOutput { return v.Permissions }).(MdbPostgresqlUserPermissionArrayOutput)
}

// Map of user settings. [Full
// description](https://yandex.cloud/docs/managed-postgresql/api-ref/grpc/Cluster/create#yandex.cloud.mdb.postgresql.v1.UserSettings).
//   - `defaultTransactionIsolation` - defines the default isolation level to be set for all new SQL transactions. One of: -
//     0: `unspecified` - 1: `read uncommitted` - 2: `read committed` - 3: `repeatable read` - 4: `serializable` *
//     `lockTimeout` - The maximum time (in milliseconds) for any statement to wait for acquiring a lock on an table, index,
//     row or other database object (default 0) * `logMinDurationStatement` - This setting controls logging of the duration of
//     statements. (default -1 disables logging of the duration of statements.) * `synchronousCommit` - This setting defines
//     whether DBMS will commit transaction in a synchronous way. One of: - 0: `unspecified` - 1: `on` - 2: `off` - 3: `local`
//   - 4: `remote write` - 5: `remote apply` * `tempFileLimit` - The maximum storage space size (in kilobytes) that a single
//     process can use to create temporary files. * `logStatement` - This setting specifies which SQL statements should be
//     logged (on the user level). One of: - 0: `unspecified` - 1: `none` - 2: `ddl` - 3: `mod` - 4: `all` * `poolMode` - Mode
//     that the connection pooler is working in with specified user. One of: - 1: `session` - 2: `transaction` - 3: `statement`
//   - `preparedStatementsPooling` - This setting allows user to use prepared statements with transaction pooling. Boolean. *
//     `catchupTimeout` - The connection pooler setting. It determines the maximum allowed replication lag (in seconds). Pooler
//     will reject connections to the replica with a lag above this threshold. Default value is 0, which disables this feature.
//     Integer. * `walSenderTimeout` - The maximum time (in milliseconds) to wait for WAL replication (can be set only for
//     PostgreSQL 12+). Terminate replication connections that are inactive for longer than this amount of time. Integer. *
//     `idleInTransactionSessionTimeout` - Sets the maximum allowed idle time (in milliseconds) between queries, when in a
//     transaction. Value of 0 (default) disables the timeout. Integer. * `statementTimeout` - The maximum time (in
//     milliseconds) to wait for statement. Value of 0 (default) disables the timeout. Integer
func (o MdbPostgresqlUserOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MdbPostgresqlUser) pulumi.StringMapOutput { return v.Settings }).(pulumi.StringMapOutput)
}

type MdbPostgresqlUserArrayOutput struct{ *pulumi.OutputState }

func (MdbPostgresqlUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MdbPostgresqlUser)(nil)).Elem()
}

func (o MdbPostgresqlUserArrayOutput) ToMdbPostgresqlUserArrayOutput() MdbPostgresqlUserArrayOutput {
	return o
}

func (o MdbPostgresqlUserArrayOutput) ToMdbPostgresqlUserArrayOutputWithContext(ctx context.Context) MdbPostgresqlUserArrayOutput {
	return o
}

func (o MdbPostgresqlUserArrayOutput) Index(i pulumi.IntInput) MdbPostgresqlUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MdbPostgresqlUser {
		return vs[0].([]*MdbPostgresqlUser)[vs[1].(int)]
	}).(MdbPostgresqlUserOutput)
}

type MdbPostgresqlUserMapOutput struct{ *pulumi.OutputState }

func (MdbPostgresqlUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MdbPostgresqlUser)(nil)).Elem()
}

func (o MdbPostgresqlUserMapOutput) ToMdbPostgresqlUserMapOutput() MdbPostgresqlUserMapOutput {
	return o
}

func (o MdbPostgresqlUserMapOutput) ToMdbPostgresqlUserMapOutputWithContext(ctx context.Context) MdbPostgresqlUserMapOutput {
	return o
}

func (o MdbPostgresqlUserMapOutput) MapIndex(k pulumi.StringInput) MdbPostgresqlUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MdbPostgresqlUser {
		return vs[0].(map[string]*MdbPostgresqlUser)[vs[1].(string)]
	}).(MdbPostgresqlUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MdbPostgresqlUserInput)(nil)).Elem(), &MdbPostgresqlUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdbPostgresqlUserArrayInput)(nil)).Elem(), MdbPostgresqlUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdbPostgresqlUserMapInput)(nil)).Elem(), MdbPostgresqlUserMap{})
	pulumi.RegisterOutputType(MdbPostgresqlUserOutput{})
	pulumi.RegisterOutputType(MdbPostgresqlUserArrayOutput{})
	pulumi.RegisterOutputType(MdbPostgresqlUserMapOutput{})
}
