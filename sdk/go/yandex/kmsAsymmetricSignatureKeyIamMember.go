// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KmsAsymmetricSignatureKeyIamMember struct {
	pulumi.CustomResourceState

	// The [Yandex Key Management Service](https://yandex.cloud/docs/kms/) Asymmetric Signature Key ID to apply a binding to.
	AsymmetricSignatureKeyId pulumi.StringOutput `pulumi:"asymmetricSignatureKeyId"`
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member pulumi.StringOutput `pulumi:"member"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       pulumi.StringOutput `pulumi:"role"`
	SleepAfter pulumi.IntPtrOutput `pulumi:"sleepAfter"`
}

// NewKmsAsymmetricSignatureKeyIamMember registers a new resource with the given unique name, arguments, and options.
func NewKmsAsymmetricSignatureKeyIamMember(ctx *pulumi.Context,
	name string, args *KmsAsymmetricSignatureKeyIamMemberArgs, opts ...pulumi.ResourceOption) (*KmsAsymmetricSignatureKeyIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AsymmetricSignatureKeyId == nil {
		return nil, errors.New("invalid value for required argument 'AsymmetricSignatureKeyId'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KmsAsymmetricSignatureKeyIamMember
	err := ctx.RegisterResource("yandex:index/kmsAsymmetricSignatureKeyIamMember:KmsAsymmetricSignatureKeyIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKmsAsymmetricSignatureKeyIamMember gets an existing KmsAsymmetricSignatureKeyIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKmsAsymmetricSignatureKeyIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KmsAsymmetricSignatureKeyIamMemberState, opts ...pulumi.ResourceOption) (*KmsAsymmetricSignatureKeyIamMember, error) {
	var resource KmsAsymmetricSignatureKeyIamMember
	err := ctx.ReadResource("yandex:index/kmsAsymmetricSignatureKeyIamMember:KmsAsymmetricSignatureKeyIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KmsAsymmetricSignatureKeyIamMember resources.
type kmsAsymmetricSignatureKeyIamMemberState struct {
	// The [Yandex Key Management Service](https://yandex.cloud/docs/kms/) Asymmetric Signature Key ID to apply a binding to.
	AsymmetricSignatureKeyId *string `pulumi:"asymmetricSignatureKeyId"`
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member *string `pulumi:"member"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       *string `pulumi:"role"`
	SleepAfter *int    `pulumi:"sleepAfter"`
}

type KmsAsymmetricSignatureKeyIamMemberState struct {
	// The [Yandex Key Management Service](https://yandex.cloud/docs/kms/) Asymmetric Signature Key ID to apply a binding to.
	AsymmetricSignatureKeyId pulumi.StringPtrInput
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member pulumi.StringPtrInput
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       pulumi.StringPtrInput
	SleepAfter pulumi.IntPtrInput
}

func (KmsAsymmetricSignatureKeyIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*kmsAsymmetricSignatureKeyIamMemberState)(nil)).Elem()
}

type kmsAsymmetricSignatureKeyIamMemberArgs struct {
	// The [Yandex Key Management Service](https://yandex.cloud/docs/kms/) Asymmetric Signature Key ID to apply a binding to.
	AsymmetricSignatureKeyId string `pulumi:"asymmetricSignatureKeyId"`
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member string `pulumi:"member"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       string `pulumi:"role"`
	SleepAfter *int   `pulumi:"sleepAfter"`
}

// The set of arguments for constructing a KmsAsymmetricSignatureKeyIamMember resource.
type KmsAsymmetricSignatureKeyIamMemberArgs struct {
	// The [Yandex Key Management Service](https://yandex.cloud/docs/kms/) Asymmetric Signature Key ID to apply a binding to.
	AsymmetricSignatureKeyId pulumi.StringInput
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member pulumi.StringInput
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       pulumi.StringInput
	SleepAfter pulumi.IntPtrInput
}

func (KmsAsymmetricSignatureKeyIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kmsAsymmetricSignatureKeyIamMemberArgs)(nil)).Elem()
}

type KmsAsymmetricSignatureKeyIamMemberInput interface {
	pulumi.Input

	ToKmsAsymmetricSignatureKeyIamMemberOutput() KmsAsymmetricSignatureKeyIamMemberOutput
	ToKmsAsymmetricSignatureKeyIamMemberOutputWithContext(ctx context.Context) KmsAsymmetricSignatureKeyIamMemberOutput
}

func (*KmsAsymmetricSignatureKeyIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**KmsAsymmetricSignatureKeyIamMember)(nil)).Elem()
}

func (i *KmsAsymmetricSignatureKeyIamMember) ToKmsAsymmetricSignatureKeyIamMemberOutput() KmsAsymmetricSignatureKeyIamMemberOutput {
	return i.ToKmsAsymmetricSignatureKeyIamMemberOutputWithContext(context.Background())
}

func (i *KmsAsymmetricSignatureKeyIamMember) ToKmsAsymmetricSignatureKeyIamMemberOutputWithContext(ctx context.Context) KmsAsymmetricSignatureKeyIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsAsymmetricSignatureKeyIamMemberOutput)
}

// KmsAsymmetricSignatureKeyIamMemberArrayInput is an input type that accepts KmsAsymmetricSignatureKeyIamMemberArray and KmsAsymmetricSignatureKeyIamMemberArrayOutput values.
// You can construct a concrete instance of `KmsAsymmetricSignatureKeyIamMemberArrayInput` via:
//
//	KmsAsymmetricSignatureKeyIamMemberArray{ KmsAsymmetricSignatureKeyIamMemberArgs{...} }
type KmsAsymmetricSignatureKeyIamMemberArrayInput interface {
	pulumi.Input

	ToKmsAsymmetricSignatureKeyIamMemberArrayOutput() KmsAsymmetricSignatureKeyIamMemberArrayOutput
	ToKmsAsymmetricSignatureKeyIamMemberArrayOutputWithContext(context.Context) KmsAsymmetricSignatureKeyIamMemberArrayOutput
}

type KmsAsymmetricSignatureKeyIamMemberArray []KmsAsymmetricSignatureKeyIamMemberInput

func (KmsAsymmetricSignatureKeyIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KmsAsymmetricSignatureKeyIamMember)(nil)).Elem()
}

func (i KmsAsymmetricSignatureKeyIamMemberArray) ToKmsAsymmetricSignatureKeyIamMemberArrayOutput() KmsAsymmetricSignatureKeyIamMemberArrayOutput {
	return i.ToKmsAsymmetricSignatureKeyIamMemberArrayOutputWithContext(context.Background())
}

func (i KmsAsymmetricSignatureKeyIamMemberArray) ToKmsAsymmetricSignatureKeyIamMemberArrayOutputWithContext(ctx context.Context) KmsAsymmetricSignatureKeyIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsAsymmetricSignatureKeyIamMemberArrayOutput)
}

// KmsAsymmetricSignatureKeyIamMemberMapInput is an input type that accepts KmsAsymmetricSignatureKeyIamMemberMap and KmsAsymmetricSignatureKeyIamMemberMapOutput values.
// You can construct a concrete instance of `KmsAsymmetricSignatureKeyIamMemberMapInput` via:
//
//	KmsAsymmetricSignatureKeyIamMemberMap{ "key": KmsAsymmetricSignatureKeyIamMemberArgs{...} }
type KmsAsymmetricSignatureKeyIamMemberMapInput interface {
	pulumi.Input

	ToKmsAsymmetricSignatureKeyIamMemberMapOutput() KmsAsymmetricSignatureKeyIamMemberMapOutput
	ToKmsAsymmetricSignatureKeyIamMemberMapOutputWithContext(context.Context) KmsAsymmetricSignatureKeyIamMemberMapOutput
}

type KmsAsymmetricSignatureKeyIamMemberMap map[string]KmsAsymmetricSignatureKeyIamMemberInput

func (KmsAsymmetricSignatureKeyIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KmsAsymmetricSignatureKeyIamMember)(nil)).Elem()
}

func (i KmsAsymmetricSignatureKeyIamMemberMap) ToKmsAsymmetricSignatureKeyIamMemberMapOutput() KmsAsymmetricSignatureKeyIamMemberMapOutput {
	return i.ToKmsAsymmetricSignatureKeyIamMemberMapOutputWithContext(context.Background())
}

func (i KmsAsymmetricSignatureKeyIamMemberMap) ToKmsAsymmetricSignatureKeyIamMemberMapOutputWithContext(ctx context.Context) KmsAsymmetricSignatureKeyIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsAsymmetricSignatureKeyIamMemberMapOutput)
}

type KmsAsymmetricSignatureKeyIamMemberOutput struct{ *pulumi.OutputState }

func (KmsAsymmetricSignatureKeyIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KmsAsymmetricSignatureKeyIamMember)(nil)).Elem()
}

func (o KmsAsymmetricSignatureKeyIamMemberOutput) ToKmsAsymmetricSignatureKeyIamMemberOutput() KmsAsymmetricSignatureKeyIamMemberOutput {
	return o
}

func (o KmsAsymmetricSignatureKeyIamMemberOutput) ToKmsAsymmetricSignatureKeyIamMemberOutputWithContext(ctx context.Context) KmsAsymmetricSignatureKeyIamMemberOutput {
	return o
}

// The [Yandex Key Management Service](https://yandex.cloud/docs/kms/) Asymmetric Signature Key ID to apply a binding to.
func (o KmsAsymmetricSignatureKeyIamMemberOutput) AsymmetricSignatureKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsAsymmetricSignatureKeyIamMember) pulumi.StringOutput { return v.AsymmetricSignatureKeyId }).(pulumi.StringOutput)
}

// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
func (o KmsAsymmetricSignatureKeyIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsAsymmetricSignatureKeyIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
func (o KmsAsymmetricSignatureKeyIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *KmsAsymmetricSignatureKeyIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o KmsAsymmetricSignatureKeyIamMemberOutput) SleepAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KmsAsymmetricSignatureKeyIamMember) pulumi.IntPtrOutput { return v.SleepAfter }).(pulumi.IntPtrOutput)
}

type KmsAsymmetricSignatureKeyIamMemberArrayOutput struct{ *pulumi.OutputState }

func (KmsAsymmetricSignatureKeyIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KmsAsymmetricSignatureKeyIamMember)(nil)).Elem()
}

func (o KmsAsymmetricSignatureKeyIamMemberArrayOutput) ToKmsAsymmetricSignatureKeyIamMemberArrayOutput() KmsAsymmetricSignatureKeyIamMemberArrayOutput {
	return o
}

func (o KmsAsymmetricSignatureKeyIamMemberArrayOutput) ToKmsAsymmetricSignatureKeyIamMemberArrayOutputWithContext(ctx context.Context) KmsAsymmetricSignatureKeyIamMemberArrayOutput {
	return o
}

func (o KmsAsymmetricSignatureKeyIamMemberArrayOutput) Index(i pulumi.IntInput) KmsAsymmetricSignatureKeyIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KmsAsymmetricSignatureKeyIamMember {
		return vs[0].([]*KmsAsymmetricSignatureKeyIamMember)[vs[1].(int)]
	}).(KmsAsymmetricSignatureKeyIamMemberOutput)
}

type KmsAsymmetricSignatureKeyIamMemberMapOutput struct{ *pulumi.OutputState }

func (KmsAsymmetricSignatureKeyIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KmsAsymmetricSignatureKeyIamMember)(nil)).Elem()
}

func (o KmsAsymmetricSignatureKeyIamMemberMapOutput) ToKmsAsymmetricSignatureKeyIamMemberMapOutput() KmsAsymmetricSignatureKeyIamMemberMapOutput {
	return o
}

func (o KmsAsymmetricSignatureKeyIamMemberMapOutput) ToKmsAsymmetricSignatureKeyIamMemberMapOutputWithContext(ctx context.Context) KmsAsymmetricSignatureKeyIamMemberMapOutput {
	return o
}

func (o KmsAsymmetricSignatureKeyIamMemberMapOutput) MapIndex(k pulumi.StringInput) KmsAsymmetricSignatureKeyIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KmsAsymmetricSignatureKeyIamMember {
		return vs[0].(map[string]*KmsAsymmetricSignatureKeyIamMember)[vs[1].(string)]
	}).(KmsAsymmetricSignatureKeyIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KmsAsymmetricSignatureKeyIamMemberInput)(nil)).Elem(), &KmsAsymmetricSignatureKeyIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*KmsAsymmetricSignatureKeyIamMemberArrayInput)(nil)).Elem(), KmsAsymmetricSignatureKeyIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KmsAsymmetricSignatureKeyIamMemberMapInput)(nil)).Elem(), KmsAsymmetricSignatureKeyIamMemberMap{})
	pulumi.RegisterOutputType(KmsAsymmetricSignatureKeyIamMemberOutput{})
	pulumi.RegisterOutputType(KmsAsymmetricSignatureKeyIamMemberArrayOutput{})
	pulumi.RegisterOutputType(KmsAsymmetricSignatureKeyIamMemberMapOutput{})
}
