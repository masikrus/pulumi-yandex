// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DnsZoneIamBinding struct {
	pulumi.CustomResourceState

	// The [DNS](https://yandex.cloud/docs/dns/) Zone ID to apply a binding to.
	DnsZoneId pulumi.StringOutput `pulumi:"dnsZoneId"`
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       pulumi.StringOutput `pulumi:"role"`
	SleepAfter pulumi.IntPtrOutput `pulumi:"sleepAfter"`
}

// NewDnsZoneIamBinding registers a new resource with the given unique name, arguments, and options.
func NewDnsZoneIamBinding(ctx *pulumi.Context,
	name string, args *DnsZoneIamBindingArgs, opts ...pulumi.ResourceOption) (*DnsZoneIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DnsZoneId == nil {
		return nil, errors.New("invalid value for required argument 'DnsZoneId'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsZoneIamBinding
	err := ctx.RegisterResource("yandex:index/dnsZoneIamBinding:DnsZoneIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsZoneIamBinding gets an existing DnsZoneIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsZoneIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsZoneIamBindingState, opts ...pulumi.ResourceOption) (*DnsZoneIamBinding, error) {
	var resource DnsZoneIamBinding
	err := ctx.ReadResource("yandex:index/dnsZoneIamBinding:DnsZoneIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsZoneIamBinding resources.
type dnsZoneIamBindingState struct {
	// The [DNS](https://yandex.cloud/docs/dns/) Zone ID to apply a binding to.
	DnsZoneId *string `pulumi:"dnsZoneId"`
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Members []string `pulumi:"members"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       *string `pulumi:"role"`
	SleepAfter *int    `pulumi:"sleepAfter"`
}

type DnsZoneIamBindingState struct {
	// The [DNS](https://yandex.cloud/docs/dns/) Zone ID to apply a binding to.
	DnsZoneId pulumi.StringPtrInput
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Members pulumi.StringArrayInput
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       pulumi.StringPtrInput
	SleepAfter pulumi.IntPtrInput
}

func (DnsZoneIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsZoneIamBindingState)(nil)).Elem()
}

type dnsZoneIamBindingArgs struct {
	// The [DNS](https://yandex.cloud/docs/dns/) Zone ID to apply a binding to.
	DnsZoneId string `pulumi:"dnsZoneId"`
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Members []string `pulumi:"members"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       string `pulumi:"role"`
	SleepAfter *int   `pulumi:"sleepAfter"`
}

// The set of arguments for constructing a DnsZoneIamBinding resource.
type DnsZoneIamBindingArgs struct {
	// The [DNS](https://yandex.cloud/docs/dns/) Zone ID to apply a binding to.
	DnsZoneId pulumi.StringInput
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Members pulumi.StringArrayInput
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       pulumi.StringInput
	SleepAfter pulumi.IntPtrInput
}

func (DnsZoneIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsZoneIamBindingArgs)(nil)).Elem()
}

type DnsZoneIamBindingInput interface {
	pulumi.Input

	ToDnsZoneIamBindingOutput() DnsZoneIamBindingOutput
	ToDnsZoneIamBindingOutputWithContext(ctx context.Context) DnsZoneIamBindingOutput
}

func (*DnsZoneIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsZoneIamBinding)(nil)).Elem()
}

func (i *DnsZoneIamBinding) ToDnsZoneIamBindingOutput() DnsZoneIamBindingOutput {
	return i.ToDnsZoneIamBindingOutputWithContext(context.Background())
}

func (i *DnsZoneIamBinding) ToDnsZoneIamBindingOutputWithContext(ctx context.Context) DnsZoneIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneIamBindingOutput)
}

// DnsZoneIamBindingArrayInput is an input type that accepts DnsZoneIamBindingArray and DnsZoneIamBindingArrayOutput values.
// You can construct a concrete instance of `DnsZoneIamBindingArrayInput` via:
//
//	DnsZoneIamBindingArray{ DnsZoneIamBindingArgs{...} }
type DnsZoneIamBindingArrayInput interface {
	pulumi.Input

	ToDnsZoneIamBindingArrayOutput() DnsZoneIamBindingArrayOutput
	ToDnsZoneIamBindingArrayOutputWithContext(context.Context) DnsZoneIamBindingArrayOutput
}

type DnsZoneIamBindingArray []DnsZoneIamBindingInput

func (DnsZoneIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsZoneIamBinding)(nil)).Elem()
}

func (i DnsZoneIamBindingArray) ToDnsZoneIamBindingArrayOutput() DnsZoneIamBindingArrayOutput {
	return i.ToDnsZoneIamBindingArrayOutputWithContext(context.Background())
}

func (i DnsZoneIamBindingArray) ToDnsZoneIamBindingArrayOutputWithContext(ctx context.Context) DnsZoneIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneIamBindingArrayOutput)
}

// DnsZoneIamBindingMapInput is an input type that accepts DnsZoneIamBindingMap and DnsZoneIamBindingMapOutput values.
// You can construct a concrete instance of `DnsZoneIamBindingMapInput` via:
//
//	DnsZoneIamBindingMap{ "key": DnsZoneIamBindingArgs{...} }
type DnsZoneIamBindingMapInput interface {
	pulumi.Input

	ToDnsZoneIamBindingMapOutput() DnsZoneIamBindingMapOutput
	ToDnsZoneIamBindingMapOutputWithContext(context.Context) DnsZoneIamBindingMapOutput
}

type DnsZoneIamBindingMap map[string]DnsZoneIamBindingInput

func (DnsZoneIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsZoneIamBinding)(nil)).Elem()
}

func (i DnsZoneIamBindingMap) ToDnsZoneIamBindingMapOutput() DnsZoneIamBindingMapOutput {
	return i.ToDnsZoneIamBindingMapOutputWithContext(context.Background())
}

func (i DnsZoneIamBindingMap) ToDnsZoneIamBindingMapOutputWithContext(ctx context.Context) DnsZoneIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneIamBindingMapOutput)
}

type DnsZoneIamBindingOutput struct{ *pulumi.OutputState }

func (DnsZoneIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsZoneIamBinding)(nil)).Elem()
}

func (o DnsZoneIamBindingOutput) ToDnsZoneIamBindingOutput() DnsZoneIamBindingOutput {
	return o
}

func (o DnsZoneIamBindingOutput) ToDnsZoneIamBindingOutputWithContext(ctx context.Context) DnsZoneIamBindingOutput {
	return o
}

// The [DNS](https://yandex.cloud/docs/dns/) Zone ID to apply a binding to.
func (o DnsZoneIamBindingOutput) DnsZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZoneIamBinding) pulumi.StringOutput { return v.DnsZoneId }).(pulumi.StringOutput)
}

// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
func (o DnsZoneIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsZoneIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
func (o DnsZoneIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZoneIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o DnsZoneIamBindingOutput) SleepAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DnsZoneIamBinding) pulumi.IntPtrOutput { return v.SleepAfter }).(pulumi.IntPtrOutput)
}

type DnsZoneIamBindingArrayOutput struct{ *pulumi.OutputState }

func (DnsZoneIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsZoneIamBinding)(nil)).Elem()
}

func (o DnsZoneIamBindingArrayOutput) ToDnsZoneIamBindingArrayOutput() DnsZoneIamBindingArrayOutput {
	return o
}

func (o DnsZoneIamBindingArrayOutput) ToDnsZoneIamBindingArrayOutputWithContext(ctx context.Context) DnsZoneIamBindingArrayOutput {
	return o
}

func (o DnsZoneIamBindingArrayOutput) Index(i pulumi.IntInput) DnsZoneIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsZoneIamBinding {
		return vs[0].([]*DnsZoneIamBinding)[vs[1].(int)]
	}).(DnsZoneIamBindingOutput)
}

type DnsZoneIamBindingMapOutput struct{ *pulumi.OutputState }

func (DnsZoneIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsZoneIamBinding)(nil)).Elem()
}

func (o DnsZoneIamBindingMapOutput) ToDnsZoneIamBindingMapOutput() DnsZoneIamBindingMapOutput {
	return o
}

func (o DnsZoneIamBindingMapOutput) ToDnsZoneIamBindingMapOutputWithContext(ctx context.Context) DnsZoneIamBindingMapOutput {
	return o
}

func (o DnsZoneIamBindingMapOutput) MapIndex(k pulumi.StringInput) DnsZoneIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsZoneIamBinding {
		return vs[0].(map[string]*DnsZoneIamBinding)[vs[1].(string)]
	}).(DnsZoneIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneIamBindingInput)(nil)).Elem(), &DnsZoneIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneIamBindingArrayInput)(nil)).Elem(), DnsZoneIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneIamBindingMapInput)(nil)).Elem(), DnsZoneIamBindingMap{})
	pulumi.RegisterOutputType(DnsZoneIamBindingOutput{})
	pulumi.RegisterOutputType(DnsZoneIamBindingArrayOutput{})
	pulumi.RegisterOutputType(DnsZoneIamBindingMapOutput{})
}
