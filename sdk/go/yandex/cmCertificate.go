// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/masikrus/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CmCertificate struct {
	pulumi.CustomResourceState

	// Array of challenges.
	Challenges CmCertificateChallengeArrayOutput `pulumi:"challenges"`
	// The creation timestamp of the resource.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection pulumi.BoolPtrOutput `pulumi:"deletionProtection"`
	// The resource description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Domains for this certificate. Should be specified for managed certificates.
	Domains pulumi.StringArrayOutput `pulumi:"domains"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// Certificate issue timestamp.
	IssuedAt pulumi.StringOutput `pulumi:"issuedAt"`
	// Certificate Issuer.
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Managed specification. > Resource creation awaits getting challenges from issue provider.
	Managed CmCertificateManagedPtrOutput `pulumi:"managed"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Certificate end valid period.
	NotAfter pulumi.StringOutput `pulumi:"notAfter"`
	// Certificate start valid period.
	NotBefore pulumi.StringOutput `pulumi:"notBefore"`
	// Self-managed specification. > Only one type `privateKey` or `privateKeyLockboxSecret` should be specified.
	SelfManaged CmCertificateSelfManagedPtrOutput `pulumi:"selfManaged"`
	// Certificate Serial Number.
	Serial pulumi.StringOutput `pulumi:"serial"`
	// Certificate status: `VALIDATING`, `INVALID`, `ISSUED`, `REVOKED`, `RENEWING` or `RENEWAL_FAILED`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Certificate Subject.
	Subject pulumi.StringOutput `pulumi:"subject"`
	// Certificate type: `MANAGED` or `IMPORTED`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Certificate update timestamp.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewCmCertificate registers a new resource with the given unique name, arguments, and options.
func NewCmCertificate(ctx *pulumi.Context,
	name string, args *CmCertificateArgs, opts ...pulumi.ResourceOption) (*CmCertificate, error) {
	if args == nil {
		args = &CmCertificateArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CmCertificate
	err := ctx.RegisterResource("yandex:index/cmCertificate:CmCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCmCertificate gets an existing CmCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCmCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CmCertificateState, opts ...pulumi.ResourceOption) (*CmCertificate, error) {
	var resource CmCertificate
	err := ctx.ReadResource("yandex:index/cmCertificate:CmCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CmCertificate resources.
type cmCertificateState struct {
	// Array of challenges.
	Challenges []CmCertificateChallenge `pulumi:"challenges"`
	// The creation timestamp of the resource.
	CreatedAt *string `pulumi:"createdAt"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// The resource description.
	Description *string `pulumi:"description"`
	// Domains for this certificate. Should be specified for managed certificates.
	Domains []string `pulumi:"domains"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// Certificate issue timestamp.
	IssuedAt *string `pulumi:"issuedAt"`
	// Certificate Issuer.
	Issuer *string `pulumi:"issuer"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// Managed specification. > Resource creation awaits getting challenges from issue provider.
	Managed *CmCertificateManaged `pulumi:"managed"`
	// The resource name.
	Name *string `pulumi:"name"`
	// Certificate end valid period.
	NotAfter *string `pulumi:"notAfter"`
	// Certificate start valid period.
	NotBefore *string `pulumi:"notBefore"`
	// Self-managed specification. > Only one type `privateKey` or `privateKeyLockboxSecret` should be specified.
	SelfManaged *CmCertificateSelfManaged `pulumi:"selfManaged"`
	// Certificate Serial Number.
	Serial *string `pulumi:"serial"`
	// Certificate status: `VALIDATING`, `INVALID`, `ISSUED`, `REVOKED`, `RENEWING` or `RENEWAL_FAILED`.
	Status *string `pulumi:"status"`
	// Certificate Subject.
	Subject *string `pulumi:"subject"`
	// Certificate type: `MANAGED` or `IMPORTED`.
	Type *string `pulumi:"type"`
	// Certificate update timestamp.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type CmCertificateState struct {
	// Array of challenges.
	Challenges CmCertificateChallengeArrayInput
	// The creation timestamp of the resource.
	CreatedAt pulumi.StringPtrInput
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection pulumi.BoolPtrInput
	// The resource description.
	Description pulumi.StringPtrInput
	// Domains for this certificate. Should be specified for managed certificates.
	Domains pulumi.StringArrayInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// Certificate issue timestamp.
	IssuedAt pulumi.StringPtrInput
	// Certificate Issuer.
	Issuer pulumi.StringPtrInput
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput
	// Managed specification. > Resource creation awaits getting challenges from issue provider.
	Managed CmCertificateManagedPtrInput
	// The resource name.
	Name pulumi.StringPtrInput
	// Certificate end valid period.
	NotAfter pulumi.StringPtrInput
	// Certificate start valid period.
	NotBefore pulumi.StringPtrInput
	// Self-managed specification. > Only one type `privateKey` or `privateKeyLockboxSecret` should be specified.
	SelfManaged CmCertificateSelfManagedPtrInput
	// Certificate Serial Number.
	Serial pulumi.StringPtrInput
	// Certificate status: `VALIDATING`, `INVALID`, `ISSUED`, `REVOKED`, `RENEWING` or `RENEWAL_FAILED`.
	Status pulumi.StringPtrInput
	// Certificate Subject.
	Subject pulumi.StringPtrInput
	// Certificate type: `MANAGED` or `IMPORTED`.
	Type pulumi.StringPtrInput
	// Certificate update timestamp.
	UpdatedAt pulumi.StringPtrInput
}

func (CmCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*cmCertificateState)(nil)).Elem()
}

type cmCertificateArgs struct {
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// The resource description.
	Description *string `pulumi:"description"`
	// Domains for this certificate. Should be specified for managed certificates.
	Domains []string `pulumi:"domains"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// Managed specification. > Resource creation awaits getting challenges from issue provider.
	Managed *CmCertificateManaged `pulumi:"managed"`
	// The resource name.
	Name *string `pulumi:"name"`
	// Self-managed specification. > Only one type `privateKey` or `privateKeyLockboxSecret` should be specified.
	SelfManaged *CmCertificateSelfManaged `pulumi:"selfManaged"`
}

// The set of arguments for constructing a CmCertificate resource.
type CmCertificateArgs struct {
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection pulumi.BoolPtrInput
	// The resource description.
	Description pulumi.StringPtrInput
	// Domains for this certificate. Should be specified for managed certificates.
	Domains pulumi.StringArrayInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput
	// Managed specification. > Resource creation awaits getting challenges from issue provider.
	Managed CmCertificateManagedPtrInput
	// The resource name.
	Name pulumi.StringPtrInput
	// Self-managed specification. > Only one type `privateKey` or `privateKeyLockboxSecret` should be specified.
	SelfManaged CmCertificateSelfManagedPtrInput
}

func (CmCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cmCertificateArgs)(nil)).Elem()
}

type CmCertificateInput interface {
	pulumi.Input

	ToCmCertificateOutput() CmCertificateOutput
	ToCmCertificateOutputWithContext(ctx context.Context) CmCertificateOutput
}

func (*CmCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**CmCertificate)(nil)).Elem()
}

func (i *CmCertificate) ToCmCertificateOutput() CmCertificateOutput {
	return i.ToCmCertificateOutputWithContext(context.Background())
}

func (i *CmCertificate) ToCmCertificateOutputWithContext(ctx context.Context) CmCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmCertificateOutput)
}

// CmCertificateArrayInput is an input type that accepts CmCertificateArray and CmCertificateArrayOutput values.
// You can construct a concrete instance of `CmCertificateArrayInput` via:
//
//	CmCertificateArray{ CmCertificateArgs{...} }
type CmCertificateArrayInput interface {
	pulumi.Input

	ToCmCertificateArrayOutput() CmCertificateArrayOutput
	ToCmCertificateArrayOutputWithContext(context.Context) CmCertificateArrayOutput
}

type CmCertificateArray []CmCertificateInput

func (CmCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CmCertificate)(nil)).Elem()
}

func (i CmCertificateArray) ToCmCertificateArrayOutput() CmCertificateArrayOutput {
	return i.ToCmCertificateArrayOutputWithContext(context.Background())
}

func (i CmCertificateArray) ToCmCertificateArrayOutputWithContext(ctx context.Context) CmCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmCertificateArrayOutput)
}

// CmCertificateMapInput is an input type that accepts CmCertificateMap and CmCertificateMapOutput values.
// You can construct a concrete instance of `CmCertificateMapInput` via:
//
//	CmCertificateMap{ "key": CmCertificateArgs{...} }
type CmCertificateMapInput interface {
	pulumi.Input

	ToCmCertificateMapOutput() CmCertificateMapOutput
	ToCmCertificateMapOutputWithContext(context.Context) CmCertificateMapOutput
}

type CmCertificateMap map[string]CmCertificateInput

func (CmCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CmCertificate)(nil)).Elem()
}

func (i CmCertificateMap) ToCmCertificateMapOutput() CmCertificateMapOutput {
	return i.ToCmCertificateMapOutputWithContext(context.Background())
}

func (i CmCertificateMap) ToCmCertificateMapOutputWithContext(ctx context.Context) CmCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmCertificateMapOutput)
}

type CmCertificateOutput struct{ *pulumi.OutputState }

func (CmCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CmCertificate)(nil)).Elem()
}

func (o CmCertificateOutput) ToCmCertificateOutput() CmCertificateOutput {
	return o
}

func (o CmCertificateOutput) ToCmCertificateOutputWithContext(ctx context.Context) CmCertificateOutput {
	return o
}

// Array of challenges.
func (o CmCertificateOutput) Challenges() CmCertificateChallengeArrayOutput {
	return o.ApplyT(func(v *CmCertificate) CmCertificateChallengeArrayOutput { return v.Challenges }).(CmCertificateChallengeArrayOutput)
}

// The creation timestamp of the resource.
func (o CmCertificateOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *CmCertificate) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The `true` value means that resource is protected from accidental deletion.
func (o CmCertificateOutput) DeletionProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CmCertificate) pulumi.BoolPtrOutput { return v.DeletionProtection }).(pulumi.BoolPtrOutput)
}

// The resource description.
func (o CmCertificateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CmCertificate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Domains for this certificate. Should be specified for managed certificates.
func (o CmCertificateOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CmCertificate) pulumi.StringArrayOutput { return v.Domains }).(pulumi.StringArrayOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o CmCertificateOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *CmCertificate) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

// Certificate issue timestamp.
func (o CmCertificateOutput) IssuedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *CmCertificate) pulumi.StringOutput { return v.IssuedAt }).(pulumi.StringOutput)
}

// Certificate Issuer.
func (o CmCertificateOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v *CmCertificate) pulumi.StringOutput { return v.Issuer }).(pulumi.StringOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o CmCertificateOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CmCertificate) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Managed specification. > Resource creation awaits getting challenges from issue provider.
func (o CmCertificateOutput) Managed() CmCertificateManagedPtrOutput {
	return o.ApplyT(func(v *CmCertificate) CmCertificateManagedPtrOutput { return v.Managed }).(CmCertificateManagedPtrOutput)
}

// The resource name.
func (o CmCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CmCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Certificate end valid period.
func (o CmCertificateOutput) NotAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *CmCertificate) pulumi.StringOutput { return v.NotAfter }).(pulumi.StringOutput)
}

// Certificate start valid period.
func (o CmCertificateOutput) NotBefore() pulumi.StringOutput {
	return o.ApplyT(func(v *CmCertificate) pulumi.StringOutput { return v.NotBefore }).(pulumi.StringOutput)
}

// Self-managed specification. > Only one type `privateKey` or `privateKeyLockboxSecret` should be specified.
func (o CmCertificateOutput) SelfManaged() CmCertificateSelfManagedPtrOutput {
	return o.ApplyT(func(v *CmCertificate) CmCertificateSelfManagedPtrOutput { return v.SelfManaged }).(CmCertificateSelfManagedPtrOutput)
}

// Certificate Serial Number.
func (o CmCertificateOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v *CmCertificate) pulumi.StringOutput { return v.Serial }).(pulumi.StringOutput)
}

// Certificate status: `VALIDATING`, `INVALID`, `ISSUED`, `REVOKED`, `RENEWING` or `RENEWAL_FAILED`.
func (o CmCertificateOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CmCertificate) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Certificate Subject.
func (o CmCertificateOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v *CmCertificate) pulumi.StringOutput { return v.Subject }).(pulumi.StringOutput)
}

// Certificate type: `MANAGED` or `IMPORTED`.
func (o CmCertificateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CmCertificate) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Certificate update timestamp.
func (o CmCertificateOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *CmCertificate) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type CmCertificateArrayOutput struct{ *pulumi.OutputState }

func (CmCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CmCertificate)(nil)).Elem()
}

func (o CmCertificateArrayOutput) ToCmCertificateArrayOutput() CmCertificateArrayOutput {
	return o
}

func (o CmCertificateArrayOutput) ToCmCertificateArrayOutputWithContext(ctx context.Context) CmCertificateArrayOutput {
	return o
}

func (o CmCertificateArrayOutput) Index(i pulumi.IntInput) CmCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CmCertificate {
		return vs[0].([]*CmCertificate)[vs[1].(int)]
	}).(CmCertificateOutput)
}

type CmCertificateMapOutput struct{ *pulumi.OutputState }

func (CmCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CmCertificate)(nil)).Elem()
}

func (o CmCertificateMapOutput) ToCmCertificateMapOutput() CmCertificateMapOutput {
	return o
}

func (o CmCertificateMapOutput) ToCmCertificateMapOutputWithContext(ctx context.Context) CmCertificateMapOutput {
	return o
}

func (o CmCertificateMapOutput) MapIndex(k pulumi.StringInput) CmCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CmCertificate {
		return vs[0].(map[string]*CmCertificate)[vs[1].(string)]
	}).(CmCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CmCertificateInput)(nil)).Elem(), &CmCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CmCertificateArrayInput)(nil)).Elem(), CmCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CmCertificateMapInput)(nil)).Elem(), CmCertificateMap{})
	pulumi.RegisterOutputType(CmCertificateOutput{})
	pulumi.RegisterOutputType(CmCertificateArrayOutput{})
	pulumi.RegisterOutputType(CmCertificateMapOutput{})
}
