// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OrganizationmanagerOrganizationIamBinding struct {
	pulumi.CustomResourceState

	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The ID of the organization to attach the policy to.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       pulumi.StringOutput `pulumi:"role"`
	SleepAfter pulumi.IntPtrOutput `pulumi:"sleepAfter"`
}

// NewOrganizationmanagerOrganizationIamBinding registers a new resource with the given unique name, arguments, and options.
func NewOrganizationmanagerOrganizationIamBinding(ctx *pulumi.Context,
	name string, args *OrganizationmanagerOrganizationIamBindingArgs, opts ...pulumi.ResourceOption) (*OrganizationmanagerOrganizationIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrganizationmanagerOrganizationIamBinding
	err := ctx.RegisterResource("yandex:index/organizationmanagerOrganizationIamBinding:OrganizationmanagerOrganizationIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationmanagerOrganizationIamBinding gets an existing OrganizationmanagerOrganizationIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationmanagerOrganizationIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationmanagerOrganizationIamBindingState, opts ...pulumi.ResourceOption) (*OrganizationmanagerOrganizationIamBinding, error) {
	var resource OrganizationmanagerOrganizationIamBinding
	err := ctx.ReadResource("yandex:index/organizationmanagerOrganizationIamBinding:OrganizationmanagerOrganizationIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationmanagerOrganizationIamBinding resources.
type organizationmanagerOrganizationIamBindingState struct {
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Members []string `pulumi:"members"`
	// The ID of the organization to attach the policy to.
	OrganizationId *string `pulumi:"organizationId"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       *string `pulumi:"role"`
	SleepAfter *int    `pulumi:"sleepAfter"`
}

type OrganizationmanagerOrganizationIamBindingState struct {
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Members pulumi.StringArrayInput
	// The ID of the organization to attach the policy to.
	OrganizationId pulumi.StringPtrInput
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       pulumi.StringPtrInput
	SleepAfter pulumi.IntPtrInput
}

func (OrganizationmanagerOrganizationIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationmanagerOrganizationIamBindingState)(nil)).Elem()
}

type organizationmanagerOrganizationIamBindingArgs struct {
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Members []string `pulumi:"members"`
	// The ID of the organization to attach the policy to.
	OrganizationId string `pulumi:"organizationId"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       string `pulumi:"role"`
	SleepAfter *int   `pulumi:"sleepAfter"`
}

// The set of arguments for constructing a OrganizationmanagerOrganizationIamBinding resource.
type OrganizationmanagerOrganizationIamBindingArgs struct {
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Members pulumi.StringArrayInput
	// The ID of the organization to attach the policy to.
	OrganizationId pulumi.StringInput
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       pulumi.StringInput
	SleepAfter pulumi.IntPtrInput
}

func (OrganizationmanagerOrganizationIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationmanagerOrganizationIamBindingArgs)(nil)).Elem()
}

type OrganizationmanagerOrganizationIamBindingInput interface {
	pulumi.Input

	ToOrganizationmanagerOrganizationIamBindingOutput() OrganizationmanagerOrganizationIamBindingOutput
	ToOrganizationmanagerOrganizationIamBindingOutputWithContext(ctx context.Context) OrganizationmanagerOrganizationIamBindingOutput
}

func (*OrganizationmanagerOrganizationIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationmanagerOrganizationIamBinding)(nil)).Elem()
}

func (i *OrganizationmanagerOrganizationIamBinding) ToOrganizationmanagerOrganizationIamBindingOutput() OrganizationmanagerOrganizationIamBindingOutput {
	return i.ToOrganizationmanagerOrganizationIamBindingOutputWithContext(context.Background())
}

func (i *OrganizationmanagerOrganizationIamBinding) ToOrganizationmanagerOrganizationIamBindingOutputWithContext(ctx context.Context) OrganizationmanagerOrganizationIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationmanagerOrganizationIamBindingOutput)
}

// OrganizationmanagerOrganizationIamBindingArrayInput is an input type that accepts OrganizationmanagerOrganizationIamBindingArray and OrganizationmanagerOrganizationIamBindingArrayOutput values.
// You can construct a concrete instance of `OrganizationmanagerOrganizationIamBindingArrayInput` via:
//
//	OrganizationmanagerOrganizationIamBindingArray{ OrganizationmanagerOrganizationIamBindingArgs{...} }
type OrganizationmanagerOrganizationIamBindingArrayInput interface {
	pulumi.Input

	ToOrganizationmanagerOrganizationIamBindingArrayOutput() OrganizationmanagerOrganizationIamBindingArrayOutput
	ToOrganizationmanagerOrganizationIamBindingArrayOutputWithContext(context.Context) OrganizationmanagerOrganizationIamBindingArrayOutput
}

type OrganizationmanagerOrganizationIamBindingArray []OrganizationmanagerOrganizationIamBindingInput

func (OrganizationmanagerOrganizationIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationmanagerOrganizationIamBinding)(nil)).Elem()
}

func (i OrganizationmanagerOrganizationIamBindingArray) ToOrganizationmanagerOrganizationIamBindingArrayOutput() OrganizationmanagerOrganizationIamBindingArrayOutput {
	return i.ToOrganizationmanagerOrganizationIamBindingArrayOutputWithContext(context.Background())
}

func (i OrganizationmanagerOrganizationIamBindingArray) ToOrganizationmanagerOrganizationIamBindingArrayOutputWithContext(ctx context.Context) OrganizationmanagerOrganizationIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationmanagerOrganizationIamBindingArrayOutput)
}

// OrganizationmanagerOrganizationIamBindingMapInput is an input type that accepts OrganizationmanagerOrganizationIamBindingMap and OrganizationmanagerOrganizationIamBindingMapOutput values.
// You can construct a concrete instance of `OrganizationmanagerOrganizationIamBindingMapInput` via:
//
//	OrganizationmanagerOrganizationIamBindingMap{ "key": OrganizationmanagerOrganizationIamBindingArgs{...} }
type OrganizationmanagerOrganizationIamBindingMapInput interface {
	pulumi.Input

	ToOrganizationmanagerOrganizationIamBindingMapOutput() OrganizationmanagerOrganizationIamBindingMapOutput
	ToOrganizationmanagerOrganizationIamBindingMapOutputWithContext(context.Context) OrganizationmanagerOrganizationIamBindingMapOutput
}

type OrganizationmanagerOrganizationIamBindingMap map[string]OrganizationmanagerOrganizationIamBindingInput

func (OrganizationmanagerOrganizationIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationmanagerOrganizationIamBinding)(nil)).Elem()
}

func (i OrganizationmanagerOrganizationIamBindingMap) ToOrganizationmanagerOrganizationIamBindingMapOutput() OrganizationmanagerOrganizationIamBindingMapOutput {
	return i.ToOrganizationmanagerOrganizationIamBindingMapOutputWithContext(context.Background())
}

func (i OrganizationmanagerOrganizationIamBindingMap) ToOrganizationmanagerOrganizationIamBindingMapOutputWithContext(ctx context.Context) OrganizationmanagerOrganizationIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationmanagerOrganizationIamBindingMapOutput)
}

type OrganizationmanagerOrganizationIamBindingOutput struct{ *pulumi.OutputState }

func (OrganizationmanagerOrganizationIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationmanagerOrganizationIamBinding)(nil)).Elem()
}

func (o OrganizationmanagerOrganizationIamBindingOutput) ToOrganizationmanagerOrganizationIamBindingOutput() OrganizationmanagerOrganizationIamBindingOutput {
	return o
}

func (o OrganizationmanagerOrganizationIamBindingOutput) ToOrganizationmanagerOrganizationIamBindingOutputWithContext(ctx context.Context) OrganizationmanagerOrganizationIamBindingOutput {
	return o
}

// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
func (o OrganizationmanagerOrganizationIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrganizationmanagerOrganizationIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The ID of the organization to attach the policy to.
func (o OrganizationmanagerOrganizationIamBindingOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationmanagerOrganizationIamBinding) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
func (o OrganizationmanagerOrganizationIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationmanagerOrganizationIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o OrganizationmanagerOrganizationIamBindingOutput) SleepAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrganizationmanagerOrganizationIamBinding) pulumi.IntPtrOutput { return v.SleepAfter }).(pulumi.IntPtrOutput)
}

type OrganizationmanagerOrganizationIamBindingArrayOutput struct{ *pulumi.OutputState }

func (OrganizationmanagerOrganizationIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationmanagerOrganizationIamBinding)(nil)).Elem()
}

func (o OrganizationmanagerOrganizationIamBindingArrayOutput) ToOrganizationmanagerOrganizationIamBindingArrayOutput() OrganizationmanagerOrganizationIamBindingArrayOutput {
	return o
}

func (o OrganizationmanagerOrganizationIamBindingArrayOutput) ToOrganizationmanagerOrganizationIamBindingArrayOutputWithContext(ctx context.Context) OrganizationmanagerOrganizationIamBindingArrayOutput {
	return o
}

func (o OrganizationmanagerOrganizationIamBindingArrayOutput) Index(i pulumi.IntInput) OrganizationmanagerOrganizationIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrganizationmanagerOrganizationIamBinding {
		return vs[0].([]*OrganizationmanagerOrganizationIamBinding)[vs[1].(int)]
	}).(OrganizationmanagerOrganizationIamBindingOutput)
}

type OrganizationmanagerOrganizationIamBindingMapOutput struct{ *pulumi.OutputState }

func (OrganizationmanagerOrganizationIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationmanagerOrganizationIamBinding)(nil)).Elem()
}

func (o OrganizationmanagerOrganizationIamBindingMapOutput) ToOrganizationmanagerOrganizationIamBindingMapOutput() OrganizationmanagerOrganizationIamBindingMapOutput {
	return o
}

func (o OrganizationmanagerOrganizationIamBindingMapOutput) ToOrganizationmanagerOrganizationIamBindingMapOutputWithContext(ctx context.Context) OrganizationmanagerOrganizationIamBindingMapOutput {
	return o
}

func (o OrganizationmanagerOrganizationIamBindingMapOutput) MapIndex(k pulumi.StringInput) OrganizationmanagerOrganizationIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrganizationmanagerOrganizationIamBinding {
		return vs[0].(map[string]*OrganizationmanagerOrganizationIamBinding)[vs[1].(string)]
	}).(OrganizationmanagerOrganizationIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationmanagerOrganizationIamBindingInput)(nil)).Elem(), &OrganizationmanagerOrganizationIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationmanagerOrganizationIamBindingArrayInput)(nil)).Elem(), OrganizationmanagerOrganizationIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationmanagerOrganizationIamBindingMapInput)(nil)).Elem(), OrganizationmanagerOrganizationIamBindingMap{})
	pulumi.RegisterOutputType(OrganizationmanagerOrganizationIamBindingOutput{})
	pulumi.RegisterOutputType(OrganizationmanagerOrganizationIamBindingArrayOutput{})
	pulumi.RegisterOutputType(OrganizationmanagerOrganizationIamBindingMapOutput{})
}
