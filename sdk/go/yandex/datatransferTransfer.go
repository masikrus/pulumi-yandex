// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/masikrus/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatatransferTransfer struct {
	pulumi.CustomResourceState

	// The resource description.
	Description pulumi.StringOutput `pulumi:"description"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Activation action on create a new incremental transfer. It is not part of the transfer parameter and is used only on
	// create. One of `syncActivate`, `asyncActivate`, `dontActivate`. The default is `syncActivate`.
	OnCreateActivateMode pulumi.StringPtrOutput `pulumi:"onCreateActivateMode"`
	// Runtime parameters for the transfer.
	Runtime DatatransferTransferRuntimeOutput `pulumi:"runtime"`
	// ID of the source endpoint for the transfer.
	SourceId pulumi.StringOutput `pulumi:"sourceId"`
	// ID of the target endpoint for the transfer.
	TargetId pulumi.StringOutput `pulumi:"targetId"`
	// Transformation for the transfer.
	Transformation DatatransferTransferTransformationPtrOutput `pulumi:"transformation"`
	// Type of the transfer. One of `SNAPSHOT_ONLY`, `INCREMENT_ONLY`, `SNAPSHOT_AND_INCREMENT`
	Type pulumi.StringOutput `pulumi:"type"`
	// Error description if transfer has any errors.
	Warning pulumi.StringOutput `pulumi:"warning"`
}

// NewDatatransferTransfer registers a new resource with the given unique name, arguments, and options.
func NewDatatransferTransfer(ctx *pulumi.Context,
	name string, args *DatatransferTransferArgs, opts ...pulumi.ResourceOption) (*DatatransferTransfer, error) {
	if args == nil {
		args = &DatatransferTransferArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatatransferTransfer
	err := ctx.RegisterResource("yandex:index/datatransferTransfer:DatatransferTransfer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatatransferTransfer gets an existing DatatransferTransfer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatatransferTransfer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatatransferTransferState, opts ...pulumi.ResourceOption) (*DatatransferTransfer, error) {
	var resource DatatransferTransfer
	err := ctx.ReadResource("yandex:index/datatransferTransfer:DatatransferTransfer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatatransferTransfer resources.
type datatransferTransferState struct {
	// The resource description.
	Description *string `pulumi:"description"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name.
	Name *string `pulumi:"name"`
	// Activation action on create a new incremental transfer. It is not part of the transfer parameter and is used only on
	// create. One of `syncActivate`, `asyncActivate`, `dontActivate`. The default is `syncActivate`.
	OnCreateActivateMode *string `pulumi:"onCreateActivateMode"`
	// Runtime parameters for the transfer.
	Runtime *DatatransferTransferRuntime `pulumi:"runtime"`
	// ID of the source endpoint for the transfer.
	SourceId *string `pulumi:"sourceId"`
	// ID of the target endpoint for the transfer.
	TargetId *string `pulumi:"targetId"`
	// Transformation for the transfer.
	Transformation *DatatransferTransferTransformation `pulumi:"transformation"`
	// Type of the transfer. One of `SNAPSHOT_ONLY`, `INCREMENT_ONLY`, `SNAPSHOT_AND_INCREMENT`
	Type *string `pulumi:"type"`
	// Error description if transfer has any errors.
	Warning *string `pulumi:"warning"`
}

type DatatransferTransferState struct {
	// The resource description.
	Description pulumi.StringPtrInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput
	// The resource name.
	Name pulumi.StringPtrInput
	// Activation action on create a new incremental transfer. It is not part of the transfer parameter and is used only on
	// create. One of `syncActivate`, `asyncActivate`, `dontActivate`. The default is `syncActivate`.
	OnCreateActivateMode pulumi.StringPtrInput
	// Runtime parameters for the transfer.
	Runtime DatatransferTransferRuntimePtrInput
	// ID of the source endpoint for the transfer.
	SourceId pulumi.StringPtrInput
	// ID of the target endpoint for the transfer.
	TargetId pulumi.StringPtrInput
	// Transformation for the transfer.
	Transformation DatatransferTransferTransformationPtrInput
	// Type of the transfer. One of `SNAPSHOT_ONLY`, `INCREMENT_ONLY`, `SNAPSHOT_AND_INCREMENT`
	Type pulumi.StringPtrInput
	// Error description if transfer has any errors.
	Warning pulumi.StringPtrInput
}

func (DatatransferTransferState) ElementType() reflect.Type {
	return reflect.TypeOf((*datatransferTransferState)(nil)).Elem()
}

type datatransferTransferArgs struct {
	// The resource description.
	Description *string `pulumi:"description"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name.
	Name *string `pulumi:"name"`
	// Activation action on create a new incremental transfer. It is not part of the transfer parameter and is used only on
	// create. One of `syncActivate`, `asyncActivate`, `dontActivate`. The default is `syncActivate`.
	OnCreateActivateMode *string `pulumi:"onCreateActivateMode"`
	// Runtime parameters for the transfer.
	Runtime *DatatransferTransferRuntime `pulumi:"runtime"`
	// ID of the source endpoint for the transfer.
	SourceId *string `pulumi:"sourceId"`
	// ID of the target endpoint for the transfer.
	TargetId *string `pulumi:"targetId"`
	// Transformation for the transfer.
	Transformation *DatatransferTransferTransformation `pulumi:"transformation"`
	// Type of the transfer. One of `SNAPSHOT_ONLY`, `INCREMENT_ONLY`, `SNAPSHOT_AND_INCREMENT`
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a DatatransferTransfer resource.
type DatatransferTransferArgs struct {
	// The resource description.
	Description pulumi.StringPtrInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput
	// The resource name.
	Name pulumi.StringPtrInput
	// Activation action on create a new incremental transfer. It is not part of the transfer parameter and is used only on
	// create. One of `syncActivate`, `asyncActivate`, `dontActivate`. The default is `syncActivate`.
	OnCreateActivateMode pulumi.StringPtrInput
	// Runtime parameters for the transfer.
	Runtime DatatransferTransferRuntimePtrInput
	// ID of the source endpoint for the transfer.
	SourceId pulumi.StringPtrInput
	// ID of the target endpoint for the transfer.
	TargetId pulumi.StringPtrInput
	// Transformation for the transfer.
	Transformation DatatransferTransferTransformationPtrInput
	// Type of the transfer. One of `SNAPSHOT_ONLY`, `INCREMENT_ONLY`, `SNAPSHOT_AND_INCREMENT`
	Type pulumi.StringPtrInput
}

func (DatatransferTransferArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datatransferTransferArgs)(nil)).Elem()
}

type DatatransferTransferInput interface {
	pulumi.Input

	ToDatatransferTransferOutput() DatatransferTransferOutput
	ToDatatransferTransferOutputWithContext(ctx context.Context) DatatransferTransferOutput
}

func (*DatatransferTransfer) ElementType() reflect.Type {
	return reflect.TypeOf((**DatatransferTransfer)(nil)).Elem()
}

func (i *DatatransferTransfer) ToDatatransferTransferOutput() DatatransferTransferOutput {
	return i.ToDatatransferTransferOutputWithContext(context.Background())
}

func (i *DatatransferTransfer) ToDatatransferTransferOutputWithContext(ctx context.Context) DatatransferTransferOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatatransferTransferOutput)
}

// DatatransferTransferArrayInput is an input type that accepts DatatransferTransferArray and DatatransferTransferArrayOutput values.
// You can construct a concrete instance of `DatatransferTransferArrayInput` via:
//
//	DatatransferTransferArray{ DatatransferTransferArgs{...} }
type DatatransferTransferArrayInput interface {
	pulumi.Input

	ToDatatransferTransferArrayOutput() DatatransferTransferArrayOutput
	ToDatatransferTransferArrayOutputWithContext(context.Context) DatatransferTransferArrayOutput
}

type DatatransferTransferArray []DatatransferTransferInput

func (DatatransferTransferArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatatransferTransfer)(nil)).Elem()
}

func (i DatatransferTransferArray) ToDatatransferTransferArrayOutput() DatatransferTransferArrayOutput {
	return i.ToDatatransferTransferArrayOutputWithContext(context.Background())
}

func (i DatatransferTransferArray) ToDatatransferTransferArrayOutputWithContext(ctx context.Context) DatatransferTransferArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatatransferTransferArrayOutput)
}

// DatatransferTransferMapInput is an input type that accepts DatatransferTransferMap and DatatransferTransferMapOutput values.
// You can construct a concrete instance of `DatatransferTransferMapInput` via:
//
//	DatatransferTransferMap{ "key": DatatransferTransferArgs{...} }
type DatatransferTransferMapInput interface {
	pulumi.Input

	ToDatatransferTransferMapOutput() DatatransferTransferMapOutput
	ToDatatransferTransferMapOutputWithContext(context.Context) DatatransferTransferMapOutput
}

type DatatransferTransferMap map[string]DatatransferTransferInput

func (DatatransferTransferMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatatransferTransfer)(nil)).Elem()
}

func (i DatatransferTransferMap) ToDatatransferTransferMapOutput() DatatransferTransferMapOutput {
	return i.ToDatatransferTransferMapOutputWithContext(context.Background())
}

func (i DatatransferTransferMap) ToDatatransferTransferMapOutputWithContext(ctx context.Context) DatatransferTransferMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatatransferTransferMapOutput)
}

type DatatransferTransferOutput struct{ *pulumi.OutputState }

func (DatatransferTransferOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatatransferTransfer)(nil)).Elem()
}

func (o DatatransferTransferOutput) ToDatatransferTransferOutput() DatatransferTransferOutput {
	return o
}

func (o DatatransferTransferOutput) ToDatatransferTransferOutputWithContext(ctx context.Context) DatatransferTransferOutput {
	return o
}

// The resource description.
func (o DatatransferTransferOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *DatatransferTransfer) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o DatatransferTransferOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatatransferTransfer) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o DatatransferTransferOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DatatransferTransfer) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name.
func (o DatatransferTransferOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatatransferTransfer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Activation action on create a new incremental transfer. It is not part of the transfer parameter and is used only on
// create. One of `syncActivate`, `asyncActivate`, `dontActivate`. The default is `syncActivate`.
func (o DatatransferTransferOutput) OnCreateActivateMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatatransferTransfer) pulumi.StringPtrOutput { return v.OnCreateActivateMode }).(pulumi.StringPtrOutput)
}

// Runtime parameters for the transfer.
func (o DatatransferTransferOutput) Runtime() DatatransferTransferRuntimeOutput {
	return o.ApplyT(func(v *DatatransferTransfer) DatatransferTransferRuntimeOutput { return v.Runtime }).(DatatransferTransferRuntimeOutput)
}

// ID of the source endpoint for the transfer.
func (o DatatransferTransferOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatatransferTransfer) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

// ID of the target endpoint for the transfer.
func (o DatatransferTransferOutput) TargetId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatatransferTransfer) pulumi.StringOutput { return v.TargetId }).(pulumi.StringOutput)
}

// Transformation for the transfer.
func (o DatatransferTransferOutput) Transformation() DatatransferTransferTransformationPtrOutput {
	return o.ApplyT(func(v *DatatransferTransfer) DatatransferTransferTransformationPtrOutput { return v.Transformation }).(DatatransferTransferTransformationPtrOutput)
}

// Type of the transfer. One of `SNAPSHOT_ONLY`, `INCREMENT_ONLY`, `SNAPSHOT_AND_INCREMENT`
func (o DatatransferTransferOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DatatransferTransfer) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Error description if transfer has any errors.
func (o DatatransferTransferOutput) Warning() pulumi.StringOutput {
	return o.ApplyT(func(v *DatatransferTransfer) pulumi.StringOutput { return v.Warning }).(pulumi.StringOutput)
}

type DatatransferTransferArrayOutput struct{ *pulumi.OutputState }

func (DatatransferTransferArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatatransferTransfer)(nil)).Elem()
}

func (o DatatransferTransferArrayOutput) ToDatatransferTransferArrayOutput() DatatransferTransferArrayOutput {
	return o
}

func (o DatatransferTransferArrayOutput) ToDatatransferTransferArrayOutputWithContext(ctx context.Context) DatatransferTransferArrayOutput {
	return o
}

func (o DatatransferTransferArrayOutput) Index(i pulumi.IntInput) DatatransferTransferOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatatransferTransfer {
		return vs[0].([]*DatatransferTransfer)[vs[1].(int)]
	}).(DatatransferTransferOutput)
}

type DatatransferTransferMapOutput struct{ *pulumi.OutputState }

func (DatatransferTransferMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatatransferTransfer)(nil)).Elem()
}

func (o DatatransferTransferMapOutput) ToDatatransferTransferMapOutput() DatatransferTransferMapOutput {
	return o
}

func (o DatatransferTransferMapOutput) ToDatatransferTransferMapOutputWithContext(ctx context.Context) DatatransferTransferMapOutput {
	return o
}

func (o DatatransferTransferMapOutput) MapIndex(k pulumi.StringInput) DatatransferTransferOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatatransferTransfer {
		return vs[0].(map[string]*DatatransferTransfer)[vs[1].(string)]
	}).(DatatransferTransferOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatatransferTransferInput)(nil)).Elem(), &DatatransferTransfer{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatatransferTransferArrayInput)(nil)).Elem(), DatatransferTransferArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatatransferTransferMapInput)(nil)).Elem(), DatatransferTransferMap{})
	pulumi.RegisterOutputType(DatatransferTransferOutput{})
	pulumi.RegisterOutputType(DatatransferTransferArrayOutput{})
	pulumi.RegisterOutputType(DatatransferTransferMapOutput{})
}
