// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KubernetesNodeGroup struct {
	pulumi.CustomResourceState

	// This argument specify subnets (zones), that will be used by node group compute instances.
	AllocationPolicy KubernetesNodeGroupAllocationPolicyOutput `pulumi:"allocationPolicy"`
	// A list of allowed unsafe `sysctl` parameters for this node group. For more details see
	// [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster).
	AllowedUnsafeSysctls pulumi.StringArrayOutput `pulumi:"allowedUnsafeSysctls"`
	// The ID of the Kubernetes cluster that this node group belongs to.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The creation timestamp of the resource.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Deploy policy of the node group.
	DeployPolicy KubernetesNodeGroupDeployPolicyOutput `pulumi:"deployPolicy"`
	// The resource description.
	Description pulumi.StringOutput `pulumi:"description"`
	// ID of instance group that is used to manage this Kubernetes node group.
	InstanceGroupId pulumi.StringOutput `pulumi:"instanceGroupId"`
	// Template used to create compute instances in this Kubernetes node group.
	InstanceTemplate KubernetesNodeGroupInstanceTemplateOutput `pulumi:"instanceTemplate"`
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Maintenance policy for this Kubernetes node group. If policy is omitted, automatic revision upgrades are enabled and
	// could happen at any time. Revision upgrades are performed only within the same minor version, e.g. `1.29`. Minor version
	// upgrades (e.g. `1.29`->`1.30`) should be performed manually.
	MaintenancePolicy KubernetesNodeGroupMaintenancePolicyOutput `pulumi:"maintenancePolicy"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// A set of key/value label pairs, that are assigned to all the nodes of this Kubernetes node group.
	NodeLabels pulumi.StringMapOutput `pulumi:"nodeLabels"`
	// A list of Kubernetes taints, that are applied to all the nodes of this Kubernetes node group.
	NodeTaints pulumi.StringArrayOutput `pulumi:"nodeTaints"`
	// Scale policy of the node group.
	ScalePolicy KubernetesNodeGroupScalePolicyOutput `pulumi:"scalePolicy"`
	// Status of the Kubernetes node group.
	Status pulumi.StringOutput `pulumi:"status"`
	// Version of Kubernetes that will be used for Kubernetes node group.
	Version pulumi.StringOutput `pulumi:"version"`
	// Information about Kubernetes node group version.
	VersionInfos KubernetesNodeGroupVersionInfoArrayOutput `pulumi:"versionInfos"`
}

// NewKubernetesNodeGroup registers a new resource with the given unique name, arguments, and options.
func NewKubernetesNodeGroup(ctx *pulumi.Context,
	name string, args *KubernetesNodeGroupArgs, opts ...pulumi.ResourceOption) (*KubernetesNodeGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.InstanceTemplate == nil {
		return nil, errors.New("invalid value for required argument 'InstanceTemplate'")
	}
	if args.ScalePolicy == nil {
		return nil, errors.New("invalid value for required argument 'ScalePolicy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KubernetesNodeGroup
	err := ctx.RegisterResource("yandex:index/kubernetesNodeGroup:KubernetesNodeGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKubernetesNodeGroup gets an existing KubernetesNodeGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKubernetesNodeGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KubernetesNodeGroupState, opts ...pulumi.ResourceOption) (*KubernetesNodeGroup, error) {
	var resource KubernetesNodeGroup
	err := ctx.ReadResource("yandex:index/kubernetesNodeGroup:KubernetesNodeGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KubernetesNodeGroup resources.
type kubernetesNodeGroupState struct {
	// This argument specify subnets (zones), that will be used by node group compute instances.
	AllocationPolicy *KubernetesNodeGroupAllocationPolicy `pulumi:"allocationPolicy"`
	// A list of allowed unsafe `sysctl` parameters for this node group. For more details see
	// [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster).
	AllowedUnsafeSysctls []string `pulumi:"allowedUnsafeSysctls"`
	// The ID of the Kubernetes cluster that this node group belongs to.
	ClusterId *string `pulumi:"clusterId"`
	// The creation timestamp of the resource.
	CreatedAt *string `pulumi:"createdAt"`
	// Deploy policy of the node group.
	DeployPolicy *KubernetesNodeGroupDeployPolicy `pulumi:"deployPolicy"`
	// The resource description.
	Description *string `pulumi:"description"`
	// ID of instance group that is used to manage this Kubernetes node group.
	InstanceGroupId *string `pulumi:"instanceGroupId"`
	// Template used to create compute instances in this Kubernetes node group.
	InstanceTemplate *KubernetesNodeGroupInstanceTemplate `pulumi:"instanceTemplate"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// Maintenance policy for this Kubernetes node group. If policy is omitted, automatic revision upgrades are enabled and
	// could happen at any time. Revision upgrades are performed only within the same minor version, e.g. `1.29`. Minor version
	// upgrades (e.g. `1.29`->`1.30`) should be performed manually.
	MaintenancePolicy *KubernetesNodeGroupMaintenancePolicy `pulumi:"maintenancePolicy"`
	// The resource name.
	Name *string `pulumi:"name"`
	// A set of key/value label pairs, that are assigned to all the nodes of this Kubernetes node group.
	NodeLabels map[string]string `pulumi:"nodeLabels"`
	// A list of Kubernetes taints, that are applied to all the nodes of this Kubernetes node group.
	NodeTaints []string `pulumi:"nodeTaints"`
	// Scale policy of the node group.
	ScalePolicy *KubernetesNodeGroupScalePolicy `pulumi:"scalePolicy"`
	// Status of the Kubernetes node group.
	Status *string `pulumi:"status"`
	// Version of Kubernetes that will be used for Kubernetes node group.
	Version *string `pulumi:"version"`
	// Information about Kubernetes node group version.
	VersionInfos []KubernetesNodeGroupVersionInfo `pulumi:"versionInfos"`
}

type KubernetesNodeGroupState struct {
	// This argument specify subnets (zones), that will be used by node group compute instances.
	AllocationPolicy KubernetesNodeGroupAllocationPolicyPtrInput
	// A list of allowed unsafe `sysctl` parameters for this node group. For more details see
	// [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster).
	AllowedUnsafeSysctls pulumi.StringArrayInput
	// The ID of the Kubernetes cluster that this node group belongs to.
	ClusterId pulumi.StringPtrInput
	// The creation timestamp of the resource.
	CreatedAt pulumi.StringPtrInput
	// Deploy policy of the node group.
	DeployPolicy KubernetesNodeGroupDeployPolicyPtrInput
	// The resource description.
	Description pulumi.StringPtrInput
	// ID of instance group that is used to manage this Kubernetes node group.
	InstanceGroupId pulumi.StringPtrInput
	// Template used to create compute instances in this Kubernetes node group.
	InstanceTemplate KubernetesNodeGroupInstanceTemplatePtrInput
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput
	// Maintenance policy for this Kubernetes node group. If policy is omitted, automatic revision upgrades are enabled and
	// could happen at any time. Revision upgrades are performed only within the same minor version, e.g. `1.29`. Minor version
	// upgrades (e.g. `1.29`->`1.30`) should be performed manually.
	MaintenancePolicy KubernetesNodeGroupMaintenancePolicyPtrInput
	// The resource name.
	Name pulumi.StringPtrInput
	// A set of key/value label pairs, that are assigned to all the nodes of this Kubernetes node group.
	NodeLabels pulumi.StringMapInput
	// A list of Kubernetes taints, that are applied to all the nodes of this Kubernetes node group.
	NodeTaints pulumi.StringArrayInput
	// Scale policy of the node group.
	ScalePolicy KubernetesNodeGroupScalePolicyPtrInput
	// Status of the Kubernetes node group.
	Status pulumi.StringPtrInput
	// Version of Kubernetes that will be used for Kubernetes node group.
	Version pulumi.StringPtrInput
	// Information about Kubernetes node group version.
	VersionInfos KubernetesNodeGroupVersionInfoArrayInput
}

func (KubernetesNodeGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesNodeGroupState)(nil)).Elem()
}

type kubernetesNodeGroupArgs struct {
	// This argument specify subnets (zones), that will be used by node group compute instances.
	AllocationPolicy *KubernetesNodeGroupAllocationPolicy `pulumi:"allocationPolicy"`
	// A list of allowed unsafe `sysctl` parameters for this node group. For more details see
	// [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster).
	AllowedUnsafeSysctls []string `pulumi:"allowedUnsafeSysctls"`
	// The ID of the Kubernetes cluster that this node group belongs to.
	ClusterId string `pulumi:"clusterId"`
	// Deploy policy of the node group.
	DeployPolicy *KubernetesNodeGroupDeployPolicy `pulumi:"deployPolicy"`
	// The resource description.
	Description *string `pulumi:"description"`
	// Template used to create compute instances in this Kubernetes node group.
	InstanceTemplate KubernetesNodeGroupInstanceTemplate `pulumi:"instanceTemplate"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// Maintenance policy for this Kubernetes node group. If policy is omitted, automatic revision upgrades are enabled and
	// could happen at any time. Revision upgrades are performed only within the same minor version, e.g. `1.29`. Minor version
	// upgrades (e.g. `1.29`->`1.30`) should be performed manually.
	MaintenancePolicy *KubernetesNodeGroupMaintenancePolicy `pulumi:"maintenancePolicy"`
	// The resource name.
	Name *string `pulumi:"name"`
	// A set of key/value label pairs, that are assigned to all the nodes of this Kubernetes node group.
	NodeLabels map[string]string `pulumi:"nodeLabels"`
	// A list of Kubernetes taints, that are applied to all the nodes of this Kubernetes node group.
	NodeTaints []string `pulumi:"nodeTaints"`
	// Scale policy of the node group.
	ScalePolicy KubernetesNodeGroupScalePolicy `pulumi:"scalePolicy"`
	// Version of Kubernetes that will be used for Kubernetes node group.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a KubernetesNodeGroup resource.
type KubernetesNodeGroupArgs struct {
	// This argument specify subnets (zones), that will be used by node group compute instances.
	AllocationPolicy KubernetesNodeGroupAllocationPolicyPtrInput
	// A list of allowed unsafe `sysctl` parameters for this node group. For more details see
	// [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster).
	AllowedUnsafeSysctls pulumi.StringArrayInput
	// The ID of the Kubernetes cluster that this node group belongs to.
	ClusterId pulumi.StringInput
	// Deploy policy of the node group.
	DeployPolicy KubernetesNodeGroupDeployPolicyPtrInput
	// The resource description.
	Description pulumi.StringPtrInput
	// Template used to create compute instances in this Kubernetes node group.
	InstanceTemplate KubernetesNodeGroupInstanceTemplateInput
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput
	// Maintenance policy for this Kubernetes node group. If policy is omitted, automatic revision upgrades are enabled and
	// could happen at any time. Revision upgrades are performed only within the same minor version, e.g. `1.29`. Minor version
	// upgrades (e.g. `1.29`->`1.30`) should be performed manually.
	MaintenancePolicy KubernetesNodeGroupMaintenancePolicyPtrInput
	// The resource name.
	Name pulumi.StringPtrInput
	// A set of key/value label pairs, that are assigned to all the nodes of this Kubernetes node group.
	NodeLabels pulumi.StringMapInput
	// A list of Kubernetes taints, that are applied to all the nodes of this Kubernetes node group.
	NodeTaints pulumi.StringArrayInput
	// Scale policy of the node group.
	ScalePolicy KubernetesNodeGroupScalePolicyInput
	// Version of Kubernetes that will be used for Kubernetes node group.
	Version pulumi.StringPtrInput
}

func (KubernetesNodeGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesNodeGroupArgs)(nil)).Elem()
}

type KubernetesNodeGroupInput interface {
	pulumi.Input

	ToKubernetesNodeGroupOutput() KubernetesNodeGroupOutput
	ToKubernetesNodeGroupOutputWithContext(ctx context.Context) KubernetesNodeGroupOutput
}

func (*KubernetesNodeGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesNodeGroup)(nil)).Elem()
}

func (i *KubernetesNodeGroup) ToKubernetesNodeGroupOutput() KubernetesNodeGroupOutput {
	return i.ToKubernetesNodeGroupOutputWithContext(context.Background())
}

func (i *KubernetesNodeGroup) ToKubernetesNodeGroupOutputWithContext(ctx context.Context) KubernetesNodeGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesNodeGroupOutput)
}

// KubernetesNodeGroupArrayInput is an input type that accepts KubernetesNodeGroupArray and KubernetesNodeGroupArrayOutput values.
// You can construct a concrete instance of `KubernetesNodeGroupArrayInput` via:
//
//	KubernetesNodeGroupArray{ KubernetesNodeGroupArgs{...} }
type KubernetesNodeGroupArrayInput interface {
	pulumi.Input

	ToKubernetesNodeGroupArrayOutput() KubernetesNodeGroupArrayOutput
	ToKubernetesNodeGroupArrayOutputWithContext(context.Context) KubernetesNodeGroupArrayOutput
}

type KubernetesNodeGroupArray []KubernetesNodeGroupInput

func (KubernetesNodeGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubernetesNodeGroup)(nil)).Elem()
}

func (i KubernetesNodeGroupArray) ToKubernetesNodeGroupArrayOutput() KubernetesNodeGroupArrayOutput {
	return i.ToKubernetesNodeGroupArrayOutputWithContext(context.Background())
}

func (i KubernetesNodeGroupArray) ToKubernetesNodeGroupArrayOutputWithContext(ctx context.Context) KubernetesNodeGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesNodeGroupArrayOutput)
}

// KubernetesNodeGroupMapInput is an input type that accepts KubernetesNodeGroupMap and KubernetesNodeGroupMapOutput values.
// You can construct a concrete instance of `KubernetesNodeGroupMapInput` via:
//
//	KubernetesNodeGroupMap{ "key": KubernetesNodeGroupArgs{...} }
type KubernetesNodeGroupMapInput interface {
	pulumi.Input

	ToKubernetesNodeGroupMapOutput() KubernetesNodeGroupMapOutput
	ToKubernetesNodeGroupMapOutputWithContext(context.Context) KubernetesNodeGroupMapOutput
}

type KubernetesNodeGroupMap map[string]KubernetesNodeGroupInput

func (KubernetesNodeGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubernetesNodeGroup)(nil)).Elem()
}

func (i KubernetesNodeGroupMap) ToKubernetesNodeGroupMapOutput() KubernetesNodeGroupMapOutput {
	return i.ToKubernetesNodeGroupMapOutputWithContext(context.Background())
}

func (i KubernetesNodeGroupMap) ToKubernetesNodeGroupMapOutputWithContext(ctx context.Context) KubernetesNodeGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesNodeGroupMapOutput)
}

type KubernetesNodeGroupOutput struct{ *pulumi.OutputState }

func (KubernetesNodeGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesNodeGroup)(nil)).Elem()
}

func (o KubernetesNodeGroupOutput) ToKubernetesNodeGroupOutput() KubernetesNodeGroupOutput {
	return o
}

func (o KubernetesNodeGroupOutput) ToKubernetesNodeGroupOutputWithContext(ctx context.Context) KubernetesNodeGroupOutput {
	return o
}

// This argument specify subnets (zones), that will be used by node group compute instances.
func (o KubernetesNodeGroupOutput) AllocationPolicy() KubernetesNodeGroupAllocationPolicyOutput {
	return o.ApplyT(func(v *KubernetesNodeGroup) KubernetesNodeGroupAllocationPolicyOutput { return v.AllocationPolicy }).(KubernetesNodeGroupAllocationPolicyOutput)
}

// A list of allowed unsafe `sysctl` parameters for this node group. For more details see
// [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster).
func (o KubernetesNodeGroupOutput) AllowedUnsafeSysctls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesNodeGroup) pulumi.StringArrayOutput { return v.AllowedUnsafeSysctls }).(pulumi.StringArrayOutput)
}

// The ID of the Kubernetes cluster that this node group belongs to.
func (o KubernetesNodeGroupOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodeGroup) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The creation timestamp of the resource.
func (o KubernetesNodeGroupOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodeGroup) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Deploy policy of the node group.
func (o KubernetesNodeGroupOutput) DeployPolicy() KubernetesNodeGroupDeployPolicyOutput {
	return o.ApplyT(func(v *KubernetesNodeGroup) KubernetesNodeGroupDeployPolicyOutput { return v.DeployPolicy }).(KubernetesNodeGroupDeployPolicyOutput)
}

// The resource description.
func (o KubernetesNodeGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodeGroup) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// ID of instance group that is used to manage this Kubernetes node group.
func (o KubernetesNodeGroupOutput) InstanceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodeGroup) pulumi.StringOutput { return v.InstanceGroupId }).(pulumi.StringOutput)
}

// Template used to create compute instances in this Kubernetes node group.
func (o KubernetesNodeGroupOutput) InstanceTemplate() KubernetesNodeGroupInstanceTemplateOutput {
	return o.ApplyT(func(v *KubernetesNodeGroup) KubernetesNodeGroupInstanceTemplateOutput { return v.InstanceTemplate }).(KubernetesNodeGroupInstanceTemplateOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o KubernetesNodeGroupOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KubernetesNodeGroup) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Maintenance policy for this Kubernetes node group. If policy is omitted, automatic revision upgrades are enabled and
// could happen at any time. Revision upgrades are performed only within the same minor version, e.g. `1.29`. Minor version
// upgrades (e.g. `1.29`->`1.30`) should be performed manually.
func (o KubernetesNodeGroupOutput) MaintenancePolicy() KubernetesNodeGroupMaintenancePolicyOutput {
	return o.ApplyT(func(v *KubernetesNodeGroup) KubernetesNodeGroupMaintenancePolicyOutput { return v.MaintenancePolicy }).(KubernetesNodeGroupMaintenancePolicyOutput)
}

// The resource name.
func (o KubernetesNodeGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodeGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A set of key/value label pairs, that are assigned to all the nodes of this Kubernetes node group.
func (o KubernetesNodeGroupOutput) NodeLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KubernetesNodeGroup) pulumi.StringMapOutput { return v.NodeLabels }).(pulumi.StringMapOutput)
}

// A list of Kubernetes taints, that are applied to all the nodes of this Kubernetes node group.
func (o KubernetesNodeGroupOutput) NodeTaints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesNodeGroup) pulumi.StringArrayOutput { return v.NodeTaints }).(pulumi.StringArrayOutput)
}

// Scale policy of the node group.
func (o KubernetesNodeGroupOutput) ScalePolicy() KubernetesNodeGroupScalePolicyOutput {
	return o.ApplyT(func(v *KubernetesNodeGroup) KubernetesNodeGroupScalePolicyOutput { return v.ScalePolicy }).(KubernetesNodeGroupScalePolicyOutput)
}

// Status of the Kubernetes node group.
func (o KubernetesNodeGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodeGroup) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Version of Kubernetes that will be used for Kubernetes node group.
func (o KubernetesNodeGroupOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesNodeGroup) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// Information about Kubernetes node group version.
func (o KubernetesNodeGroupOutput) VersionInfos() KubernetesNodeGroupVersionInfoArrayOutput {
	return o.ApplyT(func(v *KubernetesNodeGroup) KubernetesNodeGroupVersionInfoArrayOutput { return v.VersionInfos }).(KubernetesNodeGroupVersionInfoArrayOutput)
}

type KubernetesNodeGroupArrayOutput struct{ *pulumi.OutputState }

func (KubernetesNodeGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubernetesNodeGroup)(nil)).Elem()
}

func (o KubernetesNodeGroupArrayOutput) ToKubernetesNodeGroupArrayOutput() KubernetesNodeGroupArrayOutput {
	return o
}

func (o KubernetesNodeGroupArrayOutput) ToKubernetesNodeGroupArrayOutputWithContext(ctx context.Context) KubernetesNodeGroupArrayOutput {
	return o
}

func (o KubernetesNodeGroupArrayOutput) Index(i pulumi.IntInput) KubernetesNodeGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KubernetesNodeGroup {
		return vs[0].([]*KubernetesNodeGroup)[vs[1].(int)]
	}).(KubernetesNodeGroupOutput)
}

type KubernetesNodeGroupMapOutput struct{ *pulumi.OutputState }

func (KubernetesNodeGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubernetesNodeGroup)(nil)).Elem()
}

func (o KubernetesNodeGroupMapOutput) ToKubernetesNodeGroupMapOutput() KubernetesNodeGroupMapOutput {
	return o
}

func (o KubernetesNodeGroupMapOutput) ToKubernetesNodeGroupMapOutputWithContext(ctx context.Context) KubernetesNodeGroupMapOutput {
	return o
}

func (o KubernetesNodeGroupMapOutput) MapIndex(k pulumi.StringInput) KubernetesNodeGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KubernetesNodeGroup {
		return vs[0].(map[string]*KubernetesNodeGroup)[vs[1].(string)]
	}).(KubernetesNodeGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesNodeGroupInput)(nil)).Elem(), &KubernetesNodeGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesNodeGroupArrayInput)(nil)).Elem(), KubernetesNodeGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesNodeGroupMapInput)(nil)).Elem(), KubernetesNodeGroupMap{})
	pulumi.RegisterOutputType(KubernetesNodeGroupOutput{})
	pulumi.RegisterOutputType(KubernetesNodeGroupArrayOutput{})
	pulumi.RegisterOutputType(KubernetesNodeGroupMapOutput{})
}
