// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MdbRedisCluster struct {
	pulumi.CustomResourceState

	// Access policy to the Redis cluster.
	Access MdbRedisClusterAccessOutput `pulumi:"access"`
	// Announce fqdn instead of ip address.
	AnnounceHostnames pulumi.BoolPtrOutput `pulumi:"announceHostnames"`
	// Allows to use ACL users to auth in sentinel
	AuthSentinel pulumi.BoolPtrOutput `pulumi:"authSentinel"`
	// Configuration of the Redis cluster.
	Config MdbRedisClusterConfigOutput `pulumi:"config"`
	// The creation timestamp of the resource.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection pulumi.BoolOutput `pulumi:"deletionProtection"`
	// The resource description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Disk size autoscaling settings.
	DiskSizeAutoscaling MdbRedisClusterDiskSizeAutoscalingOutput `pulumi:"diskSizeAutoscaling"`
	// Deployment environment of the Redis cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information
	// see `health` field of JSON representation in [the official
	// documentation](https://yandex.cloud/docs/managed-redis/api-ref/Cluster/).
	Health pulumi.StringOutput `pulumi:"health"`
	// A host of the Redis cluster.
	Hosts MdbRedisClusterHostArrayOutput `pulumi:"hosts"`
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Maintenance window settings.
	MaintenanceWindow MdbRedisClusterMaintenanceWindowOutput `pulumi:"maintenanceWindow"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Persistence mode. Possible values: `ON`, `OFF`.
	PersistenceMode pulumi.StringOutput `pulumi:"persistenceMode"`
	// Resources allocated to hosts of the Redis cluster.
	Resources MdbRedisClusterResourcesOutput `pulumi:"resources"`
	// The list of security groups applied to resource or their components.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// Redis Cluster mode enabled/disabled. Enables sharding when cluster non-sharded. If cluster is sharded - disabling is not
	// allowed.
	Sharded pulumi.BoolPtrOutput `pulumi:"sharded"`
	// Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or
	// `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official
	// documentation](https://yandex.cloud/docs/managed-redis/api-ref/Cluster/).
	Status pulumi.StringOutput `pulumi:"status"`
	// TLS support mode enabled/disabled.
	TlsEnabled pulumi.BoolOutput `pulumi:"tlsEnabled"`
}

// NewMdbRedisCluster registers a new resource with the given unique name, arguments, and options.
func NewMdbRedisCluster(ctx *pulumi.Context,
	name string, args *MdbRedisClusterArgs, opts ...pulumi.ResourceOption) (*MdbRedisCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Hosts == nil {
		return nil, errors.New("invalid value for required argument 'Hosts'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Resources == nil {
		return nil, errors.New("invalid value for required argument 'Resources'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MdbRedisCluster
	err := ctx.RegisterResource("yandex:index/mdbRedisCluster:MdbRedisCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMdbRedisCluster gets an existing MdbRedisCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMdbRedisCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MdbRedisClusterState, opts ...pulumi.ResourceOption) (*MdbRedisCluster, error) {
	var resource MdbRedisCluster
	err := ctx.ReadResource("yandex:index/mdbRedisCluster:MdbRedisCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MdbRedisCluster resources.
type mdbRedisClusterState struct {
	// Access policy to the Redis cluster.
	Access *MdbRedisClusterAccess `pulumi:"access"`
	// Announce fqdn instead of ip address.
	AnnounceHostnames *bool `pulumi:"announceHostnames"`
	// Allows to use ACL users to auth in sentinel
	AuthSentinel *bool `pulumi:"authSentinel"`
	// Configuration of the Redis cluster.
	Config *MdbRedisClusterConfig `pulumi:"config"`
	// The creation timestamp of the resource.
	CreatedAt *string `pulumi:"createdAt"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// The resource description.
	Description *string `pulumi:"description"`
	// Disk size autoscaling settings.
	DiskSizeAutoscaling *MdbRedisClusterDiskSizeAutoscaling `pulumi:"diskSizeAutoscaling"`
	// Deployment environment of the Redis cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment *string `pulumi:"environment"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information
	// see `health` field of JSON representation in [the official
	// documentation](https://yandex.cloud/docs/managed-redis/api-ref/Cluster/).
	Health *string `pulumi:"health"`
	// A host of the Redis cluster.
	Hosts []MdbRedisClusterHost `pulumi:"hosts"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// Maintenance window settings.
	MaintenanceWindow *MdbRedisClusterMaintenanceWindow `pulumi:"maintenanceWindow"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId *string `pulumi:"networkId"`
	// Persistence mode. Possible values: `ON`, `OFF`.
	PersistenceMode *string `pulumi:"persistenceMode"`
	// Resources allocated to hosts of the Redis cluster.
	Resources *MdbRedisClusterResources `pulumi:"resources"`
	// The list of security groups applied to resource or their components.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Redis Cluster mode enabled/disabled. Enables sharding when cluster non-sharded. If cluster is sharded - disabling is not
	// allowed.
	Sharded *bool `pulumi:"sharded"`
	// Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or
	// `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official
	// documentation](https://yandex.cloud/docs/managed-redis/api-ref/Cluster/).
	Status *string `pulumi:"status"`
	// TLS support mode enabled/disabled.
	TlsEnabled *bool `pulumi:"tlsEnabled"`
}

type MdbRedisClusterState struct {
	// Access policy to the Redis cluster.
	Access MdbRedisClusterAccessPtrInput
	// Announce fqdn instead of ip address.
	AnnounceHostnames pulumi.BoolPtrInput
	// Allows to use ACL users to auth in sentinel
	AuthSentinel pulumi.BoolPtrInput
	// Configuration of the Redis cluster.
	Config MdbRedisClusterConfigPtrInput
	// The creation timestamp of the resource.
	CreatedAt pulumi.StringPtrInput
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection pulumi.BoolPtrInput
	// The resource description.
	Description pulumi.StringPtrInput
	// Disk size autoscaling settings.
	DiskSizeAutoscaling MdbRedisClusterDiskSizeAutoscalingPtrInput
	// Deployment environment of the Redis cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment pulumi.StringPtrInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information
	// see `health` field of JSON representation in [the official
	// documentation](https://yandex.cloud/docs/managed-redis/api-ref/Cluster/).
	Health pulumi.StringPtrInput
	// A host of the Redis cluster.
	Hosts MdbRedisClusterHostArrayInput
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput
	// Maintenance window settings.
	MaintenanceWindow MdbRedisClusterMaintenanceWindowPtrInput
	// The resource name.
	Name pulumi.StringPtrInput
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId pulumi.StringPtrInput
	// Persistence mode. Possible values: `ON`, `OFF`.
	PersistenceMode pulumi.StringPtrInput
	// Resources allocated to hosts of the Redis cluster.
	Resources MdbRedisClusterResourcesPtrInput
	// The list of security groups applied to resource or their components.
	SecurityGroupIds pulumi.StringArrayInput
	// Redis Cluster mode enabled/disabled. Enables sharding when cluster non-sharded. If cluster is sharded - disabling is not
	// allowed.
	Sharded pulumi.BoolPtrInput
	// Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or
	// `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official
	// documentation](https://yandex.cloud/docs/managed-redis/api-ref/Cluster/).
	Status pulumi.StringPtrInput
	// TLS support mode enabled/disabled.
	TlsEnabled pulumi.BoolPtrInput
}

func (MdbRedisClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbRedisClusterState)(nil)).Elem()
}

type mdbRedisClusterArgs struct {
	// Access policy to the Redis cluster.
	Access *MdbRedisClusterAccess `pulumi:"access"`
	// Announce fqdn instead of ip address.
	AnnounceHostnames *bool `pulumi:"announceHostnames"`
	// Allows to use ACL users to auth in sentinel
	AuthSentinel *bool `pulumi:"authSentinel"`
	// Configuration of the Redis cluster.
	Config MdbRedisClusterConfig `pulumi:"config"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// The resource description.
	Description *string `pulumi:"description"`
	// Disk size autoscaling settings.
	DiskSizeAutoscaling *MdbRedisClusterDiskSizeAutoscaling `pulumi:"diskSizeAutoscaling"`
	// Deployment environment of the Redis cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment string `pulumi:"environment"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// A host of the Redis cluster.
	Hosts []MdbRedisClusterHost `pulumi:"hosts"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// Maintenance window settings.
	MaintenanceWindow *MdbRedisClusterMaintenanceWindow `pulumi:"maintenanceWindow"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId string `pulumi:"networkId"`
	// Persistence mode. Possible values: `ON`, `OFF`.
	PersistenceMode *string `pulumi:"persistenceMode"`
	// Resources allocated to hosts of the Redis cluster.
	Resources MdbRedisClusterResources `pulumi:"resources"`
	// The list of security groups applied to resource or their components.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Redis Cluster mode enabled/disabled. Enables sharding when cluster non-sharded. If cluster is sharded - disabling is not
	// allowed.
	Sharded *bool `pulumi:"sharded"`
	// TLS support mode enabled/disabled.
	TlsEnabled *bool `pulumi:"tlsEnabled"`
}

// The set of arguments for constructing a MdbRedisCluster resource.
type MdbRedisClusterArgs struct {
	// Access policy to the Redis cluster.
	Access MdbRedisClusterAccessPtrInput
	// Announce fqdn instead of ip address.
	AnnounceHostnames pulumi.BoolPtrInput
	// Allows to use ACL users to auth in sentinel
	AuthSentinel pulumi.BoolPtrInput
	// Configuration of the Redis cluster.
	Config MdbRedisClusterConfigInput
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection pulumi.BoolPtrInput
	// The resource description.
	Description pulumi.StringPtrInput
	// Disk size autoscaling settings.
	DiskSizeAutoscaling MdbRedisClusterDiskSizeAutoscalingPtrInput
	// Deployment environment of the Redis cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment pulumi.StringInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// A host of the Redis cluster.
	Hosts MdbRedisClusterHostArrayInput
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput
	// Maintenance window settings.
	MaintenanceWindow MdbRedisClusterMaintenanceWindowPtrInput
	// The resource name.
	Name pulumi.StringPtrInput
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId pulumi.StringInput
	// Persistence mode. Possible values: `ON`, `OFF`.
	PersistenceMode pulumi.StringPtrInput
	// Resources allocated to hosts of the Redis cluster.
	Resources MdbRedisClusterResourcesInput
	// The list of security groups applied to resource or their components.
	SecurityGroupIds pulumi.StringArrayInput
	// Redis Cluster mode enabled/disabled. Enables sharding when cluster non-sharded. If cluster is sharded - disabling is not
	// allowed.
	Sharded pulumi.BoolPtrInput
	// TLS support mode enabled/disabled.
	TlsEnabled pulumi.BoolPtrInput
}

func (MdbRedisClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbRedisClusterArgs)(nil)).Elem()
}

type MdbRedisClusterInput interface {
	pulumi.Input

	ToMdbRedisClusterOutput() MdbRedisClusterOutput
	ToMdbRedisClusterOutputWithContext(ctx context.Context) MdbRedisClusterOutput
}

func (*MdbRedisCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbRedisCluster)(nil)).Elem()
}

func (i *MdbRedisCluster) ToMdbRedisClusterOutput() MdbRedisClusterOutput {
	return i.ToMdbRedisClusterOutputWithContext(context.Background())
}

func (i *MdbRedisCluster) ToMdbRedisClusterOutputWithContext(ctx context.Context) MdbRedisClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbRedisClusterOutput)
}

// MdbRedisClusterArrayInput is an input type that accepts MdbRedisClusterArray and MdbRedisClusterArrayOutput values.
// You can construct a concrete instance of `MdbRedisClusterArrayInput` via:
//
//	MdbRedisClusterArray{ MdbRedisClusterArgs{...} }
type MdbRedisClusterArrayInput interface {
	pulumi.Input

	ToMdbRedisClusterArrayOutput() MdbRedisClusterArrayOutput
	ToMdbRedisClusterArrayOutputWithContext(context.Context) MdbRedisClusterArrayOutput
}

type MdbRedisClusterArray []MdbRedisClusterInput

func (MdbRedisClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MdbRedisCluster)(nil)).Elem()
}

func (i MdbRedisClusterArray) ToMdbRedisClusterArrayOutput() MdbRedisClusterArrayOutput {
	return i.ToMdbRedisClusterArrayOutputWithContext(context.Background())
}

func (i MdbRedisClusterArray) ToMdbRedisClusterArrayOutputWithContext(ctx context.Context) MdbRedisClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbRedisClusterArrayOutput)
}

// MdbRedisClusterMapInput is an input type that accepts MdbRedisClusterMap and MdbRedisClusterMapOutput values.
// You can construct a concrete instance of `MdbRedisClusterMapInput` via:
//
//	MdbRedisClusterMap{ "key": MdbRedisClusterArgs{...} }
type MdbRedisClusterMapInput interface {
	pulumi.Input

	ToMdbRedisClusterMapOutput() MdbRedisClusterMapOutput
	ToMdbRedisClusterMapOutputWithContext(context.Context) MdbRedisClusterMapOutput
}

type MdbRedisClusterMap map[string]MdbRedisClusterInput

func (MdbRedisClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MdbRedisCluster)(nil)).Elem()
}

func (i MdbRedisClusterMap) ToMdbRedisClusterMapOutput() MdbRedisClusterMapOutput {
	return i.ToMdbRedisClusterMapOutputWithContext(context.Background())
}

func (i MdbRedisClusterMap) ToMdbRedisClusterMapOutputWithContext(ctx context.Context) MdbRedisClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbRedisClusterMapOutput)
}

type MdbRedisClusterOutput struct{ *pulumi.OutputState }

func (MdbRedisClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbRedisCluster)(nil)).Elem()
}

func (o MdbRedisClusterOutput) ToMdbRedisClusterOutput() MdbRedisClusterOutput {
	return o
}

func (o MdbRedisClusterOutput) ToMdbRedisClusterOutputWithContext(ctx context.Context) MdbRedisClusterOutput {
	return o
}

// Access policy to the Redis cluster.
func (o MdbRedisClusterOutput) Access() MdbRedisClusterAccessOutput {
	return o.ApplyT(func(v *MdbRedisCluster) MdbRedisClusterAccessOutput { return v.Access }).(MdbRedisClusterAccessOutput)
}

// Announce fqdn instead of ip address.
func (o MdbRedisClusterOutput) AnnounceHostnames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.BoolPtrOutput { return v.AnnounceHostnames }).(pulumi.BoolPtrOutput)
}

// Allows to use ACL users to auth in sentinel
func (o MdbRedisClusterOutput) AuthSentinel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.BoolPtrOutput { return v.AuthSentinel }).(pulumi.BoolPtrOutput)
}

// Configuration of the Redis cluster.
func (o MdbRedisClusterOutput) Config() MdbRedisClusterConfigOutput {
	return o.ApplyT(func(v *MdbRedisCluster) MdbRedisClusterConfigOutput { return v.Config }).(MdbRedisClusterConfigOutput)
}

// The creation timestamp of the resource.
func (o MdbRedisClusterOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The `true` value means that resource is protected from accidental deletion.
func (o MdbRedisClusterOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.BoolOutput { return v.DeletionProtection }).(pulumi.BoolOutput)
}

// The resource description.
func (o MdbRedisClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Disk size autoscaling settings.
func (o MdbRedisClusterOutput) DiskSizeAutoscaling() MdbRedisClusterDiskSizeAutoscalingOutput {
	return o.ApplyT(func(v *MdbRedisCluster) MdbRedisClusterDiskSizeAutoscalingOutput { return v.DiskSizeAutoscaling }).(MdbRedisClusterDiskSizeAutoscalingOutput)
}

// Deployment environment of the Redis cluster. Can be either `PRESTABLE` or `PRODUCTION`.
func (o MdbRedisClusterOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o MdbRedisClusterOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

// Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information
// see `health` field of JSON representation in [the official
// documentation](https://yandex.cloud/docs/managed-redis/api-ref/Cluster/).
func (o MdbRedisClusterOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.StringOutput { return v.Health }).(pulumi.StringOutput)
}

// A host of the Redis cluster.
func (o MdbRedisClusterOutput) Hosts() MdbRedisClusterHostArrayOutput {
	return o.ApplyT(func(v *MdbRedisCluster) MdbRedisClusterHostArrayOutput { return v.Hosts }).(MdbRedisClusterHostArrayOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o MdbRedisClusterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Maintenance window settings.
func (o MdbRedisClusterOutput) MaintenanceWindow() MdbRedisClusterMaintenanceWindowOutput {
	return o.ApplyT(func(v *MdbRedisCluster) MdbRedisClusterMaintenanceWindowOutput { return v.MaintenanceWindow }).(MdbRedisClusterMaintenanceWindowOutput)
}

// The resource name.
func (o MdbRedisClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The `VPC Network ID` of subnets which resource attached to.
func (o MdbRedisClusterOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Persistence mode. Possible values: `ON`, `OFF`.
func (o MdbRedisClusterOutput) PersistenceMode() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.StringOutput { return v.PersistenceMode }).(pulumi.StringOutput)
}

// Resources allocated to hosts of the Redis cluster.
func (o MdbRedisClusterOutput) Resources() MdbRedisClusterResourcesOutput {
	return o.ApplyT(func(v *MdbRedisCluster) MdbRedisClusterResourcesOutput { return v.Resources }).(MdbRedisClusterResourcesOutput)
}

// The list of security groups applied to resource or their components.
func (o MdbRedisClusterOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// Redis Cluster mode enabled/disabled. Enables sharding when cluster non-sharded. If cluster is sharded - disabling is not
// allowed.
func (o MdbRedisClusterOutput) Sharded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.BoolPtrOutput { return v.Sharded }).(pulumi.BoolPtrOutput)
}

// Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or
// `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official
// documentation](https://yandex.cloud/docs/managed-redis/api-ref/Cluster/).
func (o MdbRedisClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// TLS support mode enabled/disabled.
func (o MdbRedisClusterOutput) TlsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.BoolOutput { return v.TlsEnabled }).(pulumi.BoolOutput)
}

type MdbRedisClusterArrayOutput struct{ *pulumi.OutputState }

func (MdbRedisClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MdbRedisCluster)(nil)).Elem()
}

func (o MdbRedisClusterArrayOutput) ToMdbRedisClusterArrayOutput() MdbRedisClusterArrayOutput {
	return o
}

func (o MdbRedisClusterArrayOutput) ToMdbRedisClusterArrayOutputWithContext(ctx context.Context) MdbRedisClusterArrayOutput {
	return o
}

func (o MdbRedisClusterArrayOutput) Index(i pulumi.IntInput) MdbRedisClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MdbRedisCluster {
		return vs[0].([]*MdbRedisCluster)[vs[1].(int)]
	}).(MdbRedisClusterOutput)
}

type MdbRedisClusterMapOutput struct{ *pulumi.OutputState }

func (MdbRedisClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MdbRedisCluster)(nil)).Elem()
}

func (o MdbRedisClusterMapOutput) ToMdbRedisClusterMapOutput() MdbRedisClusterMapOutput {
	return o
}

func (o MdbRedisClusterMapOutput) ToMdbRedisClusterMapOutputWithContext(ctx context.Context) MdbRedisClusterMapOutput {
	return o
}

func (o MdbRedisClusterMapOutput) MapIndex(k pulumi.StringInput) MdbRedisClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MdbRedisCluster {
		return vs[0].(map[string]*MdbRedisCluster)[vs[1].(string)]
	}).(MdbRedisClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MdbRedisClusterInput)(nil)).Elem(), &MdbRedisCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdbRedisClusterArrayInput)(nil)).Elem(), MdbRedisClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdbRedisClusterMapInput)(nil)).Elem(), MdbRedisClusterMap{})
	pulumi.RegisterOutputType(MdbRedisClusterOutput{})
	pulumi.RegisterOutputType(MdbRedisClusterArrayOutput{})
	pulumi.RegisterOutputType(MdbRedisClusterMapOutput{})
}
