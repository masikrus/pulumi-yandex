// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CmCertificateIamMember struct {
	pulumi.CustomResourceState

	// The [Certificate](https://yandex.cloud/docs/certificate-manager/) ID to apply a binding to.
	CertificateId pulumi.StringOutput `pulumi:"certificateId"`
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member pulumi.StringOutput `pulumi:"member"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       pulumi.StringOutput `pulumi:"role"`
	SleepAfter pulumi.IntPtrOutput `pulumi:"sleepAfter"`
}

// NewCmCertificateIamMember registers a new resource with the given unique name, arguments, and options.
func NewCmCertificateIamMember(ctx *pulumi.Context,
	name string, args *CmCertificateIamMemberArgs, opts ...pulumi.ResourceOption) (*CmCertificateIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateId == nil {
		return nil, errors.New("invalid value for required argument 'CertificateId'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CmCertificateIamMember
	err := ctx.RegisterResource("yandex:index/cmCertificateIamMember:CmCertificateIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCmCertificateIamMember gets an existing CmCertificateIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCmCertificateIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CmCertificateIamMemberState, opts ...pulumi.ResourceOption) (*CmCertificateIamMember, error) {
	var resource CmCertificateIamMember
	err := ctx.ReadResource("yandex:index/cmCertificateIamMember:CmCertificateIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CmCertificateIamMember resources.
type cmCertificateIamMemberState struct {
	// The [Certificate](https://yandex.cloud/docs/certificate-manager/) ID to apply a binding to.
	CertificateId *string `pulumi:"certificateId"`
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member *string `pulumi:"member"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       *string `pulumi:"role"`
	SleepAfter *int    `pulumi:"sleepAfter"`
}

type CmCertificateIamMemberState struct {
	// The [Certificate](https://yandex.cloud/docs/certificate-manager/) ID to apply a binding to.
	CertificateId pulumi.StringPtrInput
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member pulumi.StringPtrInput
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       pulumi.StringPtrInput
	SleepAfter pulumi.IntPtrInput
}

func (CmCertificateIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*cmCertificateIamMemberState)(nil)).Elem()
}

type cmCertificateIamMemberArgs struct {
	// The [Certificate](https://yandex.cloud/docs/certificate-manager/) ID to apply a binding to.
	CertificateId string `pulumi:"certificateId"`
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member string `pulumi:"member"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       string `pulumi:"role"`
	SleepAfter *int   `pulumi:"sleepAfter"`
}

// The set of arguments for constructing a CmCertificateIamMember resource.
type CmCertificateIamMemberArgs struct {
	// The [Certificate](https://yandex.cloud/docs/certificate-manager/) ID to apply a binding to.
	CertificateId pulumi.StringInput
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member pulumi.StringInput
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       pulumi.StringInput
	SleepAfter pulumi.IntPtrInput
}

func (CmCertificateIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cmCertificateIamMemberArgs)(nil)).Elem()
}

type CmCertificateIamMemberInput interface {
	pulumi.Input

	ToCmCertificateIamMemberOutput() CmCertificateIamMemberOutput
	ToCmCertificateIamMemberOutputWithContext(ctx context.Context) CmCertificateIamMemberOutput
}

func (*CmCertificateIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**CmCertificateIamMember)(nil)).Elem()
}

func (i *CmCertificateIamMember) ToCmCertificateIamMemberOutput() CmCertificateIamMemberOutput {
	return i.ToCmCertificateIamMemberOutputWithContext(context.Background())
}

func (i *CmCertificateIamMember) ToCmCertificateIamMemberOutputWithContext(ctx context.Context) CmCertificateIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmCertificateIamMemberOutput)
}

// CmCertificateIamMemberArrayInput is an input type that accepts CmCertificateIamMemberArray and CmCertificateIamMemberArrayOutput values.
// You can construct a concrete instance of `CmCertificateIamMemberArrayInput` via:
//
//	CmCertificateIamMemberArray{ CmCertificateIamMemberArgs{...} }
type CmCertificateIamMemberArrayInput interface {
	pulumi.Input

	ToCmCertificateIamMemberArrayOutput() CmCertificateIamMemberArrayOutput
	ToCmCertificateIamMemberArrayOutputWithContext(context.Context) CmCertificateIamMemberArrayOutput
}

type CmCertificateIamMemberArray []CmCertificateIamMemberInput

func (CmCertificateIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CmCertificateIamMember)(nil)).Elem()
}

func (i CmCertificateIamMemberArray) ToCmCertificateIamMemberArrayOutput() CmCertificateIamMemberArrayOutput {
	return i.ToCmCertificateIamMemberArrayOutputWithContext(context.Background())
}

func (i CmCertificateIamMemberArray) ToCmCertificateIamMemberArrayOutputWithContext(ctx context.Context) CmCertificateIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmCertificateIamMemberArrayOutput)
}

// CmCertificateIamMemberMapInput is an input type that accepts CmCertificateIamMemberMap and CmCertificateIamMemberMapOutput values.
// You can construct a concrete instance of `CmCertificateIamMemberMapInput` via:
//
//	CmCertificateIamMemberMap{ "key": CmCertificateIamMemberArgs{...} }
type CmCertificateIamMemberMapInput interface {
	pulumi.Input

	ToCmCertificateIamMemberMapOutput() CmCertificateIamMemberMapOutput
	ToCmCertificateIamMemberMapOutputWithContext(context.Context) CmCertificateIamMemberMapOutput
}

type CmCertificateIamMemberMap map[string]CmCertificateIamMemberInput

func (CmCertificateIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CmCertificateIamMember)(nil)).Elem()
}

func (i CmCertificateIamMemberMap) ToCmCertificateIamMemberMapOutput() CmCertificateIamMemberMapOutput {
	return i.ToCmCertificateIamMemberMapOutputWithContext(context.Background())
}

func (i CmCertificateIamMemberMap) ToCmCertificateIamMemberMapOutputWithContext(ctx context.Context) CmCertificateIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmCertificateIamMemberMapOutput)
}

type CmCertificateIamMemberOutput struct{ *pulumi.OutputState }

func (CmCertificateIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CmCertificateIamMember)(nil)).Elem()
}

func (o CmCertificateIamMemberOutput) ToCmCertificateIamMemberOutput() CmCertificateIamMemberOutput {
	return o
}

func (o CmCertificateIamMemberOutput) ToCmCertificateIamMemberOutputWithContext(ctx context.Context) CmCertificateIamMemberOutput {
	return o
}

// The [Certificate](https://yandex.cloud/docs/certificate-manager/) ID to apply a binding to.
func (o CmCertificateIamMemberOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *CmCertificateIamMember) pulumi.StringOutput { return v.CertificateId }).(pulumi.StringOutput)
}

// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
func (o CmCertificateIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *CmCertificateIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
func (o CmCertificateIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *CmCertificateIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o CmCertificateIamMemberOutput) SleepAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CmCertificateIamMember) pulumi.IntPtrOutput { return v.SleepAfter }).(pulumi.IntPtrOutput)
}

type CmCertificateIamMemberArrayOutput struct{ *pulumi.OutputState }

func (CmCertificateIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CmCertificateIamMember)(nil)).Elem()
}

func (o CmCertificateIamMemberArrayOutput) ToCmCertificateIamMemberArrayOutput() CmCertificateIamMemberArrayOutput {
	return o
}

func (o CmCertificateIamMemberArrayOutput) ToCmCertificateIamMemberArrayOutputWithContext(ctx context.Context) CmCertificateIamMemberArrayOutput {
	return o
}

func (o CmCertificateIamMemberArrayOutput) Index(i pulumi.IntInput) CmCertificateIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CmCertificateIamMember {
		return vs[0].([]*CmCertificateIamMember)[vs[1].(int)]
	}).(CmCertificateIamMemberOutput)
}

type CmCertificateIamMemberMapOutput struct{ *pulumi.OutputState }

func (CmCertificateIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CmCertificateIamMember)(nil)).Elem()
}

func (o CmCertificateIamMemberMapOutput) ToCmCertificateIamMemberMapOutput() CmCertificateIamMemberMapOutput {
	return o
}

func (o CmCertificateIamMemberMapOutput) ToCmCertificateIamMemberMapOutputWithContext(ctx context.Context) CmCertificateIamMemberMapOutput {
	return o
}

func (o CmCertificateIamMemberMapOutput) MapIndex(k pulumi.StringInput) CmCertificateIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CmCertificateIamMember {
		return vs[0].(map[string]*CmCertificateIamMember)[vs[1].(string)]
	}).(CmCertificateIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CmCertificateIamMemberInput)(nil)).Elem(), &CmCertificateIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*CmCertificateIamMemberArrayInput)(nil)).Elem(), CmCertificateIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CmCertificateIamMemberMapInput)(nil)).Elem(), CmCertificateIamMemberMap{})
	pulumi.RegisterOutputType(CmCertificateIamMemberOutput{})
	pulumi.RegisterOutputType(CmCertificateIamMemberArrayOutput{})
	pulumi.RegisterOutputType(CmCertificateIamMemberMapOutput{})
}
