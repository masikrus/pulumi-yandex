// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LockboxSecretIamMember struct {
	pulumi.CustomResourceState

	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member pulumi.StringOutput `pulumi:"member"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role pulumi.StringOutput `pulumi:"role"`
	// The [Yandex Lockbox Secret](https://yandex.cloud/docs/lockbox/) Secret ID to apply a binding to.
	SecretId   pulumi.StringOutput `pulumi:"secretId"`
	SleepAfter pulumi.IntPtrOutput `pulumi:"sleepAfter"`
}

// NewLockboxSecretIamMember registers a new resource with the given unique name, arguments, and options.
func NewLockboxSecretIamMember(ctx *pulumi.Context,
	name string, args *LockboxSecretIamMemberArgs, opts ...pulumi.ResourceOption) (*LockboxSecretIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.SecretId == nil {
		return nil, errors.New("invalid value for required argument 'SecretId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LockboxSecretIamMember
	err := ctx.RegisterResource("yandex:index/lockboxSecretIamMember:LockboxSecretIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLockboxSecretIamMember gets an existing LockboxSecretIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLockboxSecretIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LockboxSecretIamMemberState, opts ...pulumi.ResourceOption) (*LockboxSecretIamMember, error) {
	var resource LockboxSecretIamMember
	err := ctx.ReadResource("yandex:index/lockboxSecretIamMember:LockboxSecretIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LockboxSecretIamMember resources.
type lockboxSecretIamMemberState struct {
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member *string `pulumi:"member"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role *string `pulumi:"role"`
	// The [Yandex Lockbox Secret](https://yandex.cloud/docs/lockbox/) Secret ID to apply a binding to.
	SecretId   *string `pulumi:"secretId"`
	SleepAfter *int    `pulumi:"sleepAfter"`
}

type LockboxSecretIamMemberState struct {
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member pulumi.StringPtrInput
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role pulumi.StringPtrInput
	// The [Yandex Lockbox Secret](https://yandex.cloud/docs/lockbox/) Secret ID to apply a binding to.
	SecretId   pulumi.StringPtrInput
	SleepAfter pulumi.IntPtrInput
}

func (LockboxSecretIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*lockboxSecretIamMemberState)(nil)).Elem()
}

type lockboxSecretIamMemberArgs struct {
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member string `pulumi:"member"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role string `pulumi:"role"`
	// The [Yandex Lockbox Secret](https://yandex.cloud/docs/lockbox/) Secret ID to apply a binding to.
	SecretId   string `pulumi:"secretId"`
	SleepAfter *int   `pulumi:"sleepAfter"`
}

// The set of arguments for constructing a LockboxSecretIamMember resource.
type LockboxSecretIamMemberArgs struct {
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member pulumi.StringInput
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role pulumi.StringInput
	// The [Yandex Lockbox Secret](https://yandex.cloud/docs/lockbox/) Secret ID to apply a binding to.
	SecretId   pulumi.StringInput
	SleepAfter pulumi.IntPtrInput
}

func (LockboxSecretIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lockboxSecretIamMemberArgs)(nil)).Elem()
}

type LockboxSecretIamMemberInput interface {
	pulumi.Input

	ToLockboxSecretIamMemberOutput() LockboxSecretIamMemberOutput
	ToLockboxSecretIamMemberOutputWithContext(ctx context.Context) LockboxSecretIamMemberOutput
}

func (*LockboxSecretIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**LockboxSecretIamMember)(nil)).Elem()
}

func (i *LockboxSecretIamMember) ToLockboxSecretIamMemberOutput() LockboxSecretIamMemberOutput {
	return i.ToLockboxSecretIamMemberOutputWithContext(context.Background())
}

func (i *LockboxSecretIamMember) ToLockboxSecretIamMemberOutputWithContext(ctx context.Context) LockboxSecretIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LockboxSecretIamMemberOutput)
}

// LockboxSecretIamMemberArrayInput is an input type that accepts LockboxSecretIamMemberArray and LockboxSecretIamMemberArrayOutput values.
// You can construct a concrete instance of `LockboxSecretIamMemberArrayInput` via:
//
//	LockboxSecretIamMemberArray{ LockboxSecretIamMemberArgs{...} }
type LockboxSecretIamMemberArrayInput interface {
	pulumi.Input

	ToLockboxSecretIamMemberArrayOutput() LockboxSecretIamMemberArrayOutput
	ToLockboxSecretIamMemberArrayOutputWithContext(context.Context) LockboxSecretIamMemberArrayOutput
}

type LockboxSecretIamMemberArray []LockboxSecretIamMemberInput

func (LockboxSecretIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LockboxSecretIamMember)(nil)).Elem()
}

func (i LockboxSecretIamMemberArray) ToLockboxSecretIamMemberArrayOutput() LockboxSecretIamMemberArrayOutput {
	return i.ToLockboxSecretIamMemberArrayOutputWithContext(context.Background())
}

func (i LockboxSecretIamMemberArray) ToLockboxSecretIamMemberArrayOutputWithContext(ctx context.Context) LockboxSecretIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LockboxSecretIamMemberArrayOutput)
}

// LockboxSecretIamMemberMapInput is an input type that accepts LockboxSecretIamMemberMap and LockboxSecretIamMemberMapOutput values.
// You can construct a concrete instance of `LockboxSecretIamMemberMapInput` via:
//
//	LockboxSecretIamMemberMap{ "key": LockboxSecretIamMemberArgs{...} }
type LockboxSecretIamMemberMapInput interface {
	pulumi.Input

	ToLockboxSecretIamMemberMapOutput() LockboxSecretIamMemberMapOutput
	ToLockboxSecretIamMemberMapOutputWithContext(context.Context) LockboxSecretIamMemberMapOutput
}

type LockboxSecretIamMemberMap map[string]LockboxSecretIamMemberInput

func (LockboxSecretIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LockboxSecretIamMember)(nil)).Elem()
}

func (i LockboxSecretIamMemberMap) ToLockboxSecretIamMemberMapOutput() LockboxSecretIamMemberMapOutput {
	return i.ToLockboxSecretIamMemberMapOutputWithContext(context.Background())
}

func (i LockboxSecretIamMemberMap) ToLockboxSecretIamMemberMapOutputWithContext(ctx context.Context) LockboxSecretIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LockboxSecretIamMemberMapOutput)
}

type LockboxSecretIamMemberOutput struct{ *pulumi.OutputState }

func (LockboxSecretIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LockboxSecretIamMember)(nil)).Elem()
}

func (o LockboxSecretIamMemberOutput) ToLockboxSecretIamMemberOutput() LockboxSecretIamMemberOutput {
	return o
}

func (o LockboxSecretIamMemberOutput) ToLockboxSecretIamMemberOutputWithContext(ctx context.Context) LockboxSecretIamMemberOutput {
	return o
}

// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
func (o LockboxSecretIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *LockboxSecretIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
func (o LockboxSecretIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *LockboxSecretIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// The [Yandex Lockbox Secret](https://yandex.cloud/docs/lockbox/) Secret ID to apply a binding to.
func (o LockboxSecretIamMemberOutput) SecretId() pulumi.StringOutput {
	return o.ApplyT(func(v *LockboxSecretIamMember) pulumi.StringOutput { return v.SecretId }).(pulumi.StringOutput)
}

func (o LockboxSecretIamMemberOutput) SleepAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LockboxSecretIamMember) pulumi.IntPtrOutput { return v.SleepAfter }).(pulumi.IntPtrOutput)
}

type LockboxSecretIamMemberArrayOutput struct{ *pulumi.OutputState }

func (LockboxSecretIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LockboxSecretIamMember)(nil)).Elem()
}

func (o LockboxSecretIamMemberArrayOutput) ToLockboxSecretIamMemberArrayOutput() LockboxSecretIamMemberArrayOutput {
	return o
}

func (o LockboxSecretIamMemberArrayOutput) ToLockboxSecretIamMemberArrayOutputWithContext(ctx context.Context) LockboxSecretIamMemberArrayOutput {
	return o
}

func (o LockboxSecretIamMemberArrayOutput) Index(i pulumi.IntInput) LockboxSecretIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LockboxSecretIamMember {
		return vs[0].([]*LockboxSecretIamMember)[vs[1].(int)]
	}).(LockboxSecretIamMemberOutput)
}

type LockboxSecretIamMemberMapOutput struct{ *pulumi.OutputState }

func (LockboxSecretIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LockboxSecretIamMember)(nil)).Elem()
}

func (o LockboxSecretIamMemberMapOutput) ToLockboxSecretIamMemberMapOutput() LockboxSecretIamMemberMapOutput {
	return o
}

func (o LockboxSecretIamMemberMapOutput) ToLockboxSecretIamMemberMapOutputWithContext(ctx context.Context) LockboxSecretIamMemberMapOutput {
	return o
}

func (o LockboxSecretIamMemberMapOutput) MapIndex(k pulumi.StringInput) LockboxSecretIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LockboxSecretIamMember {
		return vs[0].(map[string]*LockboxSecretIamMember)[vs[1].(string)]
	}).(LockboxSecretIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LockboxSecretIamMemberInput)(nil)).Elem(), &LockboxSecretIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*LockboxSecretIamMemberArrayInput)(nil)).Elem(), LockboxSecretIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LockboxSecretIamMemberMapInput)(nil)).Elem(), LockboxSecretIamMemberMap{})
	pulumi.RegisterOutputType(LockboxSecretIamMemberOutput{})
	pulumi.RegisterOutputType(LockboxSecretIamMemberArrayOutput{})
	pulumi.RegisterOutputType(LockboxSecretIamMemberMapOutput{})
}
