// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeSnapshot struct {
	pulumi.CustomResourceState

	// The creation timestamp of the resource.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The resource description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Size of the disk when the snapshot was created, specified in GB.
	DiskSize pulumi.IntOutput `pulumi:"diskSize"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// Hardware generation and its features, which will be applied to the instance when this snapshot is used as a boot disk
	// source. Provide this property if you wish to override this value, which otherwise is inherited from the source.
	HardwareGeneration ComputeSnapshotHardwareGenerationOutput `pulumi:"hardwareGeneration"`
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the disk to create a snapshot from.
	SourceDiskId pulumi.StringOutput `pulumi:"sourceDiskId"`
	// Size of the snapshot, specified in GB.
	StorageSize pulumi.IntOutput `pulumi:"storageSize"`
}

// NewComputeSnapshot registers a new resource with the given unique name, arguments, and options.
func NewComputeSnapshot(ctx *pulumi.Context,
	name string, args *ComputeSnapshotArgs, opts ...pulumi.ResourceOption) (*ComputeSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SourceDiskId == nil {
		return nil, errors.New("invalid value for required argument 'SourceDiskId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ComputeSnapshot
	err := ctx.RegisterResource("yandex:index/computeSnapshot:ComputeSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeSnapshot gets an existing ComputeSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeSnapshotState, opts ...pulumi.ResourceOption) (*ComputeSnapshot, error) {
	var resource ComputeSnapshot
	err := ctx.ReadResource("yandex:index/computeSnapshot:ComputeSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeSnapshot resources.
type computeSnapshotState struct {
	// The creation timestamp of the resource.
	CreatedAt *string `pulumi:"createdAt"`
	// The resource description.
	Description *string `pulumi:"description"`
	// Size of the disk when the snapshot was created, specified in GB.
	DiskSize *int `pulumi:"diskSize"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// Hardware generation and its features, which will be applied to the instance when this snapshot is used as a boot disk
	// source. Provide this property if you wish to override this value, which otherwise is inherited from the source.
	HardwareGeneration *ComputeSnapshotHardwareGeneration `pulumi:"hardwareGeneration"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name.
	Name *string `pulumi:"name"`
	// ID of the disk to create a snapshot from.
	SourceDiskId *string `pulumi:"sourceDiskId"`
	// Size of the snapshot, specified in GB.
	StorageSize *int `pulumi:"storageSize"`
}

type ComputeSnapshotState struct {
	// The creation timestamp of the resource.
	CreatedAt pulumi.StringPtrInput
	// The resource description.
	Description pulumi.StringPtrInput
	// Size of the disk when the snapshot was created, specified in GB.
	DiskSize pulumi.IntPtrInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// Hardware generation and its features, which will be applied to the instance when this snapshot is used as a boot disk
	// source. Provide this property if you wish to override this value, which otherwise is inherited from the source.
	HardwareGeneration ComputeSnapshotHardwareGenerationPtrInput
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput
	// The resource name.
	Name pulumi.StringPtrInput
	// ID of the disk to create a snapshot from.
	SourceDiskId pulumi.StringPtrInput
	// Size of the snapshot, specified in GB.
	StorageSize pulumi.IntPtrInput
}

func (ComputeSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeSnapshotState)(nil)).Elem()
}

type computeSnapshotArgs struct {
	// The resource description.
	Description *string `pulumi:"description"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// Hardware generation and its features, which will be applied to the instance when this snapshot is used as a boot disk
	// source. Provide this property if you wish to override this value, which otherwise is inherited from the source.
	HardwareGeneration *ComputeSnapshotHardwareGeneration `pulumi:"hardwareGeneration"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name.
	Name *string `pulumi:"name"`
	// ID of the disk to create a snapshot from.
	SourceDiskId string `pulumi:"sourceDiskId"`
}

// The set of arguments for constructing a ComputeSnapshot resource.
type ComputeSnapshotArgs struct {
	// The resource description.
	Description pulumi.StringPtrInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// Hardware generation and its features, which will be applied to the instance when this snapshot is used as a boot disk
	// source. Provide this property if you wish to override this value, which otherwise is inherited from the source.
	HardwareGeneration ComputeSnapshotHardwareGenerationPtrInput
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput
	// The resource name.
	Name pulumi.StringPtrInput
	// ID of the disk to create a snapshot from.
	SourceDiskId pulumi.StringInput
}

func (ComputeSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeSnapshotArgs)(nil)).Elem()
}

type ComputeSnapshotInput interface {
	pulumi.Input

	ToComputeSnapshotOutput() ComputeSnapshotOutput
	ToComputeSnapshotOutputWithContext(ctx context.Context) ComputeSnapshotOutput
}

func (*ComputeSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeSnapshot)(nil)).Elem()
}

func (i *ComputeSnapshot) ToComputeSnapshotOutput() ComputeSnapshotOutput {
	return i.ToComputeSnapshotOutputWithContext(context.Background())
}

func (i *ComputeSnapshot) ToComputeSnapshotOutputWithContext(ctx context.Context) ComputeSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeSnapshotOutput)
}

// ComputeSnapshotArrayInput is an input type that accepts ComputeSnapshotArray and ComputeSnapshotArrayOutput values.
// You can construct a concrete instance of `ComputeSnapshotArrayInput` via:
//
//	ComputeSnapshotArray{ ComputeSnapshotArgs{...} }
type ComputeSnapshotArrayInput interface {
	pulumi.Input

	ToComputeSnapshotArrayOutput() ComputeSnapshotArrayOutput
	ToComputeSnapshotArrayOutputWithContext(context.Context) ComputeSnapshotArrayOutput
}

type ComputeSnapshotArray []ComputeSnapshotInput

func (ComputeSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeSnapshot)(nil)).Elem()
}

func (i ComputeSnapshotArray) ToComputeSnapshotArrayOutput() ComputeSnapshotArrayOutput {
	return i.ToComputeSnapshotArrayOutputWithContext(context.Background())
}

func (i ComputeSnapshotArray) ToComputeSnapshotArrayOutputWithContext(ctx context.Context) ComputeSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeSnapshotArrayOutput)
}

// ComputeSnapshotMapInput is an input type that accepts ComputeSnapshotMap and ComputeSnapshotMapOutput values.
// You can construct a concrete instance of `ComputeSnapshotMapInput` via:
//
//	ComputeSnapshotMap{ "key": ComputeSnapshotArgs{...} }
type ComputeSnapshotMapInput interface {
	pulumi.Input

	ToComputeSnapshotMapOutput() ComputeSnapshotMapOutput
	ToComputeSnapshotMapOutputWithContext(context.Context) ComputeSnapshotMapOutput
}

type ComputeSnapshotMap map[string]ComputeSnapshotInput

func (ComputeSnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeSnapshot)(nil)).Elem()
}

func (i ComputeSnapshotMap) ToComputeSnapshotMapOutput() ComputeSnapshotMapOutput {
	return i.ToComputeSnapshotMapOutputWithContext(context.Background())
}

func (i ComputeSnapshotMap) ToComputeSnapshotMapOutputWithContext(ctx context.Context) ComputeSnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeSnapshotMapOutput)
}

type ComputeSnapshotOutput struct{ *pulumi.OutputState }

func (ComputeSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeSnapshot)(nil)).Elem()
}

func (o ComputeSnapshotOutput) ToComputeSnapshotOutput() ComputeSnapshotOutput {
	return o
}

func (o ComputeSnapshotOutput) ToComputeSnapshotOutputWithContext(ctx context.Context) ComputeSnapshotOutput {
	return o
}

// The creation timestamp of the resource.
func (o ComputeSnapshotOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSnapshot) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The resource description.
func (o ComputeSnapshotOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeSnapshot) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Size of the disk when the snapshot was created, specified in GB.
func (o ComputeSnapshotOutput) DiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v *ComputeSnapshot) pulumi.IntOutput { return v.DiskSize }).(pulumi.IntOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o ComputeSnapshotOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSnapshot) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

// Hardware generation and its features, which will be applied to the instance when this snapshot is used as a boot disk
// source. Provide this property if you wish to override this value, which otherwise is inherited from the source.
func (o ComputeSnapshotOutput) HardwareGeneration() ComputeSnapshotHardwareGenerationOutput {
	return o.ApplyT(func(v *ComputeSnapshot) ComputeSnapshotHardwareGenerationOutput { return v.HardwareGeneration }).(ComputeSnapshotHardwareGenerationOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o ComputeSnapshotOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ComputeSnapshot) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name.
func (o ComputeSnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSnapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of the disk to create a snapshot from.
func (o ComputeSnapshotOutput) SourceDiskId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeSnapshot) pulumi.StringOutput { return v.SourceDiskId }).(pulumi.StringOutput)
}

// Size of the snapshot, specified in GB.
func (o ComputeSnapshotOutput) StorageSize() pulumi.IntOutput {
	return o.ApplyT(func(v *ComputeSnapshot) pulumi.IntOutput { return v.StorageSize }).(pulumi.IntOutput)
}

type ComputeSnapshotArrayOutput struct{ *pulumi.OutputState }

func (ComputeSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeSnapshot)(nil)).Elem()
}

func (o ComputeSnapshotArrayOutput) ToComputeSnapshotArrayOutput() ComputeSnapshotArrayOutput {
	return o
}

func (o ComputeSnapshotArrayOutput) ToComputeSnapshotArrayOutputWithContext(ctx context.Context) ComputeSnapshotArrayOutput {
	return o
}

func (o ComputeSnapshotArrayOutput) Index(i pulumi.IntInput) ComputeSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ComputeSnapshot {
		return vs[0].([]*ComputeSnapshot)[vs[1].(int)]
	}).(ComputeSnapshotOutput)
}

type ComputeSnapshotMapOutput struct{ *pulumi.OutputState }

func (ComputeSnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeSnapshot)(nil)).Elem()
}

func (o ComputeSnapshotMapOutput) ToComputeSnapshotMapOutput() ComputeSnapshotMapOutput {
	return o
}

func (o ComputeSnapshotMapOutput) ToComputeSnapshotMapOutputWithContext(ctx context.Context) ComputeSnapshotMapOutput {
	return o
}

func (o ComputeSnapshotMapOutput) MapIndex(k pulumi.StringInput) ComputeSnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ComputeSnapshot {
		return vs[0].(map[string]*ComputeSnapshot)[vs[1].(string)]
	}).(ComputeSnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeSnapshotInput)(nil)).Elem(), &ComputeSnapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeSnapshotArrayInput)(nil)).Elem(), ComputeSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeSnapshotMapInput)(nil)).Elem(), ComputeSnapshotMap{})
	pulumi.RegisterOutputType(ComputeSnapshotOutput{})
	pulumi.RegisterOutputType(ComputeSnapshotArrayOutput{})
	pulumi.RegisterOutputType(ComputeSnapshotMapOutput{})
}
