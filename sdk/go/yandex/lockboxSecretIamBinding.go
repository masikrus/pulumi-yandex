// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LockboxSecretIamBinding struct {
	pulumi.CustomResourceState

	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role pulumi.StringOutput `pulumi:"role"`
	// The [Yandex Lockbox Secret](https://yandex.cloud/docs/lockbox/) Secret ID to apply a binding to.
	SecretId   pulumi.StringOutput `pulumi:"secretId"`
	SleepAfter pulumi.IntPtrOutput `pulumi:"sleepAfter"`
}

// NewLockboxSecretIamBinding registers a new resource with the given unique name, arguments, and options.
func NewLockboxSecretIamBinding(ctx *pulumi.Context,
	name string, args *LockboxSecretIamBindingArgs, opts ...pulumi.ResourceOption) (*LockboxSecretIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.SecretId == nil {
		return nil, errors.New("invalid value for required argument 'SecretId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LockboxSecretIamBinding
	err := ctx.RegisterResource("yandex:index/lockboxSecretIamBinding:LockboxSecretIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLockboxSecretIamBinding gets an existing LockboxSecretIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLockboxSecretIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LockboxSecretIamBindingState, opts ...pulumi.ResourceOption) (*LockboxSecretIamBinding, error) {
	var resource LockboxSecretIamBinding
	err := ctx.ReadResource("yandex:index/lockboxSecretIamBinding:LockboxSecretIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LockboxSecretIamBinding resources.
type lockboxSecretIamBindingState struct {
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Members []string `pulumi:"members"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role *string `pulumi:"role"`
	// The [Yandex Lockbox Secret](https://yandex.cloud/docs/lockbox/) Secret ID to apply a binding to.
	SecretId   *string `pulumi:"secretId"`
	SleepAfter *int    `pulumi:"sleepAfter"`
}

type LockboxSecretIamBindingState struct {
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Members pulumi.StringArrayInput
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role pulumi.StringPtrInput
	// The [Yandex Lockbox Secret](https://yandex.cloud/docs/lockbox/) Secret ID to apply a binding to.
	SecretId   pulumi.StringPtrInput
	SleepAfter pulumi.IntPtrInput
}

func (LockboxSecretIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*lockboxSecretIamBindingState)(nil)).Elem()
}

type lockboxSecretIamBindingArgs struct {
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Members []string `pulumi:"members"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role string `pulumi:"role"`
	// The [Yandex Lockbox Secret](https://yandex.cloud/docs/lockbox/) Secret ID to apply a binding to.
	SecretId   string `pulumi:"secretId"`
	SleepAfter *int   `pulumi:"sleepAfter"`
}

// The set of arguments for constructing a LockboxSecretIamBinding resource.
type LockboxSecretIamBindingArgs struct {
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Members pulumi.StringArrayInput
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role pulumi.StringInput
	// The [Yandex Lockbox Secret](https://yandex.cloud/docs/lockbox/) Secret ID to apply a binding to.
	SecretId   pulumi.StringInput
	SleepAfter pulumi.IntPtrInput
}

func (LockboxSecretIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lockboxSecretIamBindingArgs)(nil)).Elem()
}

type LockboxSecretIamBindingInput interface {
	pulumi.Input

	ToLockboxSecretIamBindingOutput() LockboxSecretIamBindingOutput
	ToLockboxSecretIamBindingOutputWithContext(ctx context.Context) LockboxSecretIamBindingOutput
}

func (*LockboxSecretIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**LockboxSecretIamBinding)(nil)).Elem()
}

func (i *LockboxSecretIamBinding) ToLockboxSecretIamBindingOutput() LockboxSecretIamBindingOutput {
	return i.ToLockboxSecretIamBindingOutputWithContext(context.Background())
}

func (i *LockboxSecretIamBinding) ToLockboxSecretIamBindingOutputWithContext(ctx context.Context) LockboxSecretIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LockboxSecretIamBindingOutput)
}

// LockboxSecretIamBindingArrayInput is an input type that accepts LockboxSecretIamBindingArray and LockboxSecretIamBindingArrayOutput values.
// You can construct a concrete instance of `LockboxSecretIamBindingArrayInput` via:
//
//	LockboxSecretIamBindingArray{ LockboxSecretIamBindingArgs{...} }
type LockboxSecretIamBindingArrayInput interface {
	pulumi.Input

	ToLockboxSecretIamBindingArrayOutput() LockboxSecretIamBindingArrayOutput
	ToLockboxSecretIamBindingArrayOutputWithContext(context.Context) LockboxSecretIamBindingArrayOutput
}

type LockboxSecretIamBindingArray []LockboxSecretIamBindingInput

func (LockboxSecretIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LockboxSecretIamBinding)(nil)).Elem()
}

func (i LockboxSecretIamBindingArray) ToLockboxSecretIamBindingArrayOutput() LockboxSecretIamBindingArrayOutput {
	return i.ToLockboxSecretIamBindingArrayOutputWithContext(context.Background())
}

func (i LockboxSecretIamBindingArray) ToLockboxSecretIamBindingArrayOutputWithContext(ctx context.Context) LockboxSecretIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LockboxSecretIamBindingArrayOutput)
}

// LockboxSecretIamBindingMapInput is an input type that accepts LockboxSecretIamBindingMap and LockboxSecretIamBindingMapOutput values.
// You can construct a concrete instance of `LockboxSecretIamBindingMapInput` via:
//
//	LockboxSecretIamBindingMap{ "key": LockboxSecretIamBindingArgs{...} }
type LockboxSecretIamBindingMapInput interface {
	pulumi.Input

	ToLockboxSecretIamBindingMapOutput() LockboxSecretIamBindingMapOutput
	ToLockboxSecretIamBindingMapOutputWithContext(context.Context) LockboxSecretIamBindingMapOutput
}

type LockboxSecretIamBindingMap map[string]LockboxSecretIamBindingInput

func (LockboxSecretIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LockboxSecretIamBinding)(nil)).Elem()
}

func (i LockboxSecretIamBindingMap) ToLockboxSecretIamBindingMapOutput() LockboxSecretIamBindingMapOutput {
	return i.ToLockboxSecretIamBindingMapOutputWithContext(context.Background())
}

func (i LockboxSecretIamBindingMap) ToLockboxSecretIamBindingMapOutputWithContext(ctx context.Context) LockboxSecretIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LockboxSecretIamBindingMapOutput)
}

type LockboxSecretIamBindingOutput struct{ *pulumi.OutputState }

func (LockboxSecretIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LockboxSecretIamBinding)(nil)).Elem()
}

func (o LockboxSecretIamBindingOutput) ToLockboxSecretIamBindingOutput() LockboxSecretIamBindingOutput {
	return o
}

func (o LockboxSecretIamBindingOutput) ToLockboxSecretIamBindingOutputWithContext(ctx context.Context) LockboxSecretIamBindingOutput {
	return o
}

// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
func (o LockboxSecretIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LockboxSecretIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
func (o LockboxSecretIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *LockboxSecretIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// The [Yandex Lockbox Secret](https://yandex.cloud/docs/lockbox/) Secret ID to apply a binding to.
func (o LockboxSecretIamBindingOutput) SecretId() pulumi.StringOutput {
	return o.ApplyT(func(v *LockboxSecretIamBinding) pulumi.StringOutput { return v.SecretId }).(pulumi.StringOutput)
}

func (o LockboxSecretIamBindingOutput) SleepAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LockboxSecretIamBinding) pulumi.IntPtrOutput { return v.SleepAfter }).(pulumi.IntPtrOutput)
}

type LockboxSecretIamBindingArrayOutput struct{ *pulumi.OutputState }

func (LockboxSecretIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LockboxSecretIamBinding)(nil)).Elem()
}

func (o LockboxSecretIamBindingArrayOutput) ToLockboxSecretIamBindingArrayOutput() LockboxSecretIamBindingArrayOutput {
	return o
}

func (o LockboxSecretIamBindingArrayOutput) ToLockboxSecretIamBindingArrayOutputWithContext(ctx context.Context) LockboxSecretIamBindingArrayOutput {
	return o
}

func (o LockboxSecretIamBindingArrayOutput) Index(i pulumi.IntInput) LockboxSecretIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LockboxSecretIamBinding {
		return vs[0].([]*LockboxSecretIamBinding)[vs[1].(int)]
	}).(LockboxSecretIamBindingOutput)
}

type LockboxSecretIamBindingMapOutput struct{ *pulumi.OutputState }

func (LockboxSecretIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LockboxSecretIamBinding)(nil)).Elem()
}

func (o LockboxSecretIamBindingMapOutput) ToLockboxSecretIamBindingMapOutput() LockboxSecretIamBindingMapOutput {
	return o
}

func (o LockboxSecretIamBindingMapOutput) ToLockboxSecretIamBindingMapOutputWithContext(ctx context.Context) LockboxSecretIamBindingMapOutput {
	return o
}

func (o LockboxSecretIamBindingMapOutput) MapIndex(k pulumi.StringInput) LockboxSecretIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LockboxSecretIamBinding {
		return vs[0].(map[string]*LockboxSecretIamBinding)[vs[1].(string)]
	}).(LockboxSecretIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LockboxSecretIamBindingInput)(nil)).Elem(), &LockboxSecretIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*LockboxSecretIamBindingArrayInput)(nil)).Elem(), LockboxSecretIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LockboxSecretIamBindingMapInput)(nil)).Elem(), LockboxSecretIamBindingMap{})
	pulumi.RegisterOutputType(LockboxSecretIamBindingOutput{})
	pulumi.RegisterOutputType(LockboxSecretIamBindingArrayOutput{})
	pulumi.RegisterOutputType(LockboxSecretIamBindingMapOutput{})
}
