// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/masikrus/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MonitoringDashboard struct {
	pulumi.CustomResourceState

	// Dashboard ID.
	DashboardId pulumi.StringOutput `pulumi:"dashboardId"`
	// The resource description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Dashboard parametrization.
	Parametrizations MonitoringDashboardParametrizationArrayOutput `pulumi:"parametrizations"`
	// Dashboard title.
	Title pulumi.StringPtrOutput `pulumi:"title"`
	// Widgets.
	Widgets MonitoringDashboardWidgetArrayOutput `pulumi:"widgets"`
}

// NewMonitoringDashboard registers a new resource with the given unique name, arguments, and options.
func NewMonitoringDashboard(ctx *pulumi.Context,
	name string, args *MonitoringDashboardArgs, opts ...pulumi.ResourceOption) (*MonitoringDashboard, error) {
	if args == nil {
		args = &MonitoringDashboardArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MonitoringDashboard
	err := ctx.RegisterResource("yandex:index/monitoringDashboard:MonitoringDashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoringDashboard gets an existing MonitoringDashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoringDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoringDashboardState, opts ...pulumi.ResourceOption) (*MonitoringDashboard, error) {
	var resource MonitoringDashboard
	err := ctx.ReadResource("yandex:index/monitoringDashboard:MonitoringDashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoringDashboard resources.
type monitoringDashboardState struct {
	// Dashboard ID.
	DashboardId *string `pulumi:"dashboardId"`
	// The resource description.
	Description *string `pulumi:"description"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name.
	Name *string `pulumi:"name"`
	// Dashboard parametrization.
	Parametrizations []MonitoringDashboardParametrization `pulumi:"parametrizations"`
	// Dashboard title.
	Title *string `pulumi:"title"`
	// Widgets.
	Widgets []MonitoringDashboardWidget `pulumi:"widgets"`
}

type MonitoringDashboardState struct {
	// Dashboard ID.
	DashboardId pulumi.StringPtrInput
	// The resource description.
	Description pulumi.StringPtrInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput
	// The resource name.
	Name pulumi.StringPtrInput
	// Dashboard parametrization.
	Parametrizations MonitoringDashboardParametrizationArrayInput
	// Dashboard title.
	Title pulumi.StringPtrInput
	// Widgets.
	Widgets MonitoringDashboardWidgetArrayInput
}

func (MonitoringDashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringDashboardState)(nil)).Elem()
}

type monitoringDashboardArgs struct {
	// The resource description.
	Description *string `pulumi:"description"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name.
	Name *string `pulumi:"name"`
	// Dashboard parametrization.
	Parametrizations []MonitoringDashboardParametrization `pulumi:"parametrizations"`
	// Dashboard title.
	Title *string `pulumi:"title"`
	// Widgets.
	Widgets []MonitoringDashboardWidget `pulumi:"widgets"`
}

// The set of arguments for constructing a MonitoringDashboard resource.
type MonitoringDashboardArgs struct {
	// The resource description.
	Description pulumi.StringPtrInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput
	// The resource name.
	Name pulumi.StringPtrInput
	// Dashboard parametrization.
	Parametrizations MonitoringDashboardParametrizationArrayInput
	// Dashboard title.
	Title pulumi.StringPtrInput
	// Widgets.
	Widgets MonitoringDashboardWidgetArrayInput
}

func (MonitoringDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringDashboardArgs)(nil)).Elem()
}

type MonitoringDashboardInput interface {
	pulumi.Input

	ToMonitoringDashboardOutput() MonitoringDashboardOutput
	ToMonitoringDashboardOutputWithContext(ctx context.Context) MonitoringDashboardOutput
}

func (*MonitoringDashboard) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringDashboard)(nil)).Elem()
}

func (i *MonitoringDashboard) ToMonitoringDashboardOutput() MonitoringDashboardOutput {
	return i.ToMonitoringDashboardOutputWithContext(context.Background())
}

func (i *MonitoringDashboard) ToMonitoringDashboardOutputWithContext(ctx context.Context) MonitoringDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringDashboardOutput)
}

// MonitoringDashboardArrayInput is an input type that accepts MonitoringDashboardArray and MonitoringDashboardArrayOutput values.
// You can construct a concrete instance of `MonitoringDashboardArrayInput` via:
//
//	MonitoringDashboardArray{ MonitoringDashboardArgs{...} }
type MonitoringDashboardArrayInput interface {
	pulumi.Input

	ToMonitoringDashboardArrayOutput() MonitoringDashboardArrayOutput
	ToMonitoringDashboardArrayOutputWithContext(context.Context) MonitoringDashboardArrayOutput
}

type MonitoringDashboardArray []MonitoringDashboardInput

func (MonitoringDashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoringDashboard)(nil)).Elem()
}

func (i MonitoringDashboardArray) ToMonitoringDashboardArrayOutput() MonitoringDashboardArrayOutput {
	return i.ToMonitoringDashboardArrayOutputWithContext(context.Background())
}

func (i MonitoringDashboardArray) ToMonitoringDashboardArrayOutputWithContext(ctx context.Context) MonitoringDashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringDashboardArrayOutput)
}

// MonitoringDashboardMapInput is an input type that accepts MonitoringDashboardMap and MonitoringDashboardMapOutput values.
// You can construct a concrete instance of `MonitoringDashboardMapInput` via:
//
//	MonitoringDashboardMap{ "key": MonitoringDashboardArgs{...} }
type MonitoringDashboardMapInput interface {
	pulumi.Input

	ToMonitoringDashboardMapOutput() MonitoringDashboardMapOutput
	ToMonitoringDashboardMapOutputWithContext(context.Context) MonitoringDashboardMapOutput
}

type MonitoringDashboardMap map[string]MonitoringDashboardInput

func (MonitoringDashboardMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoringDashboard)(nil)).Elem()
}

func (i MonitoringDashboardMap) ToMonitoringDashboardMapOutput() MonitoringDashboardMapOutput {
	return i.ToMonitoringDashboardMapOutputWithContext(context.Background())
}

func (i MonitoringDashboardMap) ToMonitoringDashboardMapOutputWithContext(ctx context.Context) MonitoringDashboardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringDashboardMapOutput)
}

type MonitoringDashboardOutput struct{ *pulumi.OutputState }

func (MonitoringDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringDashboard)(nil)).Elem()
}

func (o MonitoringDashboardOutput) ToMonitoringDashboardOutput() MonitoringDashboardOutput {
	return o
}

func (o MonitoringDashboardOutput) ToMonitoringDashboardOutputWithContext(ctx context.Context) MonitoringDashboardOutput {
	return o
}

// Dashboard ID.
func (o MonitoringDashboardOutput) DashboardId() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringDashboard) pulumi.StringOutput { return v.DashboardId }).(pulumi.StringOutput)
}

// The resource description.
func (o MonitoringDashboardOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoringDashboard) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o MonitoringDashboardOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringDashboard) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o MonitoringDashboardOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MonitoringDashboard) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name.
func (o MonitoringDashboardOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringDashboard) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Dashboard parametrization.
func (o MonitoringDashboardOutput) Parametrizations() MonitoringDashboardParametrizationArrayOutput {
	return o.ApplyT(func(v *MonitoringDashboard) MonitoringDashboardParametrizationArrayOutput { return v.Parametrizations }).(MonitoringDashboardParametrizationArrayOutput)
}

// Dashboard title.
func (o MonitoringDashboardOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoringDashboard) pulumi.StringPtrOutput { return v.Title }).(pulumi.StringPtrOutput)
}

// Widgets.
func (o MonitoringDashboardOutput) Widgets() MonitoringDashboardWidgetArrayOutput {
	return o.ApplyT(func(v *MonitoringDashboard) MonitoringDashboardWidgetArrayOutput { return v.Widgets }).(MonitoringDashboardWidgetArrayOutput)
}

type MonitoringDashboardArrayOutput struct{ *pulumi.OutputState }

func (MonitoringDashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoringDashboard)(nil)).Elem()
}

func (o MonitoringDashboardArrayOutput) ToMonitoringDashboardArrayOutput() MonitoringDashboardArrayOutput {
	return o
}

func (o MonitoringDashboardArrayOutput) ToMonitoringDashboardArrayOutputWithContext(ctx context.Context) MonitoringDashboardArrayOutput {
	return o
}

func (o MonitoringDashboardArrayOutput) Index(i pulumi.IntInput) MonitoringDashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MonitoringDashboard {
		return vs[0].([]*MonitoringDashboard)[vs[1].(int)]
	}).(MonitoringDashboardOutput)
}

type MonitoringDashboardMapOutput struct{ *pulumi.OutputState }

func (MonitoringDashboardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoringDashboard)(nil)).Elem()
}

func (o MonitoringDashboardMapOutput) ToMonitoringDashboardMapOutput() MonitoringDashboardMapOutput {
	return o
}

func (o MonitoringDashboardMapOutput) ToMonitoringDashboardMapOutputWithContext(ctx context.Context) MonitoringDashboardMapOutput {
	return o
}

func (o MonitoringDashboardMapOutput) MapIndex(k pulumi.StringInput) MonitoringDashboardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MonitoringDashboard {
		return vs[0].(map[string]*MonitoringDashboard)[vs[1].(string)]
	}).(MonitoringDashboardOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringDashboardInput)(nil)).Elem(), &MonitoringDashboard{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringDashboardArrayInput)(nil)).Elem(), MonitoringDashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringDashboardMapInput)(nil)).Elem(), MonitoringDashboardMap{})
	pulumi.RegisterOutputType(MonitoringDashboardOutput{})
	pulumi.RegisterOutputType(MonitoringDashboardArrayOutput{})
	pulumi.RegisterOutputType(MonitoringDashboardMapOutput{})
}
