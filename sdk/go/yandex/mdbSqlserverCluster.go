// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MdbSqlserverCluster struct {
	pulumi.CustomResourceState

	// Time to start the daily backup, in the UTC.
	BackupWindowStart MdbSqlserverClusterBackupWindowStartOutput `pulumi:"backupWindowStart"`
	// The creation timestamp of the resource.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// A database of the SQLServer cluster.
	Databases MdbSqlserverClusterDatabaseArrayOutput `pulumi:"databases"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection pulumi.BoolOutput `pulumi:"deletionProtection"`
	// The resource description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Deployment environment of the SQLServer cluster. (PRODUCTION, PRESTABLE).
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// Aggregated health of the cluster.
	Health pulumi.StringOutput `pulumi:"health"`
	// A list of IDs of the host groups hosting VMs of the cluster.
	HostGroupIds pulumi.StringArrayOutput `pulumi:"hostGroupIds"`
	// A host of the SQLServer cluster.
	Hosts MdbSqlserverClusterHostArrayOutput `pulumi:"hosts"`
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Resources allocated to hosts of the SQLServer cluster.
	Resources MdbSqlserverClusterResourcesOutput `pulumi:"resources"`
	// The list of security groups applied to resource or their components.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!
	Sqlcollation pulumi.StringOutput `pulumi:"sqlcollation"`
	// SQLServer cluster config. Detail info in `SQLServer config` section.
	SqlserverConfig pulumi.StringMapOutput `pulumi:"sqlserverConfig"`
	// Status of the cluster.
	Status pulumi.StringOutput `pulumi:"status"`
	// A user of the SQLServer cluster.
	Users MdbSqlserverClusterUserArrayOutput `pulumi:"users"`
	// Version of the SQLServer cluster. (2016sp2std, 2016sp2ent).
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewMdbSqlserverCluster registers a new resource with the given unique name, arguments, and options.
func NewMdbSqlserverCluster(ctx *pulumi.Context,
	name string, args *MdbSqlserverClusterArgs, opts ...pulumi.ResourceOption) (*MdbSqlserverCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Databases == nil {
		return nil, errors.New("invalid value for required argument 'Databases'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Hosts == nil {
		return nil, errors.New("invalid value for required argument 'Hosts'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Resources == nil {
		return nil, errors.New("invalid value for required argument 'Resources'")
	}
	if args.Users == nil {
		return nil, errors.New("invalid value for required argument 'Users'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MdbSqlserverCluster
	err := ctx.RegisterResource("yandex:index/mdbSqlserverCluster:MdbSqlserverCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMdbSqlserverCluster gets an existing MdbSqlserverCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMdbSqlserverCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MdbSqlserverClusterState, opts ...pulumi.ResourceOption) (*MdbSqlserverCluster, error) {
	var resource MdbSqlserverCluster
	err := ctx.ReadResource("yandex:index/mdbSqlserverCluster:MdbSqlserverCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MdbSqlserverCluster resources.
type mdbSqlserverClusterState struct {
	// Time to start the daily backup, in the UTC.
	BackupWindowStart *MdbSqlserverClusterBackupWindowStart `pulumi:"backupWindowStart"`
	// The creation timestamp of the resource.
	CreatedAt *string `pulumi:"createdAt"`
	// A database of the SQLServer cluster.
	Databases []MdbSqlserverClusterDatabase `pulumi:"databases"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// The resource description.
	Description *string `pulumi:"description"`
	// Deployment environment of the SQLServer cluster. (PRODUCTION, PRESTABLE).
	Environment *string `pulumi:"environment"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// Aggregated health of the cluster.
	Health *string `pulumi:"health"`
	// A list of IDs of the host groups hosting VMs of the cluster.
	HostGroupIds []string `pulumi:"hostGroupIds"`
	// A host of the SQLServer cluster.
	Hosts []MdbSqlserverClusterHost `pulumi:"hosts"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId *string `pulumi:"networkId"`
	// Resources allocated to hosts of the SQLServer cluster.
	Resources *MdbSqlserverClusterResources `pulumi:"resources"`
	// The list of security groups applied to resource or their components.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!
	Sqlcollation *string `pulumi:"sqlcollation"`
	// SQLServer cluster config. Detail info in `SQLServer config` section.
	SqlserverConfig map[string]string `pulumi:"sqlserverConfig"`
	// Status of the cluster.
	Status *string `pulumi:"status"`
	// A user of the SQLServer cluster.
	Users []MdbSqlserverClusterUser `pulumi:"users"`
	// Version of the SQLServer cluster. (2016sp2std, 2016sp2ent).
	Version *string `pulumi:"version"`
}

type MdbSqlserverClusterState struct {
	// Time to start the daily backup, in the UTC.
	BackupWindowStart MdbSqlserverClusterBackupWindowStartPtrInput
	// The creation timestamp of the resource.
	CreatedAt pulumi.StringPtrInput
	// A database of the SQLServer cluster.
	Databases MdbSqlserverClusterDatabaseArrayInput
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection pulumi.BoolPtrInput
	// The resource description.
	Description pulumi.StringPtrInput
	// Deployment environment of the SQLServer cluster. (PRODUCTION, PRESTABLE).
	Environment pulumi.StringPtrInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// Aggregated health of the cluster.
	Health pulumi.StringPtrInput
	// A list of IDs of the host groups hosting VMs of the cluster.
	HostGroupIds pulumi.StringArrayInput
	// A host of the SQLServer cluster.
	Hosts MdbSqlserverClusterHostArrayInput
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput
	// The resource name.
	Name pulumi.StringPtrInput
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId pulumi.StringPtrInput
	// Resources allocated to hosts of the SQLServer cluster.
	Resources MdbSqlserverClusterResourcesPtrInput
	// The list of security groups applied to resource or their components.
	SecurityGroupIds pulumi.StringArrayInput
	// SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!
	Sqlcollation pulumi.StringPtrInput
	// SQLServer cluster config. Detail info in `SQLServer config` section.
	SqlserverConfig pulumi.StringMapInput
	// Status of the cluster.
	Status pulumi.StringPtrInput
	// A user of the SQLServer cluster.
	Users MdbSqlserverClusterUserArrayInput
	// Version of the SQLServer cluster. (2016sp2std, 2016sp2ent).
	Version pulumi.StringPtrInput
}

func (MdbSqlserverClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbSqlserverClusterState)(nil)).Elem()
}

type mdbSqlserverClusterArgs struct {
	// Time to start the daily backup, in the UTC.
	BackupWindowStart *MdbSqlserverClusterBackupWindowStart `pulumi:"backupWindowStart"`
	// A database of the SQLServer cluster.
	Databases []MdbSqlserverClusterDatabase `pulumi:"databases"`
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// The resource description.
	Description *string `pulumi:"description"`
	// Deployment environment of the SQLServer cluster. (PRODUCTION, PRESTABLE).
	Environment string `pulumi:"environment"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// A list of IDs of the host groups hosting VMs of the cluster.
	HostGroupIds []string `pulumi:"hostGroupIds"`
	// A host of the SQLServer cluster.
	Hosts []MdbSqlserverClusterHost `pulumi:"hosts"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId string `pulumi:"networkId"`
	// Resources allocated to hosts of the SQLServer cluster.
	Resources MdbSqlserverClusterResources `pulumi:"resources"`
	// The list of security groups applied to resource or their components.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!
	Sqlcollation *string `pulumi:"sqlcollation"`
	// SQLServer cluster config. Detail info in `SQLServer config` section.
	SqlserverConfig map[string]string `pulumi:"sqlserverConfig"`
	// A user of the SQLServer cluster.
	Users []MdbSqlserverClusterUser `pulumi:"users"`
	// Version of the SQLServer cluster. (2016sp2std, 2016sp2ent).
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a MdbSqlserverCluster resource.
type MdbSqlserverClusterArgs struct {
	// Time to start the daily backup, in the UTC.
	BackupWindowStart MdbSqlserverClusterBackupWindowStartPtrInput
	// A database of the SQLServer cluster.
	Databases MdbSqlserverClusterDatabaseArrayInput
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection pulumi.BoolPtrInput
	// The resource description.
	Description pulumi.StringPtrInput
	// Deployment environment of the SQLServer cluster. (PRODUCTION, PRESTABLE).
	Environment pulumi.StringInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// A list of IDs of the host groups hosting VMs of the cluster.
	HostGroupIds pulumi.StringArrayInput
	// A host of the SQLServer cluster.
	Hosts MdbSqlserverClusterHostArrayInput
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput
	// The resource name.
	Name pulumi.StringPtrInput
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId pulumi.StringInput
	// Resources allocated to hosts of the SQLServer cluster.
	Resources MdbSqlserverClusterResourcesInput
	// The list of security groups applied to resource or their components.
	SecurityGroupIds pulumi.StringArrayInput
	// SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!
	Sqlcollation pulumi.StringPtrInput
	// SQLServer cluster config. Detail info in `SQLServer config` section.
	SqlserverConfig pulumi.StringMapInput
	// A user of the SQLServer cluster.
	Users MdbSqlserverClusterUserArrayInput
	// Version of the SQLServer cluster. (2016sp2std, 2016sp2ent).
	Version pulumi.StringInput
}

func (MdbSqlserverClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbSqlserverClusterArgs)(nil)).Elem()
}

type MdbSqlserverClusterInput interface {
	pulumi.Input

	ToMdbSqlserverClusterOutput() MdbSqlserverClusterOutput
	ToMdbSqlserverClusterOutputWithContext(ctx context.Context) MdbSqlserverClusterOutput
}

func (*MdbSqlserverCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbSqlserverCluster)(nil)).Elem()
}

func (i *MdbSqlserverCluster) ToMdbSqlserverClusterOutput() MdbSqlserverClusterOutput {
	return i.ToMdbSqlserverClusterOutputWithContext(context.Background())
}

func (i *MdbSqlserverCluster) ToMdbSqlserverClusterOutputWithContext(ctx context.Context) MdbSqlserverClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbSqlserverClusterOutput)
}

// MdbSqlserverClusterArrayInput is an input type that accepts MdbSqlserverClusterArray and MdbSqlserverClusterArrayOutput values.
// You can construct a concrete instance of `MdbSqlserverClusterArrayInput` via:
//
//	MdbSqlserverClusterArray{ MdbSqlserverClusterArgs{...} }
type MdbSqlserverClusterArrayInput interface {
	pulumi.Input

	ToMdbSqlserverClusterArrayOutput() MdbSqlserverClusterArrayOutput
	ToMdbSqlserverClusterArrayOutputWithContext(context.Context) MdbSqlserverClusterArrayOutput
}

type MdbSqlserverClusterArray []MdbSqlserverClusterInput

func (MdbSqlserverClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MdbSqlserverCluster)(nil)).Elem()
}

func (i MdbSqlserverClusterArray) ToMdbSqlserverClusterArrayOutput() MdbSqlserverClusterArrayOutput {
	return i.ToMdbSqlserverClusterArrayOutputWithContext(context.Background())
}

func (i MdbSqlserverClusterArray) ToMdbSqlserverClusterArrayOutputWithContext(ctx context.Context) MdbSqlserverClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbSqlserverClusterArrayOutput)
}

// MdbSqlserverClusterMapInput is an input type that accepts MdbSqlserverClusterMap and MdbSqlserverClusterMapOutput values.
// You can construct a concrete instance of `MdbSqlserverClusterMapInput` via:
//
//	MdbSqlserverClusterMap{ "key": MdbSqlserverClusterArgs{...} }
type MdbSqlserverClusterMapInput interface {
	pulumi.Input

	ToMdbSqlserverClusterMapOutput() MdbSqlserverClusterMapOutput
	ToMdbSqlserverClusterMapOutputWithContext(context.Context) MdbSqlserverClusterMapOutput
}

type MdbSqlserverClusterMap map[string]MdbSqlserverClusterInput

func (MdbSqlserverClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MdbSqlserverCluster)(nil)).Elem()
}

func (i MdbSqlserverClusterMap) ToMdbSqlserverClusterMapOutput() MdbSqlserverClusterMapOutput {
	return i.ToMdbSqlserverClusterMapOutputWithContext(context.Background())
}

func (i MdbSqlserverClusterMap) ToMdbSqlserverClusterMapOutputWithContext(ctx context.Context) MdbSqlserverClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbSqlserverClusterMapOutput)
}

type MdbSqlserverClusterOutput struct{ *pulumi.OutputState }

func (MdbSqlserverClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbSqlserverCluster)(nil)).Elem()
}

func (o MdbSqlserverClusterOutput) ToMdbSqlserverClusterOutput() MdbSqlserverClusterOutput {
	return o
}

func (o MdbSqlserverClusterOutput) ToMdbSqlserverClusterOutputWithContext(ctx context.Context) MdbSqlserverClusterOutput {
	return o
}

// Time to start the daily backup, in the UTC.
func (o MdbSqlserverClusterOutput) BackupWindowStart() MdbSqlserverClusterBackupWindowStartOutput {
	return o.ApplyT(func(v *MdbSqlserverCluster) MdbSqlserverClusterBackupWindowStartOutput { return v.BackupWindowStart }).(MdbSqlserverClusterBackupWindowStartOutput)
}

// The creation timestamp of the resource.
func (o MdbSqlserverClusterOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlserverCluster) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// A database of the SQLServer cluster.
func (o MdbSqlserverClusterOutput) Databases() MdbSqlserverClusterDatabaseArrayOutput {
	return o.ApplyT(func(v *MdbSqlserverCluster) MdbSqlserverClusterDatabaseArrayOutput { return v.Databases }).(MdbSqlserverClusterDatabaseArrayOutput)
}

// The `true` value means that resource is protected from accidental deletion.
func (o MdbSqlserverClusterOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *MdbSqlserverCluster) pulumi.BoolOutput { return v.DeletionProtection }).(pulumi.BoolOutput)
}

// The resource description.
func (o MdbSqlserverClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MdbSqlserverCluster) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Deployment environment of the SQLServer cluster. (PRODUCTION, PRESTABLE).
func (o MdbSqlserverClusterOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlserverCluster) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o MdbSqlserverClusterOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlserverCluster) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

// Aggregated health of the cluster.
func (o MdbSqlserverClusterOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlserverCluster) pulumi.StringOutput { return v.Health }).(pulumi.StringOutput)
}

// A list of IDs of the host groups hosting VMs of the cluster.
func (o MdbSqlserverClusterOutput) HostGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MdbSqlserverCluster) pulumi.StringArrayOutput { return v.HostGroupIds }).(pulumi.StringArrayOutput)
}

// A host of the SQLServer cluster.
func (o MdbSqlserverClusterOutput) Hosts() MdbSqlserverClusterHostArrayOutput {
	return o.ApplyT(func(v *MdbSqlserverCluster) MdbSqlserverClusterHostArrayOutput { return v.Hosts }).(MdbSqlserverClusterHostArrayOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o MdbSqlserverClusterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MdbSqlserverCluster) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name.
func (o MdbSqlserverClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlserverCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The `VPC Network ID` of subnets which resource attached to.
func (o MdbSqlserverClusterOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlserverCluster) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Resources allocated to hosts of the SQLServer cluster.
func (o MdbSqlserverClusterOutput) Resources() MdbSqlserverClusterResourcesOutput {
	return o.ApplyT(func(v *MdbSqlserverCluster) MdbSqlserverClusterResourcesOutput { return v.Resources }).(MdbSqlserverClusterResourcesOutput)
}

// The list of security groups applied to resource or their components.
func (o MdbSqlserverClusterOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MdbSqlserverCluster) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!
func (o MdbSqlserverClusterOutput) Sqlcollation() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlserverCluster) pulumi.StringOutput { return v.Sqlcollation }).(pulumi.StringOutput)
}

// SQLServer cluster config. Detail info in `SQLServer config` section.
func (o MdbSqlserverClusterOutput) SqlserverConfig() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MdbSqlserverCluster) pulumi.StringMapOutput { return v.SqlserverConfig }).(pulumi.StringMapOutput)
}

// Status of the cluster.
func (o MdbSqlserverClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlserverCluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// A user of the SQLServer cluster.
func (o MdbSqlserverClusterOutput) Users() MdbSqlserverClusterUserArrayOutput {
	return o.ApplyT(func(v *MdbSqlserverCluster) MdbSqlserverClusterUserArrayOutput { return v.Users }).(MdbSqlserverClusterUserArrayOutput)
}

// Version of the SQLServer cluster. (2016sp2std, 2016sp2ent).
func (o MdbSqlserverClusterOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlserverCluster) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type MdbSqlserverClusterArrayOutput struct{ *pulumi.OutputState }

func (MdbSqlserverClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MdbSqlserverCluster)(nil)).Elem()
}

func (o MdbSqlserverClusterArrayOutput) ToMdbSqlserverClusterArrayOutput() MdbSqlserverClusterArrayOutput {
	return o
}

func (o MdbSqlserverClusterArrayOutput) ToMdbSqlserverClusterArrayOutputWithContext(ctx context.Context) MdbSqlserverClusterArrayOutput {
	return o
}

func (o MdbSqlserverClusterArrayOutput) Index(i pulumi.IntInput) MdbSqlserverClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MdbSqlserverCluster {
		return vs[0].([]*MdbSqlserverCluster)[vs[1].(int)]
	}).(MdbSqlserverClusterOutput)
}

type MdbSqlserverClusterMapOutput struct{ *pulumi.OutputState }

func (MdbSqlserverClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MdbSqlserverCluster)(nil)).Elem()
}

func (o MdbSqlserverClusterMapOutput) ToMdbSqlserverClusterMapOutput() MdbSqlserverClusterMapOutput {
	return o
}

func (o MdbSqlserverClusterMapOutput) ToMdbSqlserverClusterMapOutputWithContext(ctx context.Context) MdbSqlserverClusterMapOutput {
	return o
}

func (o MdbSqlserverClusterMapOutput) MapIndex(k pulumi.StringInput) MdbSqlserverClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MdbSqlserverCluster {
		return vs[0].(map[string]*MdbSqlserverCluster)[vs[1].(string)]
	}).(MdbSqlserverClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MdbSqlserverClusterInput)(nil)).Elem(), &MdbSqlserverCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdbSqlserverClusterArrayInput)(nil)).Elem(), MdbSqlserverClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdbSqlserverClusterMapInput)(nil)).Elem(), MdbSqlserverClusterMap{})
	pulumi.RegisterOutputType(MdbSqlserverClusterOutput{})
	pulumi.RegisterOutputType(MdbSqlserverClusterArrayOutput{})
	pulumi.RegisterOutputType(MdbSqlserverClusterMapOutput{})
}
