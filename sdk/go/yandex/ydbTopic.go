// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type YdbTopic struct {
	pulumi.CustomResourceState

	Consumers               YdbTopicConsumerArrayOutput `pulumi:"consumers"`
	DatabaseEndpoint        pulumi.StringOutput         `pulumi:"databaseEndpoint"`
	Description             pulumi.StringPtrOutput      `pulumi:"description"`
	MeteringMode            pulumi.StringOutput         `pulumi:"meteringMode"`
	Name                    pulumi.StringOutput         `pulumi:"name"`
	PartitionWriteSpeedKbps pulumi.IntOutput            `pulumi:"partitionWriteSpeedKbps"`
	PartitionsCount         pulumi.IntOutput            `pulumi:"partitionsCount"`
	RetentionPeriodHours    pulumi.IntOutput            `pulumi:"retentionPeriodHours"`
	RetentionStorageMb      pulumi.IntOutput            `pulumi:"retentionStorageMb"`
	SupportedCodecs         pulumi.StringArrayOutput    `pulumi:"supportedCodecs"`
}

// NewYdbTopic registers a new resource with the given unique name, arguments, and options.
func NewYdbTopic(ctx *pulumi.Context,
	name string, args *YdbTopicArgs, opts ...pulumi.ResourceOption) (*YdbTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseEndpoint'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource YdbTopic
	err := ctx.RegisterResource("yandex:index/ydbTopic:YdbTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetYdbTopic gets an existing YdbTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetYdbTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *YdbTopicState, opts ...pulumi.ResourceOption) (*YdbTopic, error) {
	var resource YdbTopic
	err := ctx.ReadResource("yandex:index/ydbTopic:YdbTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering YdbTopic resources.
type ydbTopicState struct {
	Consumers               []YdbTopicConsumer `pulumi:"consumers"`
	DatabaseEndpoint        *string            `pulumi:"databaseEndpoint"`
	Description             *string            `pulumi:"description"`
	MeteringMode            *string            `pulumi:"meteringMode"`
	Name                    *string            `pulumi:"name"`
	PartitionWriteSpeedKbps *int               `pulumi:"partitionWriteSpeedKbps"`
	PartitionsCount         *int               `pulumi:"partitionsCount"`
	RetentionPeriodHours    *int               `pulumi:"retentionPeriodHours"`
	RetentionStorageMb      *int               `pulumi:"retentionStorageMb"`
	SupportedCodecs         []string           `pulumi:"supportedCodecs"`
}

type YdbTopicState struct {
	Consumers               YdbTopicConsumerArrayInput
	DatabaseEndpoint        pulumi.StringPtrInput
	Description             pulumi.StringPtrInput
	MeteringMode            pulumi.StringPtrInput
	Name                    pulumi.StringPtrInput
	PartitionWriteSpeedKbps pulumi.IntPtrInput
	PartitionsCount         pulumi.IntPtrInput
	RetentionPeriodHours    pulumi.IntPtrInput
	RetentionStorageMb      pulumi.IntPtrInput
	SupportedCodecs         pulumi.StringArrayInput
}

func (YdbTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*ydbTopicState)(nil)).Elem()
}

type ydbTopicArgs struct {
	Consumers               []YdbTopicConsumer `pulumi:"consumers"`
	DatabaseEndpoint        string             `pulumi:"databaseEndpoint"`
	Description             *string            `pulumi:"description"`
	MeteringMode            *string            `pulumi:"meteringMode"`
	Name                    *string            `pulumi:"name"`
	PartitionWriteSpeedKbps *int               `pulumi:"partitionWriteSpeedKbps"`
	PartitionsCount         *int               `pulumi:"partitionsCount"`
	RetentionPeriodHours    *int               `pulumi:"retentionPeriodHours"`
	RetentionStorageMb      *int               `pulumi:"retentionStorageMb"`
	SupportedCodecs         []string           `pulumi:"supportedCodecs"`
}

// The set of arguments for constructing a YdbTopic resource.
type YdbTopicArgs struct {
	Consumers               YdbTopicConsumerArrayInput
	DatabaseEndpoint        pulumi.StringInput
	Description             pulumi.StringPtrInput
	MeteringMode            pulumi.StringPtrInput
	Name                    pulumi.StringPtrInput
	PartitionWriteSpeedKbps pulumi.IntPtrInput
	PartitionsCount         pulumi.IntPtrInput
	RetentionPeriodHours    pulumi.IntPtrInput
	RetentionStorageMb      pulumi.IntPtrInput
	SupportedCodecs         pulumi.StringArrayInput
}

func (YdbTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ydbTopicArgs)(nil)).Elem()
}

type YdbTopicInput interface {
	pulumi.Input

	ToYdbTopicOutput() YdbTopicOutput
	ToYdbTopicOutputWithContext(ctx context.Context) YdbTopicOutput
}

func (*YdbTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**YdbTopic)(nil)).Elem()
}

func (i *YdbTopic) ToYdbTopicOutput() YdbTopicOutput {
	return i.ToYdbTopicOutputWithContext(context.Background())
}

func (i *YdbTopic) ToYdbTopicOutputWithContext(ctx context.Context) YdbTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YdbTopicOutput)
}

// YdbTopicArrayInput is an input type that accepts YdbTopicArray and YdbTopicArrayOutput values.
// You can construct a concrete instance of `YdbTopicArrayInput` via:
//
//	YdbTopicArray{ YdbTopicArgs{...} }
type YdbTopicArrayInput interface {
	pulumi.Input

	ToYdbTopicArrayOutput() YdbTopicArrayOutput
	ToYdbTopicArrayOutputWithContext(context.Context) YdbTopicArrayOutput
}

type YdbTopicArray []YdbTopicInput

func (YdbTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*YdbTopic)(nil)).Elem()
}

func (i YdbTopicArray) ToYdbTopicArrayOutput() YdbTopicArrayOutput {
	return i.ToYdbTopicArrayOutputWithContext(context.Background())
}

func (i YdbTopicArray) ToYdbTopicArrayOutputWithContext(ctx context.Context) YdbTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YdbTopicArrayOutput)
}

// YdbTopicMapInput is an input type that accepts YdbTopicMap and YdbTopicMapOutput values.
// You can construct a concrete instance of `YdbTopicMapInput` via:
//
//	YdbTopicMap{ "key": YdbTopicArgs{...} }
type YdbTopicMapInput interface {
	pulumi.Input

	ToYdbTopicMapOutput() YdbTopicMapOutput
	ToYdbTopicMapOutputWithContext(context.Context) YdbTopicMapOutput
}

type YdbTopicMap map[string]YdbTopicInput

func (YdbTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*YdbTopic)(nil)).Elem()
}

func (i YdbTopicMap) ToYdbTopicMapOutput() YdbTopicMapOutput {
	return i.ToYdbTopicMapOutputWithContext(context.Background())
}

func (i YdbTopicMap) ToYdbTopicMapOutputWithContext(ctx context.Context) YdbTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YdbTopicMapOutput)
}

type YdbTopicOutput struct{ *pulumi.OutputState }

func (YdbTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**YdbTopic)(nil)).Elem()
}

func (o YdbTopicOutput) ToYdbTopicOutput() YdbTopicOutput {
	return o
}

func (o YdbTopicOutput) ToYdbTopicOutputWithContext(ctx context.Context) YdbTopicOutput {
	return o
}

func (o YdbTopicOutput) Consumers() YdbTopicConsumerArrayOutput {
	return o.ApplyT(func(v *YdbTopic) YdbTopicConsumerArrayOutput { return v.Consumers }).(YdbTopicConsumerArrayOutput)
}

func (o YdbTopicOutput) DatabaseEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *YdbTopic) pulumi.StringOutput { return v.DatabaseEndpoint }).(pulumi.StringOutput)
}

func (o YdbTopicOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *YdbTopic) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o YdbTopicOutput) MeteringMode() pulumi.StringOutput {
	return o.ApplyT(func(v *YdbTopic) pulumi.StringOutput { return v.MeteringMode }).(pulumi.StringOutput)
}

func (o YdbTopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *YdbTopic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o YdbTopicOutput) PartitionWriteSpeedKbps() pulumi.IntOutput {
	return o.ApplyT(func(v *YdbTopic) pulumi.IntOutput { return v.PartitionWriteSpeedKbps }).(pulumi.IntOutput)
}

func (o YdbTopicOutput) PartitionsCount() pulumi.IntOutput {
	return o.ApplyT(func(v *YdbTopic) pulumi.IntOutput { return v.PartitionsCount }).(pulumi.IntOutput)
}

func (o YdbTopicOutput) RetentionPeriodHours() pulumi.IntOutput {
	return o.ApplyT(func(v *YdbTopic) pulumi.IntOutput { return v.RetentionPeriodHours }).(pulumi.IntOutput)
}

func (o YdbTopicOutput) RetentionStorageMb() pulumi.IntOutput {
	return o.ApplyT(func(v *YdbTopic) pulumi.IntOutput { return v.RetentionStorageMb }).(pulumi.IntOutput)
}

func (o YdbTopicOutput) SupportedCodecs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *YdbTopic) pulumi.StringArrayOutput { return v.SupportedCodecs }).(pulumi.StringArrayOutput)
}

type YdbTopicArrayOutput struct{ *pulumi.OutputState }

func (YdbTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*YdbTopic)(nil)).Elem()
}

func (o YdbTopicArrayOutput) ToYdbTopicArrayOutput() YdbTopicArrayOutput {
	return o
}

func (o YdbTopicArrayOutput) ToYdbTopicArrayOutputWithContext(ctx context.Context) YdbTopicArrayOutput {
	return o
}

func (o YdbTopicArrayOutput) Index(i pulumi.IntInput) YdbTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *YdbTopic {
		return vs[0].([]*YdbTopic)[vs[1].(int)]
	}).(YdbTopicOutput)
}

type YdbTopicMapOutput struct{ *pulumi.OutputState }

func (YdbTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*YdbTopic)(nil)).Elem()
}

func (o YdbTopicMapOutput) ToYdbTopicMapOutput() YdbTopicMapOutput {
	return o
}

func (o YdbTopicMapOutput) ToYdbTopicMapOutputWithContext(ctx context.Context) YdbTopicMapOutput {
	return o
}

func (o YdbTopicMapOutput) MapIndex(k pulumi.StringInput) YdbTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *YdbTopic {
		return vs[0].(map[string]*YdbTopic)[vs[1].(string)]
	}).(YdbTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*YdbTopicInput)(nil)).Elem(), &YdbTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*YdbTopicArrayInput)(nil)).Elem(), YdbTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*YdbTopicMapInput)(nil)).Elem(), YdbTopicMap{})
	pulumi.RegisterOutputType(YdbTopicOutput{})
	pulumi.RegisterOutputType(YdbTopicArrayOutput{})
	pulumi.RegisterOutputType(YdbTopicMapOutput{})
}
