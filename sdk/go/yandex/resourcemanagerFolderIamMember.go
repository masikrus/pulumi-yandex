// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ResourcemanagerFolderIamMember struct {
	pulumi.CustomResourceState

	// The ID of the folder to attach a policy to.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member pulumi.StringOutput `pulumi:"member"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       pulumi.StringOutput `pulumi:"role"`
	SleepAfter pulumi.IntPtrOutput `pulumi:"sleepAfter"`
}

// NewResourcemanagerFolderIamMember registers a new resource with the given unique name, arguments, and options.
func NewResourcemanagerFolderIamMember(ctx *pulumi.Context,
	name string, args *ResourcemanagerFolderIamMemberArgs, opts ...pulumi.ResourceOption) (*ResourcemanagerFolderIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FolderId == nil {
		return nil, errors.New("invalid value for required argument 'FolderId'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourcemanagerFolderIamMember
	err := ctx.RegisterResource("yandex:index/resourcemanagerFolderIamMember:ResourcemanagerFolderIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourcemanagerFolderIamMember gets an existing ResourcemanagerFolderIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourcemanagerFolderIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourcemanagerFolderIamMemberState, opts ...pulumi.ResourceOption) (*ResourcemanagerFolderIamMember, error) {
	var resource ResourcemanagerFolderIamMember
	err := ctx.ReadResource("yandex:index/resourcemanagerFolderIamMember:ResourcemanagerFolderIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourcemanagerFolderIamMember resources.
type resourcemanagerFolderIamMemberState struct {
	// The ID of the folder to attach a policy to.
	FolderId *string `pulumi:"folderId"`
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member *string `pulumi:"member"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       *string `pulumi:"role"`
	SleepAfter *int    `pulumi:"sleepAfter"`
}

type ResourcemanagerFolderIamMemberState struct {
	// The ID of the folder to attach a policy to.
	FolderId pulumi.StringPtrInput
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member pulumi.StringPtrInput
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       pulumi.StringPtrInput
	SleepAfter pulumi.IntPtrInput
}

func (ResourcemanagerFolderIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourcemanagerFolderIamMemberState)(nil)).Elem()
}

type resourcemanagerFolderIamMemberArgs struct {
	// The ID of the folder to attach a policy to.
	FolderId string `pulumi:"folderId"`
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member string `pulumi:"member"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       string `pulumi:"role"`
	SleepAfter *int   `pulumi:"sleepAfter"`
}

// The set of arguments for constructing a ResourcemanagerFolderIamMember resource.
type ResourcemanagerFolderIamMemberArgs struct {
	// The ID of the folder to attach a policy to.
	FolderId pulumi.StringInput
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member pulumi.StringInput
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role       pulumi.StringInput
	SleepAfter pulumi.IntPtrInput
}

func (ResourcemanagerFolderIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourcemanagerFolderIamMemberArgs)(nil)).Elem()
}

type ResourcemanagerFolderIamMemberInput interface {
	pulumi.Input

	ToResourcemanagerFolderIamMemberOutput() ResourcemanagerFolderIamMemberOutput
	ToResourcemanagerFolderIamMemberOutputWithContext(ctx context.Context) ResourcemanagerFolderIamMemberOutput
}

func (*ResourcemanagerFolderIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcemanagerFolderIamMember)(nil)).Elem()
}

func (i *ResourcemanagerFolderIamMember) ToResourcemanagerFolderIamMemberOutput() ResourcemanagerFolderIamMemberOutput {
	return i.ToResourcemanagerFolderIamMemberOutputWithContext(context.Background())
}

func (i *ResourcemanagerFolderIamMember) ToResourcemanagerFolderIamMemberOutputWithContext(ctx context.Context) ResourcemanagerFolderIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcemanagerFolderIamMemberOutput)
}

// ResourcemanagerFolderIamMemberArrayInput is an input type that accepts ResourcemanagerFolderIamMemberArray and ResourcemanagerFolderIamMemberArrayOutput values.
// You can construct a concrete instance of `ResourcemanagerFolderIamMemberArrayInput` via:
//
//	ResourcemanagerFolderIamMemberArray{ ResourcemanagerFolderIamMemberArgs{...} }
type ResourcemanagerFolderIamMemberArrayInput interface {
	pulumi.Input

	ToResourcemanagerFolderIamMemberArrayOutput() ResourcemanagerFolderIamMemberArrayOutput
	ToResourcemanagerFolderIamMemberArrayOutputWithContext(context.Context) ResourcemanagerFolderIamMemberArrayOutput
}

type ResourcemanagerFolderIamMemberArray []ResourcemanagerFolderIamMemberInput

func (ResourcemanagerFolderIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourcemanagerFolderIamMember)(nil)).Elem()
}

func (i ResourcemanagerFolderIamMemberArray) ToResourcemanagerFolderIamMemberArrayOutput() ResourcemanagerFolderIamMemberArrayOutput {
	return i.ToResourcemanagerFolderIamMemberArrayOutputWithContext(context.Background())
}

func (i ResourcemanagerFolderIamMemberArray) ToResourcemanagerFolderIamMemberArrayOutputWithContext(ctx context.Context) ResourcemanagerFolderIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcemanagerFolderIamMemberArrayOutput)
}

// ResourcemanagerFolderIamMemberMapInput is an input type that accepts ResourcemanagerFolderIamMemberMap and ResourcemanagerFolderIamMemberMapOutput values.
// You can construct a concrete instance of `ResourcemanagerFolderIamMemberMapInput` via:
//
//	ResourcemanagerFolderIamMemberMap{ "key": ResourcemanagerFolderIamMemberArgs{...} }
type ResourcemanagerFolderIamMemberMapInput interface {
	pulumi.Input

	ToResourcemanagerFolderIamMemberMapOutput() ResourcemanagerFolderIamMemberMapOutput
	ToResourcemanagerFolderIamMemberMapOutputWithContext(context.Context) ResourcemanagerFolderIamMemberMapOutput
}

type ResourcemanagerFolderIamMemberMap map[string]ResourcemanagerFolderIamMemberInput

func (ResourcemanagerFolderIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourcemanagerFolderIamMember)(nil)).Elem()
}

func (i ResourcemanagerFolderIamMemberMap) ToResourcemanagerFolderIamMemberMapOutput() ResourcemanagerFolderIamMemberMapOutput {
	return i.ToResourcemanagerFolderIamMemberMapOutputWithContext(context.Background())
}

func (i ResourcemanagerFolderIamMemberMap) ToResourcemanagerFolderIamMemberMapOutputWithContext(ctx context.Context) ResourcemanagerFolderIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcemanagerFolderIamMemberMapOutput)
}

type ResourcemanagerFolderIamMemberOutput struct{ *pulumi.OutputState }

func (ResourcemanagerFolderIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcemanagerFolderIamMember)(nil)).Elem()
}

func (o ResourcemanagerFolderIamMemberOutput) ToResourcemanagerFolderIamMemberOutput() ResourcemanagerFolderIamMemberOutput {
	return o
}

func (o ResourcemanagerFolderIamMemberOutput) ToResourcemanagerFolderIamMemberOutputWithContext(ctx context.Context) ResourcemanagerFolderIamMemberOutput {
	return o
}

// The ID of the folder to attach a policy to.
func (o ResourcemanagerFolderIamMemberOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcemanagerFolderIamMember) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
func (o ResourcemanagerFolderIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcemanagerFolderIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
func (o ResourcemanagerFolderIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcemanagerFolderIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o ResourcemanagerFolderIamMemberOutput) SleepAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourcemanagerFolderIamMember) pulumi.IntPtrOutput { return v.SleepAfter }).(pulumi.IntPtrOutput)
}

type ResourcemanagerFolderIamMemberArrayOutput struct{ *pulumi.OutputState }

func (ResourcemanagerFolderIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourcemanagerFolderIamMember)(nil)).Elem()
}

func (o ResourcemanagerFolderIamMemberArrayOutput) ToResourcemanagerFolderIamMemberArrayOutput() ResourcemanagerFolderIamMemberArrayOutput {
	return o
}

func (o ResourcemanagerFolderIamMemberArrayOutput) ToResourcemanagerFolderIamMemberArrayOutputWithContext(ctx context.Context) ResourcemanagerFolderIamMemberArrayOutput {
	return o
}

func (o ResourcemanagerFolderIamMemberArrayOutput) Index(i pulumi.IntInput) ResourcemanagerFolderIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourcemanagerFolderIamMember {
		return vs[0].([]*ResourcemanagerFolderIamMember)[vs[1].(int)]
	}).(ResourcemanagerFolderIamMemberOutput)
}

type ResourcemanagerFolderIamMemberMapOutput struct{ *pulumi.OutputState }

func (ResourcemanagerFolderIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourcemanagerFolderIamMember)(nil)).Elem()
}

func (o ResourcemanagerFolderIamMemberMapOutput) ToResourcemanagerFolderIamMemberMapOutput() ResourcemanagerFolderIamMemberMapOutput {
	return o
}

func (o ResourcemanagerFolderIamMemberMapOutput) ToResourcemanagerFolderIamMemberMapOutputWithContext(ctx context.Context) ResourcemanagerFolderIamMemberMapOutput {
	return o
}

func (o ResourcemanagerFolderIamMemberMapOutput) MapIndex(k pulumi.StringInput) ResourcemanagerFolderIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourcemanagerFolderIamMember {
		return vs[0].(map[string]*ResourcemanagerFolderIamMember)[vs[1].(string)]
	}).(ResourcemanagerFolderIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcemanagerFolderIamMemberInput)(nil)).Elem(), &ResourcemanagerFolderIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcemanagerFolderIamMemberArrayInput)(nil)).Elem(), ResourcemanagerFolderIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcemanagerFolderIamMemberMapInput)(nil)).Elem(), ResourcemanagerFolderIamMemberMap{})
	pulumi.RegisterOutputType(ResourcemanagerFolderIamMemberOutput{})
	pulumi.RegisterOutputType(ResourcemanagerFolderIamMemberArrayOutput{})
	pulumi.RegisterOutputType(ResourcemanagerFolderIamMemberMapOutput{})
}
