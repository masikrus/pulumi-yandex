// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VpcRouteTable struct {
	pulumi.CustomResourceState

	// The creation timestamp of the resource.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The resource description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the network this route table belongs to.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// A list of static route records for the route table. > Only one of `nextHopAddress` or `gatewayId` should be specified.
	StaticRoutes VpcRouteTableStaticRouteArrayOutput `pulumi:"staticRoutes"`
}

// NewVpcRouteTable registers a new resource with the given unique name, arguments, and options.
func NewVpcRouteTable(ctx *pulumi.Context,
	name string, args *VpcRouteTableArgs, opts ...pulumi.ResourceOption) (*VpcRouteTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcRouteTable
	err := ctx.RegisterResource("yandex:index/vpcRouteTable:VpcRouteTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcRouteTable gets an existing VpcRouteTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcRouteTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcRouteTableState, opts ...pulumi.ResourceOption) (*VpcRouteTable, error) {
	var resource VpcRouteTable
	err := ctx.ReadResource("yandex:index/vpcRouteTable:VpcRouteTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcRouteTable resources.
type vpcRouteTableState struct {
	// The creation timestamp of the resource.
	CreatedAt *string `pulumi:"createdAt"`
	// The resource description.
	Description *string `pulumi:"description"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name.
	Name *string `pulumi:"name"`
	// ID of the network this route table belongs to.
	NetworkId *string `pulumi:"networkId"`
	// A list of static route records for the route table. > Only one of `nextHopAddress` or `gatewayId` should be specified.
	StaticRoutes []VpcRouteTableStaticRoute `pulumi:"staticRoutes"`
}

type VpcRouteTableState struct {
	// The creation timestamp of the resource.
	CreatedAt pulumi.StringPtrInput
	// The resource description.
	Description pulumi.StringPtrInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput
	// The resource name.
	Name pulumi.StringPtrInput
	// ID of the network this route table belongs to.
	NetworkId pulumi.StringPtrInput
	// A list of static route records for the route table. > Only one of `nextHopAddress` or `gatewayId` should be specified.
	StaticRoutes VpcRouteTableStaticRouteArrayInput
}

func (VpcRouteTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcRouteTableState)(nil)).Elem()
}

type vpcRouteTableArgs struct {
	// The resource description.
	Description *string `pulumi:"description"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// The resource name.
	Name *string `pulumi:"name"`
	// ID of the network this route table belongs to.
	NetworkId string `pulumi:"networkId"`
	// A list of static route records for the route table. > Only one of `nextHopAddress` or `gatewayId` should be specified.
	StaticRoutes []VpcRouteTableStaticRoute `pulumi:"staticRoutes"`
}

// The set of arguments for constructing a VpcRouteTable resource.
type VpcRouteTableArgs struct {
	// The resource description.
	Description pulumi.StringPtrInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput
	// The resource name.
	Name pulumi.StringPtrInput
	// ID of the network this route table belongs to.
	NetworkId pulumi.StringInput
	// A list of static route records for the route table. > Only one of `nextHopAddress` or `gatewayId` should be specified.
	StaticRoutes VpcRouteTableStaticRouteArrayInput
}

func (VpcRouteTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcRouteTableArgs)(nil)).Elem()
}

type VpcRouteTableInput interface {
	pulumi.Input

	ToVpcRouteTableOutput() VpcRouteTableOutput
	ToVpcRouteTableOutputWithContext(ctx context.Context) VpcRouteTableOutput
}

func (*VpcRouteTable) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcRouteTable)(nil)).Elem()
}

func (i *VpcRouteTable) ToVpcRouteTableOutput() VpcRouteTableOutput {
	return i.ToVpcRouteTableOutputWithContext(context.Background())
}

func (i *VpcRouteTable) ToVpcRouteTableOutputWithContext(ctx context.Context) VpcRouteTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcRouteTableOutput)
}

// VpcRouteTableArrayInput is an input type that accepts VpcRouteTableArray and VpcRouteTableArrayOutput values.
// You can construct a concrete instance of `VpcRouteTableArrayInput` via:
//
//	VpcRouteTableArray{ VpcRouteTableArgs{...} }
type VpcRouteTableArrayInput interface {
	pulumi.Input

	ToVpcRouteTableArrayOutput() VpcRouteTableArrayOutput
	ToVpcRouteTableArrayOutputWithContext(context.Context) VpcRouteTableArrayOutput
}

type VpcRouteTableArray []VpcRouteTableInput

func (VpcRouteTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcRouteTable)(nil)).Elem()
}

func (i VpcRouteTableArray) ToVpcRouteTableArrayOutput() VpcRouteTableArrayOutput {
	return i.ToVpcRouteTableArrayOutputWithContext(context.Background())
}

func (i VpcRouteTableArray) ToVpcRouteTableArrayOutputWithContext(ctx context.Context) VpcRouteTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcRouteTableArrayOutput)
}

// VpcRouteTableMapInput is an input type that accepts VpcRouteTableMap and VpcRouteTableMapOutput values.
// You can construct a concrete instance of `VpcRouteTableMapInput` via:
//
//	VpcRouteTableMap{ "key": VpcRouteTableArgs{...} }
type VpcRouteTableMapInput interface {
	pulumi.Input

	ToVpcRouteTableMapOutput() VpcRouteTableMapOutput
	ToVpcRouteTableMapOutputWithContext(context.Context) VpcRouteTableMapOutput
}

type VpcRouteTableMap map[string]VpcRouteTableInput

func (VpcRouteTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcRouteTable)(nil)).Elem()
}

func (i VpcRouteTableMap) ToVpcRouteTableMapOutput() VpcRouteTableMapOutput {
	return i.ToVpcRouteTableMapOutputWithContext(context.Background())
}

func (i VpcRouteTableMap) ToVpcRouteTableMapOutputWithContext(ctx context.Context) VpcRouteTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcRouteTableMapOutput)
}

type VpcRouteTableOutput struct{ *pulumi.OutputState }

func (VpcRouteTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcRouteTable)(nil)).Elem()
}

func (o VpcRouteTableOutput) ToVpcRouteTableOutput() VpcRouteTableOutput {
	return o
}

func (o VpcRouteTableOutput) ToVpcRouteTableOutputWithContext(ctx context.Context) VpcRouteTableOutput {
	return o
}

// The creation timestamp of the resource.
func (o VpcRouteTableOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcRouteTable) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The resource description.
func (o VpcRouteTableOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcRouteTable) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o VpcRouteTableOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcRouteTable) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o VpcRouteTableOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpcRouteTable) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name.
func (o VpcRouteTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcRouteTable) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of the network this route table belongs to.
func (o VpcRouteTableOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcRouteTable) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// A list of static route records for the route table. > Only one of `nextHopAddress` or `gatewayId` should be specified.
func (o VpcRouteTableOutput) StaticRoutes() VpcRouteTableStaticRouteArrayOutput {
	return o.ApplyT(func(v *VpcRouteTable) VpcRouteTableStaticRouteArrayOutput { return v.StaticRoutes }).(VpcRouteTableStaticRouteArrayOutput)
}

type VpcRouteTableArrayOutput struct{ *pulumi.OutputState }

func (VpcRouteTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcRouteTable)(nil)).Elem()
}

func (o VpcRouteTableArrayOutput) ToVpcRouteTableArrayOutput() VpcRouteTableArrayOutput {
	return o
}

func (o VpcRouteTableArrayOutput) ToVpcRouteTableArrayOutputWithContext(ctx context.Context) VpcRouteTableArrayOutput {
	return o
}

func (o VpcRouteTableArrayOutput) Index(i pulumi.IntInput) VpcRouteTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcRouteTable {
		return vs[0].([]*VpcRouteTable)[vs[1].(int)]
	}).(VpcRouteTableOutput)
}

type VpcRouteTableMapOutput struct{ *pulumi.OutputState }

func (VpcRouteTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcRouteTable)(nil)).Elem()
}

func (o VpcRouteTableMapOutput) ToVpcRouteTableMapOutput() VpcRouteTableMapOutput {
	return o
}

func (o VpcRouteTableMapOutput) ToVpcRouteTableMapOutputWithContext(ctx context.Context) VpcRouteTableMapOutput {
	return o
}

func (o VpcRouteTableMapOutput) MapIndex(k pulumi.StringInput) VpcRouteTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcRouteTable {
		return vs[0].(map[string]*VpcRouteTable)[vs[1].(string)]
	}).(VpcRouteTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcRouteTableInput)(nil)).Elem(), &VpcRouteTable{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcRouteTableArrayInput)(nil)).Elem(), VpcRouteTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcRouteTableMapInput)(nil)).Elem(), VpcRouteTableMap{})
	pulumi.RegisterOutputType(VpcRouteTableOutput{})
	pulumi.RegisterOutputType(VpcRouteTableArrayOutput{})
	pulumi.RegisterOutputType(VpcRouteTableMapOutput{})
}
