// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IamServiceAccountIamMember struct {
	pulumi.CustomResourceState

	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member pulumi.StringOutput `pulumi:"member"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role pulumi.StringOutput `pulumi:"role"`
	// The service account ID to apply a binding to.
	ServiceAccountId pulumi.StringOutput `pulumi:"serviceAccountId"`
	SleepAfter       pulumi.IntPtrOutput `pulumi:"sleepAfter"`
}

// NewIamServiceAccountIamMember registers a new resource with the given unique name, arguments, and options.
func NewIamServiceAccountIamMember(ctx *pulumi.Context,
	name string, args *IamServiceAccountIamMemberArgs, opts ...pulumi.ResourceOption) (*IamServiceAccountIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.ServiceAccountId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceAccountId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IamServiceAccountIamMember
	err := ctx.RegisterResource("yandex:index/iamServiceAccountIamMember:IamServiceAccountIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamServiceAccountIamMember gets an existing IamServiceAccountIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamServiceAccountIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamServiceAccountIamMemberState, opts ...pulumi.ResourceOption) (*IamServiceAccountIamMember, error) {
	var resource IamServiceAccountIamMember
	err := ctx.ReadResource("yandex:index/iamServiceAccountIamMember:IamServiceAccountIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamServiceAccountIamMember resources.
type iamServiceAccountIamMemberState struct {
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member *string `pulumi:"member"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role *string `pulumi:"role"`
	// The service account ID to apply a binding to.
	ServiceAccountId *string `pulumi:"serviceAccountId"`
	SleepAfter       *int    `pulumi:"sleepAfter"`
}

type IamServiceAccountIamMemberState struct {
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member pulumi.StringPtrInput
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role pulumi.StringPtrInput
	// The service account ID to apply a binding to.
	ServiceAccountId pulumi.StringPtrInput
	SleepAfter       pulumi.IntPtrInput
}

func (IamServiceAccountIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamServiceAccountIamMemberState)(nil)).Elem()
}

type iamServiceAccountIamMemberArgs struct {
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member string `pulumi:"member"`
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role string `pulumi:"role"`
	// The service account ID to apply a binding to.
	ServiceAccountId string `pulumi:"serviceAccountId"`
	SleepAfter       *int   `pulumi:"sleepAfter"`
}

// The set of arguments for constructing a IamServiceAccountIamMember resource.
type IamServiceAccountIamMemberArgs struct {
	// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
	// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
	// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
	// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
	// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
	// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
	// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
	// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
	Member pulumi.StringInput
	// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
	Role pulumi.StringInput
	// The service account ID to apply a binding to.
	ServiceAccountId pulumi.StringInput
	SleepAfter       pulumi.IntPtrInput
}

func (IamServiceAccountIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamServiceAccountIamMemberArgs)(nil)).Elem()
}

type IamServiceAccountIamMemberInput interface {
	pulumi.Input

	ToIamServiceAccountIamMemberOutput() IamServiceAccountIamMemberOutput
	ToIamServiceAccountIamMemberOutputWithContext(ctx context.Context) IamServiceAccountIamMemberOutput
}

func (*IamServiceAccountIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**IamServiceAccountIamMember)(nil)).Elem()
}

func (i *IamServiceAccountIamMember) ToIamServiceAccountIamMemberOutput() IamServiceAccountIamMemberOutput {
	return i.ToIamServiceAccountIamMemberOutputWithContext(context.Background())
}

func (i *IamServiceAccountIamMember) ToIamServiceAccountIamMemberOutputWithContext(ctx context.Context) IamServiceAccountIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamServiceAccountIamMemberOutput)
}

// IamServiceAccountIamMemberArrayInput is an input type that accepts IamServiceAccountIamMemberArray and IamServiceAccountIamMemberArrayOutput values.
// You can construct a concrete instance of `IamServiceAccountIamMemberArrayInput` via:
//
//	IamServiceAccountIamMemberArray{ IamServiceAccountIamMemberArgs{...} }
type IamServiceAccountIamMemberArrayInput interface {
	pulumi.Input

	ToIamServiceAccountIamMemberArrayOutput() IamServiceAccountIamMemberArrayOutput
	ToIamServiceAccountIamMemberArrayOutputWithContext(context.Context) IamServiceAccountIamMemberArrayOutput
}

type IamServiceAccountIamMemberArray []IamServiceAccountIamMemberInput

func (IamServiceAccountIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamServiceAccountIamMember)(nil)).Elem()
}

func (i IamServiceAccountIamMemberArray) ToIamServiceAccountIamMemberArrayOutput() IamServiceAccountIamMemberArrayOutput {
	return i.ToIamServiceAccountIamMemberArrayOutputWithContext(context.Background())
}

func (i IamServiceAccountIamMemberArray) ToIamServiceAccountIamMemberArrayOutputWithContext(ctx context.Context) IamServiceAccountIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamServiceAccountIamMemberArrayOutput)
}

// IamServiceAccountIamMemberMapInput is an input type that accepts IamServiceAccountIamMemberMap and IamServiceAccountIamMemberMapOutput values.
// You can construct a concrete instance of `IamServiceAccountIamMemberMapInput` via:
//
//	IamServiceAccountIamMemberMap{ "key": IamServiceAccountIamMemberArgs{...} }
type IamServiceAccountIamMemberMapInput interface {
	pulumi.Input

	ToIamServiceAccountIamMemberMapOutput() IamServiceAccountIamMemberMapOutput
	ToIamServiceAccountIamMemberMapOutputWithContext(context.Context) IamServiceAccountIamMemberMapOutput
}

type IamServiceAccountIamMemberMap map[string]IamServiceAccountIamMemberInput

func (IamServiceAccountIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamServiceAccountIamMember)(nil)).Elem()
}

func (i IamServiceAccountIamMemberMap) ToIamServiceAccountIamMemberMapOutput() IamServiceAccountIamMemberMapOutput {
	return i.ToIamServiceAccountIamMemberMapOutputWithContext(context.Background())
}

func (i IamServiceAccountIamMemberMap) ToIamServiceAccountIamMemberMapOutputWithContext(ctx context.Context) IamServiceAccountIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamServiceAccountIamMemberMapOutput)
}

type IamServiceAccountIamMemberOutput struct{ *pulumi.OutputState }

func (IamServiceAccountIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamServiceAccountIamMember)(nil)).Elem()
}

func (o IamServiceAccountIamMemberOutput) ToIamServiceAccountIamMemberOutput() IamServiceAccountIamMemberOutput {
	return o
}

func (o IamServiceAccountIamMemberOutput) ToIamServiceAccountIamMemberOutputWithContext(ctx context.Context) IamServiceAccountIamMemberOutput {
	return o
}

// An array of identities that will be granted the privilege in the `role`. Each entry can have one of the following
// values: * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account. *
// **serviceAccount:{service_account_id}**: A unique service account ID. * **federatedUser:{federated_user_id}**: A unique
// federated user ID. * **federatedUser:{federated_user_id}:**: A unique SAML federation user account ID. *
// **group:{group_id}**: A unique group ID. * **system:group:federation:{federation_id}:users**: All users in federation. *
// **system:group:organization:{organization_id}:users**: All users in organization. * **system:allAuthenticatedUsers**:
// All authenticated users. * **system:allUsers**: All users, including unauthenticated ones. > for more information about
// system groups, see [Cloud Documentation](https://yandex.cloud/docs/iam/concepts/access-control/system-group).
func (o IamServiceAccountIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *IamServiceAccountIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The role that should be applied. See [roles catalog](https://yandex.cloud/docs/iam/roles-reference).
func (o IamServiceAccountIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *IamServiceAccountIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// The service account ID to apply a binding to.
func (o IamServiceAccountIamMemberOutput) ServiceAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *IamServiceAccountIamMember) pulumi.StringOutput { return v.ServiceAccountId }).(pulumi.StringOutput)
}

func (o IamServiceAccountIamMemberOutput) SleepAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IamServiceAccountIamMember) pulumi.IntPtrOutput { return v.SleepAfter }).(pulumi.IntPtrOutput)
}

type IamServiceAccountIamMemberArrayOutput struct{ *pulumi.OutputState }

func (IamServiceAccountIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamServiceAccountIamMember)(nil)).Elem()
}

func (o IamServiceAccountIamMemberArrayOutput) ToIamServiceAccountIamMemberArrayOutput() IamServiceAccountIamMemberArrayOutput {
	return o
}

func (o IamServiceAccountIamMemberArrayOutput) ToIamServiceAccountIamMemberArrayOutputWithContext(ctx context.Context) IamServiceAccountIamMemberArrayOutput {
	return o
}

func (o IamServiceAccountIamMemberArrayOutput) Index(i pulumi.IntInput) IamServiceAccountIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamServiceAccountIamMember {
		return vs[0].([]*IamServiceAccountIamMember)[vs[1].(int)]
	}).(IamServiceAccountIamMemberOutput)
}

type IamServiceAccountIamMemberMapOutput struct{ *pulumi.OutputState }

func (IamServiceAccountIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamServiceAccountIamMember)(nil)).Elem()
}

func (o IamServiceAccountIamMemberMapOutput) ToIamServiceAccountIamMemberMapOutput() IamServiceAccountIamMemberMapOutput {
	return o
}

func (o IamServiceAccountIamMemberMapOutput) ToIamServiceAccountIamMemberMapOutputWithContext(ctx context.Context) IamServiceAccountIamMemberMapOutput {
	return o
}

func (o IamServiceAccountIamMemberMapOutput) MapIndex(k pulumi.StringInput) IamServiceAccountIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamServiceAccountIamMember {
		return vs[0].(map[string]*IamServiceAccountIamMember)[vs[1].(string)]
	}).(IamServiceAccountIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamServiceAccountIamMemberInput)(nil)).Elem(), &IamServiceAccountIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamServiceAccountIamMemberArrayInput)(nil)).Elem(), IamServiceAccountIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamServiceAccountIamMemberMapInput)(nil)).Elem(), IamServiceAccountIamMemberMap{})
	pulumi.RegisterOutputType(IamServiceAccountIamMemberOutput{})
	pulumi.RegisterOutputType(IamServiceAccountIamMemberArrayOutput{})
	pulumi.RegisterOutputType(IamServiceAccountIamMemberMapOutput{})
}
