// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-yandex/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AlbLoadBalancer struct {
	pulumi.CustomResourceState

	// Allocation zones for the Load Balancer instance.
	AllocationPolicy AlbLoadBalancerAllocationPolicyOutput `pulumi:"allocationPolicy"`
	// Specifies whether application load balancer is available to zonal shift
	AllowZonalShift pulumi.BoolPtrOutput `pulumi:"allowZonalShift"`
	// The creation timestamp of the resource.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The resource description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// List of listeners for the Load Balancer.
	Listeners AlbLoadBalancerListenerArrayOutput `pulumi:"listeners"`
	// Cloud Logging group ID to send logs to. Leave empty to use the balancer folder default log group.
	LogGroupId pulumi.StringOutput `pulumi:"logGroupId"`
	// Cloud Logging settings.
	LogOptions AlbLoadBalancerLogOptionsPtrOutput `pulumi:"logOptions"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// The region ID where Load Balancer is located at.
	RegionId pulumi.StringPtrOutput `pulumi:"regionId"`
	// The list of security groups applied to resource or their components.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// Status of the Load Balancer.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewAlbLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewAlbLoadBalancer(ctx *pulumi.Context,
	name string, args *AlbLoadBalancerArgs, opts ...pulumi.ResourceOption) (*AlbLoadBalancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllocationPolicy == nil {
		return nil, errors.New("invalid value for required argument 'AllocationPolicy'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AlbLoadBalancer
	err := ctx.RegisterResource("yandex:index/albLoadBalancer:AlbLoadBalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlbLoadBalancer gets an existing AlbLoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlbLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlbLoadBalancerState, opts ...pulumi.ResourceOption) (*AlbLoadBalancer, error) {
	var resource AlbLoadBalancer
	err := ctx.ReadResource("yandex:index/albLoadBalancer:AlbLoadBalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlbLoadBalancer resources.
type albLoadBalancerState struct {
	// Allocation zones for the Load Balancer instance.
	AllocationPolicy *AlbLoadBalancerAllocationPolicy `pulumi:"allocationPolicy"`
	// Specifies whether application load balancer is available to zonal shift
	AllowZonalShift *bool `pulumi:"allowZonalShift"`
	// The creation timestamp of the resource.
	CreatedAt *string `pulumi:"createdAt"`
	// The resource description.
	Description *string `pulumi:"description"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// List of listeners for the Load Balancer.
	Listeners []AlbLoadBalancerListener `pulumi:"listeners"`
	// Cloud Logging group ID to send logs to. Leave empty to use the balancer folder default log group.
	LogGroupId *string `pulumi:"logGroupId"`
	// Cloud Logging settings.
	LogOptions *AlbLoadBalancerLogOptions `pulumi:"logOptions"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId *string `pulumi:"networkId"`
	// The region ID where Load Balancer is located at.
	RegionId *string `pulumi:"regionId"`
	// The list of security groups applied to resource or their components.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Status of the Load Balancer.
	Status *string `pulumi:"status"`
}

type AlbLoadBalancerState struct {
	// Allocation zones for the Load Balancer instance.
	AllocationPolicy AlbLoadBalancerAllocationPolicyPtrInput
	// Specifies whether application load balancer is available to zonal shift
	AllowZonalShift pulumi.BoolPtrInput
	// The creation timestamp of the resource.
	CreatedAt pulumi.StringPtrInput
	// The resource description.
	Description pulumi.StringPtrInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput
	// List of listeners for the Load Balancer.
	Listeners AlbLoadBalancerListenerArrayInput
	// Cloud Logging group ID to send logs to. Leave empty to use the balancer folder default log group.
	LogGroupId pulumi.StringPtrInput
	// Cloud Logging settings.
	LogOptions AlbLoadBalancerLogOptionsPtrInput
	// The resource name.
	Name pulumi.StringPtrInput
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId pulumi.StringPtrInput
	// The region ID where Load Balancer is located at.
	RegionId pulumi.StringPtrInput
	// The list of security groups applied to resource or their components.
	SecurityGroupIds pulumi.StringArrayInput
	// Status of the Load Balancer.
	Status pulumi.StringPtrInput
}

func (AlbLoadBalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*albLoadBalancerState)(nil)).Elem()
}

type albLoadBalancerArgs struct {
	// Allocation zones for the Load Balancer instance.
	AllocationPolicy AlbLoadBalancerAllocationPolicy `pulumi:"allocationPolicy"`
	// Specifies whether application load balancer is available to zonal shift
	AllowZonalShift *bool `pulumi:"allowZonalShift"`
	// The resource description.
	Description *string `pulumi:"description"`
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId *string `pulumi:"folderId"`
	// A set of key/value label pairs which assigned to resource.
	Labels map[string]string `pulumi:"labels"`
	// List of listeners for the Load Balancer.
	Listeners []AlbLoadBalancerListener `pulumi:"listeners"`
	// Cloud Logging settings.
	LogOptions *AlbLoadBalancerLogOptions `pulumi:"logOptions"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId string `pulumi:"networkId"`
	// The region ID where Load Balancer is located at.
	RegionId *string `pulumi:"regionId"`
	// The list of security groups applied to resource or their components.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
}

// The set of arguments for constructing a AlbLoadBalancer resource.
type AlbLoadBalancerArgs struct {
	// Allocation zones for the Load Balancer instance.
	AllocationPolicy AlbLoadBalancerAllocationPolicyInput
	// Specifies whether application load balancer is available to zonal shift
	AllowZonalShift pulumi.BoolPtrInput
	// The resource description.
	Description pulumi.StringPtrInput
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderId pulumi.StringPtrInput
	// A set of key/value label pairs which assigned to resource.
	Labels pulumi.StringMapInput
	// List of listeners for the Load Balancer.
	Listeners AlbLoadBalancerListenerArrayInput
	// Cloud Logging settings.
	LogOptions AlbLoadBalancerLogOptionsPtrInput
	// The resource name.
	Name pulumi.StringPtrInput
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkId pulumi.StringInput
	// The region ID where Load Balancer is located at.
	RegionId pulumi.StringPtrInput
	// The list of security groups applied to resource or their components.
	SecurityGroupIds pulumi.StringArrayInput
}

func (AlbLoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*albLoadBalancerArgs)(nil)).Elem()
}

type AlbLoadBalancerInput interface {
	pulumi.Input

	ToAlbLoadBalancerOutput() AlbLoadBalancerOutput
	ToAlbLoadBalancerOutputWithContext(ctx context.Context) AlbLoadBalancerOutput
}

func (*AlbLoadBalancer) ElementType() reflect.Type {
	return reflect.TypeOf((**AlbLoadBalancer)(nil)).Elem()
}

func (i *AlbLoadBalancer) ToAlbLoadBalancerOutput() AlbLoadBalancerOutput {
	return i.ToAlbLoadBalancerOutputWithContext(context.Background())
}

func (i *AlbLoadBalancer) ToAlbLoadBalancerOutputWithContext(ctx context.Context) AlbLoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlbLoadBalancerOutput)
}

// AlbLoadBalancerArrayInput is an input type that accepts AlbLoadBalancerArray and AlbLoadBalancerArrayOutput values.
// You can construct a concrete instance of `AlbLoadBalancerArrayInput` via:
//
//	AlbLoadBalancerArray{ AlbLoadBalancerArgs{...} }
type AlbLoadBalancerArrayInput interface {
	pulumi.Input

	ToAlbLoadBalancerArrayOutput() AlbLoadBalancerArrayOutput
	ToAlbLoadBalancerArrayOutputWithContext(context.Context) AlbLoadBalancerArrayOutput
}

type AlbLoadBalancerArray []AlbLoadBalancerInput

func (AlbLoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlbLoadBalancer)(nil)).Elem()
}

func (i AlbLoadBalancerArray) ToAlbLoadBalancerArrayOutput() AlbLoadBalancerArrayOutput {
	return i.ToAlbLoadBalancerArrayOutputWithContext(context.Background())
}

func (i AlbLoadBalancerArray) ToAlbLoadBalancerArrayOutputWithContext(ctx context.Context) AlbLoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlbLoadBalancerArrayOutput)
}

// AlbLoadBalancerMapInput is an input type that accepts AlbLoadBalancerMap and AlbLoadBalancerMapOutput values.
// You can construct a concrete instance of `AlbLoadBalancerMapInput` via:
//
//	AlbLoadBalancerMap{ "key": AlbLoadBalancerArgs{...} }
type AlbLoadBalancerMapInput interface {
	pulumi.Input

	ToAlbLoadBalancerMapOutput() AlbLoadBalancerMapOutput
	ToAlbLoadBalancerMapOutputWithContext(context.Context) AlbLoadBalancerMapOutput
}

type AlbLoadBalancerMap map[string]AlbLoadBalancerInput

func (AlbLoadBalancerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlbLoadBalancer)(nil)).Elem()
}

func (i AlbLoadBalancerMap) ToAlbLoadBalancerMapOutput() AlbLoadBalancerMapOutput {
	return i.ToAlbLoadBalancerMapOutputWithContext(context.Background())
}

func (i AlbLoadBalancerMap) ToAlbLoadBalancerMapOutputWithContext(ctx context.Context) AlbLoadBalancerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlbLoadBalancerMapOutput)
}

type AlbLoadBalancerOutput struct{ *pulumi.OutputState }

func (AlbLoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlbLoadBalancer)(nil)).Elem()
}

func (o AlbLoadBalancerOutput) ToAlbLoadBalancerOutput() AlbLoadBalancerOutput {
	return o
}

func (o AlbLoadBalancerOutput) ToAlbLoadBalancerOutputWithContext(ctx context.Context) AlbLoadBalancerOutput {
	return o
}

// Allocation zones for the Load Balancer instance.
func (o AlbLoadBalancerOutput) AllocationPolicy() AlbLoadBalancerAllocationPolicyOutput {
	return o.ApplyT(func(v *AlbLoadBalancer) AlbLoadBalancerAllocationPolicyOutput { return v.AllocationPolicy }).(AlbLoadBalancerAllocationPolicyOutput)
}

// Specifies whether application load balancer is available to zonal shift
func (o AlbLoadBalancerOutput) AllowZonalShift() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlbLoadBalancer) pulumi.BoolPtrOutput { return v.AllowZonalShift }).(pulumi.BoolPtrOutput)
}

// The creation timestamp of the resource.
func (o AlbLoadBalancerOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *AlbLoadBalancer) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The resource description.
func (o AlbLoadBalancerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlbLoadBalancer) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
func (o AlbLoadBalancerOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *AlbLoadBalancer) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

// A set of key/value label pairs which assigned to resource.
func (o AlbLoadBalancerOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlbLoadBalancer) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// List of listeners for the Load Balancer.
func (o AlbLoadBalancerOutput) Listeners() AlbLoadBalancerListenerArrayOutput {
	return o.ApplyT(func(v *AlbLoadBalancer) AlbLoadBalancerListenerArrayOutput { return v.Listeners }).(AlbLoadBalancerListenerArrayOutput)
}

// Cloud Logging group ID to send logs to. Leave empty to use the balancer folder default log group.
func (o AlbLoadBalancerOutput) LogGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *AlbLoadBalancer) pulumi.StringOutput { return v.LogGroupId }).(pulumi.StringOutput)
}

// Cloud Logging settings.
func (o AlbLoadBalancerOutput) LogOptions() AlbLoadBalancerLogOptionsPtrOutput {
	return o.ApplyT(func(v *AlbLoadBalancer) AlbLoadBalancerLogOptionsPtrOutput { return v.LogOptions }).(AlbLoadBalancerLogOptionsPtrOutput)
}

// The resource name.
func (o AlbLoadBalancerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AlbLoadBalancer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The `VPC Network ID` of subnets which resource attached to.
func (o AlbLoadBalancerOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *AlbLoadBalancer) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// The region ID where Load Balancer is located at.
func (o AlbLoadBalancerOutput) RegionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlbLoadBalancer) pulumi.StringPtrOutput { return v.RegionId }).(pulumi.StringPtrOutput)
}

// The list of security groups applied to resource or their components.
func (o AlbLoadBalancerOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlbLoadBalancer) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// Status of the Load Balancer.
func (o AlbLoadBalancerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AlbLoadBalancer) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type AlbLoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (AlbLoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlbLoadBalancer)(nil)).Elem()
}

func (o AlbLoadBalancerArrayOutput) ToAlbLoadBalancerArrayOutput() AlbLoadBalancerArrayOutput {
	return o
}

func (o AlbLoadBalancerArrayOutput) ToAlbLoadBalancerArrayOutputWithContext(ctx context.Context) AlbLoadBalancerArrayOutput {
	return o
}

func (o AlbLoadBalancerArrayOutput) Index(i pulumi.IntInput) AlbLoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AlbLoadBalancer {
		return vs[0].([]*AlbLoadBalancer)[vs[1].(int)]
	}).(AlbLoadBalancerOutput)
}

type AlbLoadBalancerMapOutput struct{ *pulumi.OutputState }

func (AlbLoadBalancerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlbLoadBalancer)(nil)).Elem()
}

func (o AlbLoadBalancerMapOutput) ToAlbLoadBalancerMapOutput() AlbLoadBalancerMapOutput {
	return o
}

func (o AlbLoadBalancerMapOutput) ToAlbLoadBalancerMapOutputWithContext(ctx context.Context) AlbLoadBalancerMapOutput {
	return o
}

func (o AlbLoadBalancerMapOutput) MapIndex(k pulumi.StringInput) AlbLoadBalancerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AlbLoadBalancer {
		return vs[0].(map[string]*AlbLoadBalancer)[vs[1].(string)]
	}).(AlbLoadBalancerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlbLoadBalancerInput)(nil)).Elem(), &AlbLoadBalancer{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlbLoadBalancerArrayInput)(nil)).Elem(), AlbLoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlbLoadBalancerMapInput)(nil)).Elem(), AlbLoadBalancerMap{})
	pulumi.RegisterOutputType(AlbLoadBalancerOutput{})
	pulumi.RegisterOutputType(AlbLoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(AlbLoadBalancerMapOutput{})
}
