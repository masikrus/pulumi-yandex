// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServerlessEventrouterRule extends pulumi.CustomResource {
    /**
     * Get an existing ServerlessEventrouterRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerlessEventrouterRuleState, opts?: pulumi.CustomResourceOptions): ServerlessEventrouterRule {
        return new ServerlessEventrouterRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/serverlessEventrouterRule:ServerlessEventrouterRule';

    /**
     * Returns true if the given object is an instance of ServerlessEventrouterRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerlessEventrouterRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerlessEventrouterRule.__pulumiType;
    }

    /**
     * ID of the bus that the rule belongs to
     */
    public readonly busId!: pulumi.Output<string>;
    /**
     * ID of the cloud that the rule resides in
     */
    public /*out*/ readonly cloudId!: pulumi.Output<string>;
    /**
     * ContainerTarget
     */
    public readonly containers!: pulumi.Output<outputs.ServerlessEventrouterRuleContainer[] | undefined>;
    /**
     * Creation timestamp
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Deletion protection
     */
    public /*out*/ readonly deletionProtection!: pulumi.Output<boolean>;
    /**
     * Description of the rule
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * ID of the folder that the rule resides in
     */
    public /*out*/ readonly folderId!: pulumi.Output<string>;
    /**
     * FunctionTarget
     */
    public readonly functions!: pulumi.Output<outputs.ServerlessEventrouterRuleFunction[] | undefined>;
    /**
     * GatewayWebsocketBroadcastTarget
     */
    public readonly gatewayWebsocketBroadcasts!: pulumi.Output<outputs.ServerlessEventrouterRuleGatewayWebsocketBroadcast[] | undefined>;
    /**
     * JQ filter for matching events
     */
    public readonly jqFilter!: pulumi.Output<string | undefined>;
    /**
     * Rule labels
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * LoggingTarget. Includes either logGroupId or folder_id
     */
    public readonly loggings!: pulumi.Output<outputs.ServerlessEventrouterRuleLogging[] | undefined>;
    /**
     * Name of the rule
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * WorkflowTarget
     */
    public readonly workflows!: pulumi.Output<outputs.ServerlessEventrouterRuleWorkflow[] | undefined>;
    /**
     * YdsTarget
     */
    public readonly yds!: pulumi.Output<outputs.ServerlessEventrouterRuleYd[] | undefined>;
    /**
     * YmqTarget
     */
    public readonly ymqs!: pulumi.Output<outputs.ServerlessEventrouterRuleYmq[] | undefined>;

    /**
     * Create a ServerlessEventrouterRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerlessEventrouterRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerlessEventrouterRuleArgs | ServerlessEventrouterRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerlessEventrouterRuleState | undefined;
            resourceInputs["busId"] = state ? state.busId : undefined;
            resourceInputs["cloudId"] = state ? state.cloudId : undefined;
            resourceInputs["containers"] = state ? state.containers : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["folderId"] = state ? state.folderId : undefined;
            resourceInputs["functions"] = state ? state.functions : undefined;
            resourceInputs["gatewayWebsocketBroadcasts"] = state ? state.gatewayWebsocketBroadcasts : undefined;
            resourceInputs["jqFilter"] = state ? state.jqFilter : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["loggings"] = state ? state.loggings : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["workflows"] = state ? state.workflows : undefined;
            resourceInputs["yds"] = state ? state.yds : undefined;
            resourceInputs["ymqs"] = state ? state.ymqs : undefined;
        } else {
            const args = argsOrState as ServerlessEventrouterRuleArgs | undefined;
            if ((!args || args.busId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'busId'");
            }
            resourceInputs["busId"] = args ? args.busId : undefined;
            resourceInputs["containers"] = args ? args.containers : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["functions"] = args ? args.functions : undefined;
            resourceInputs["gatewayWebsocketBroadcasts"] = args ? args.gatewayWebsocketBroadcasts : undefined;
            resourceInputs["jqFilter"] = args ? args.jqFilter : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["loggings"] = args ? args.loggings : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["workflows"] = args ? args.workflows : undefined;
            resourceInputs["yds"] = args ? args.yds : undefined;
            resourceInputs["ymqs"] = args ? args.ymqs : undefined;
            resourceInputs["cloudId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["deletionProtection"] = undefined /*out*/;
            resourceInputs["folderId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerlessEventrouterRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServerlessEventrouterRule resources.
 */
export interface ServerlessEventrouterRuleState {
    /**
     * ID of the bus that the rule belongs to
     */
    busId?: pulumi.Input<string>;
    /**
     * ID of the cloud that the rule resides in
     */
    cloudId?: pulumi.Input<string>;
    /**
     * ContainerTarget
     */
    containers?: pulumi.Input<pulumi.Input<inputs.ServerlessEventrouterRuleContainer>[]>;
    /**
     * Creation timestamp
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Deletion protection
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * Description of the rule
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the folder that the rule resides in
     */
    folderId?: pulumi.Input<string>;
    /**
     * FunctionTarget
     */
    functions?: pulumi.Input<pulumi.Input<inputs.ServerlessEventrouterRuleFunction>[]>;
    /**
     * GatewayWebsocketBroadcastTarget
     */
    gatewayWebsocketBroadcasts?: pulumi.Input<pulumi.Input<inputs.ServerlessEventrouterRuleGatewayWebsocketBroadcast>[]>;
    /**
     * JQ filter for matching events
     */
    jqFilter?: pulumi.Input<string>;
    /**
     * Rule labels
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * LoggingTarget. Includes either logGroupId or folder_id
     */
    loggings?: pulumi.Input<pulumi.Input<inputs.ServerlessEventrouterRuleLogging>[]>;
    /**
     * Name of the rule
     */
    name?: pulumi.Input<string>;
    /**
     * WorkflowTarget
     */
    workflows?: pulumi.Input<pulumi.Input<inputs.ServerlessEventrouterRuleWorkflow>[]>;
    /**
     * YdsTarget
     */
    yds?: pulumi.Input<pulumi.Input<inputs.ServerlessEventrouterRuleYd>[]>;
    /**
     * YmqTarget
     */
    ymqs?: pulumi.Input<pulumi.Input<inputs.ServerlessEventrouterRuleYmq>[]>;
}

/**
 * The set of arguments for constructing a ServerlessEventrouterRule resource.
 */
export interface ServerlessEventrouterRuleArgs {
    /**
     * ID of the bus that the rule belongs to
     */
    busId: pulumi.Input<string>;
    /**
     * ContainerTarget
     */
    containers?: pulumi.Input<pulumi.Input<inputs.ServerlessEventrouterRuleContainer>[]>;
    /**
     * Description of the rule
     */
    description?: pulumi.Input<string>;
    /**
     * FunctionTarget
     */
    functions?: pulumi.Input<pulumi.Input<inputs.ServerlessEventrouterRuleFunction>[]>;
    /**
     * GatewayWebsocketBroadcastTarget
     */
    gatewayWebsocketBroadcasts?: pulumi.Input<pulumi.Input<inputs.ServerlessEventrouterRuleGatewayWebsocketBroadcast>[]>;
    /**
     * JQ filter for matching events
     */
    jqFilter?: pulumi.Input<string>;
    /**
     * Rule labels
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * LoggingTarget. Includes either logGroupId or folder_id
     */
    loggings?: pulumi.Input<pulumi.Input<inputs.ServerlessEventrouterRuleLogging>[]>;
    /**
     * Name of the rule
     */
    name?: pulumi.Input<string>;
    /**
     * WorkflowTarget
     */
    workflows?: pulumi.Input<pulumi.Input<inputs.ServerlessEventrouterRuleWorkflow>[]>;
    /**
     * YdsTarget
     */
    yds?: pulumi.Input<pulumi.Input<inputs.ServerlessEventrouterRuleYd>[]>;
    /**
     * YmqTarget
     */
    ymqs?: pulumi.Input<pulumi.Input<inputs.ServerlessEventrouterRuleYmq>[]>;
}
