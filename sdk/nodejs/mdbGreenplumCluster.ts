// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MdbGreenplumCluster extends pulumi.CustomResource {
    /**
     * Get an existing MdbGreenplumCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdbGreenplumClusterState, opts?: pulumi.CustomResourceOptions): MdbGreenplumCluster {
        return new MdbGreenplumCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/mdbGreenplumCluster:MdbGreenplumCluster';

    /**
     * Returns true if the given object is an instance of MdbGreenplumCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdbGreenplumCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdbGreenplumCluster.__pulumiType;
    }

    /**
     * Access policy to the Greenplum cluster.
     */
    public readonly access!: pulumi.Output<outputs.MdbGreenplumClusterAccess>;
    /**
     * Sets whether the master hosts should get a public IP address on creation. Changing this parameter for an existing host
     * is not supported at the moment.
     */
    public readonly assignPublicIp!: pulumi.Output<boolean>;
    /**
     * Background activities settings.
     */
    public readonly backgroundActivities!: pulumi.Output<outputs.MdbGreenplumClusterBackgroundActivity[] | undefined>;
    /**
     * Time to start the daily backup, in the UTC timezone.
     */
    public readonly backupWindowStart!: pulumi.Output<outputs.MdbGreenplumClusterBackupWindowStart>;
    /**
     * Cloud Storage settings of the Greenplum cluster.
     */
    public readonly cloudStorage!: pulumi.Output<outputs.MdbGreenplumClusterCloudStorage>;
    /**
     * The creation timestamp of the resource.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    public readonly deletionProtection!: pulumi.Output<boolean>;
    /**
     * The resource description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Deployment environment of the Greenplum cluster. (PRODUCTION, PRESTABLE)
     */
    public readonly environment!: pulumi.Output<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    public readonly folderId!: pulumi.Output<string>;
    /**
     * Greenplum cluster config. Detail info in `Greenplum cluster settings` block.
     */
    public readonly greenplumConfig!: pulumi.Output<{[key: string]: string}>;
    /**
     * Aggregated health of the cluster.
     */
    public /*out*/ readonly health!: pulumi.Output<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly logging!: pulumi.Output<outputs.MdbGreenplumClusterLogging>;
    /**
     * Maintenance policy of the Greenplum cluster.
     */
    public readonly maintenanceWindow!: pulumi.Output<outputs.MdbGreenplumClusterMaintenanceWindow>;
    /**
     * Number of hosts in master subcluster (1 or 2).
     */
    public readonly masterHostCount!: pulumi.Output<number>;
    /**
     * A list of IDs of the host groups to place master subclusters' VMs of the cluster on.
     */
    public readonly masterHostGroupIds!: pulumi.Output<string[]>;
    /**
     * Info about hosts in master subcluster.
     */
    public /*out*/ readonly masterHosts!: pulumi.Output<outputs.MdbGreenplumClusterMasterHost[]>;
    /**
     * Settings for master subcluster.
     */
    public readonly masterSubcluster!: pulumi.Output<outputs.MdbGreenplumClusterMasterSubcluster>;
    /**
     * The resource name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * Configuration of the connection pooler.
     */
    public readonly poolerConfig!: pulumi.Output<outputs.MdbGreenplumClusterPoolerConfig>;
    /**
     * Configuration of the PXF daemon.
     */
    public readonly pxfConfig!: pulumi.Output<outputs.MdbGreenplumClusterPxfConfig>;
    /**
     * The list of security groups applied to resource or their components.
     */
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    /**
     * Number of hosts in segment subcluster (from 1 to 32).
     */
    public readonly segmentHostCount!: pulumi.Output<number>;
    /**
     * A list of IDs of the host groups to place segment subclusters' VMs of the cluster on.
     */
    public readonly segmentHostGroupIds!: pulumi.Output<string[]>;
    /**
     * Info about hosts in segment subcluster.
     */
    public /*out*/ readonly segmentHosts!: pulumi.Output<outputs.MdbGreenplumClusterSegmentHost[]>;
    /**
     * Number of segments on segment host (not more then 1 + RAM/8).
     */
    public readonly segmentInHost!: pulumi.Output<number>;
    /**
     * Settings for segment subcluster.
     */
    public readonly segmentSubcluster!: pulumi.Output<outputs.MdbGreenplumClusterSegmentSubcluster>;
    /**
     * ID of service account to use with Yandex Cloud resources (e.g. S3, Cloud Logging).
     */
    public readonly serviceAccountId!: pulumi.Output<string | undefined>;
    /**
     * Status of the cluster.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The ID of the subnet, to which the hosts belongs. The subnet must be a part of the network to which the cluster belongs.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * Greenplum cluster admin user name.
     */
    public readonly userName!: pulumi.Output<string>;
    /**
     * Greenplum cluster admin password name.
     */
    public readonly userPassword!: pulumi.Output<string>;
    /**
     * Version of the Greenplum cluster. (`6.25`)
     */
    public readonly version!: pulumi.Output<string>;
    /**
     * The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not
     * provided, the default provider zone will be used.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a MdbGreenplumCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MdbGreenplumClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdbGreenplumClusterArgs | MdbGreenplumClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MdbGreenplumClusterState | undefined;
            resourceInputs["access"] = state ? state.access : undefined;
            resourceInputs["assignPublicIp"] = state ? state.assignPublicIp : undefined;
            resourceInputs["backgroundActivities"] = state ? state.backgroundActivities : undefined;
            resourceInputs["backupWindowStart"] = state ? state.backupWindowStart : undefined;
            resourceInputs["cloudStorage"] = state ? state.cloudStorage : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["folderId"] = state ? state.folderId : undefined;
            resourceInputs["greenplumConfig"] = state ? state.greenplumConfig : undefined;
            resourceInputs["health"] = state ? state.health : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["logging"] = state ? state.logging : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["masterHostCount"] = state ? state.masterHostCount : undefined;
            resourceInputs["masterHostGroupIds"] = state ? state.masterHostGroupIds : undefined;
            resourceInputs["masterHosts"] = state ? state.masterHosts : undefined;
            resourceInputs["masterSubcluster"] = state ? state.masterSubcluster : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["poolerConfig"] = state ? state.poolerConfig : undefined;
            resourceInputs["pxfConfig"] = state ? state.pxfConfig : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["segmentHostCount"] = state ? state.segmentHostCount : undefined;
            resourceInputs["segmentHostGroupIds"] = state ? state.segmentHostGroupIds : undefined;
            resourceInputs["segmentHosts"] = state ? state.segmentHosts : undefined;
            resourceInputs["segmentInHost"] = state ? state.segmentInHost : undefined;
            resourceInputs["segmentSubcluster"] = state ? state.segmentSubcluster : undefined;
            resourceInputs["serviceAccountId"] = state ? state.serviceAccountId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
            resourceInputs["userPassword"] = state ? state.userPassword : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as MdbGreenplumClusterArgs | undefined;
            if ((!args || args.assignPublicIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assignPublicIp'");
            }
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.masterHostCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterHostCount'");
            }
            if ((!args || args.masterSubcluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterSubcluster'");
            }
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if ((!args || args.segmentHostCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'segmentHostCount'");
            }
            if ((!args || args.segmentInHost === undefined) && !opts.urn) {
                throw new Error("Missing required property 'segmentInHost'");
            }
            if ((!args || args.segmentSubcluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'segmentSubcluster'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            if ((!args || args.userPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userPassword'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["access"] = args ? args.access : undefined;
            resourceInputs["assignPublicIp"] = args ? args.assignPublicIp : undefined;
            resourceInputs["backgroundActivities"] = args ? args.backgroundActivities : undefined;
            resourceInputs["backupWindowStart"] = args ? args.backupWindowStart : undefined;
            resourceInputs["cloudStorage"] = args ? args.cloudStorage : undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["folderId"] = args ? args.folderId : undefined;
            resourceInputs["greenplumConfig"] = args ? args.greenplumConfig : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["logging"] = args ? args.logging : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["masterHostCount"] = args ? args.masterHostCount : undefined;
            resourceInputs["masterHostGroupIds"] = args ? args.masterHostGroupIds : undefined;
            resourceInputs["masterSubcluster"] = args ? args.masterSubcluster : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["poolerConfig"] = args ? args.poolerConfig : undefined;
            resourceInputs["pxfConfig"] = args ? args.pxfConfig : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["segmentHostCount"] = args ? args.segmentHostCount : undefined;
            resourceInputs["segmentHostGroupIds"] = args ? args.segmentHostGroupIds : undefined;
            resourceInputs["segmentInHost"] = args ? args.segmentInHost : undefined;
            resourceInputs["segmentSubcluster"] = args ? args.segmentSubcluster : undefined;
            resourceInputs["serviceAccountId"] = args ? args.serviceAccountId : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["userPassword"] = args?.userPassword ? pulumi.secret(args.userPassword) : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["health"] = undefined /*out*/;
            resourceInputs["masterHosts"] = undefined /*out*/;
            resourceInputs["segmentHosts"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["userPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MdbGreenplumCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MdbGreenplumCluster resources.
 */
export interface MdbGreenplumClusterState {
    /**
     * Access policy to the Greenplum cluster.
     */
    access?: pulumi.Input<inputs.MdbGreenplumClusterAccess>;
    /**
     * Sets whether the master hosts should get a public IP address on creation. Changing this parameter for an existing host
     * is not supported at the moment.
     */
    assignPublicIp?: pulumi.Input<boolean>;
    /**
     * Background activities settings.
     */
    backgroundActivities?: pulumi.Input<pulumi.Input<inputs.MdbGreenplumClusterBackgroundActivity>[]>;
    /**
     * Time to start the daily backup, in the UTC timezone.
     */
    backupWindowStart?: pulumi.Input<inputs.MdbGreenplumClusterBackupWindowStart>;
    /**
     * Cloud Storage settings of the Greenplum cluster.
     */
    cloudStorage?: pulumi.Input<inputs.MdbGreenplumClusterCloudStorage>;
    /**
     * The creation timestamp of the resource.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * Deployment environment of the Greenplum cluster. (PRODUCTION, PRESTABLE)
     */
    environment?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Greenplum cluster config. Detail info in `Greenplum cluster settings` block.
     */
    greenplumConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Aggregated health of the cluster.
     */
    health?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    logging?: pulumi.Input<inputs.MdbGreenplumClusterLogging>;
    /**
     * Maintenance policy of the Greenplum cluster.
     */
    maintenanceWindow?: pulumi.Input<inputs.MdbGreenplumClusterMaintenanceWindow>;
    /**
     * Number of hosts in master subcluster (1 or 2).
     */
    masterHostCount?: pulumi.Input<number>;
    /**
     * A list of IDs of the host groups to place master subclusters' VMs of the cluster on.
     */
    masterHostGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Info about hosts in master subcluster.
     */
    masterHosts?: pulumi.Input<pulumi.Input<inputs.MdbGreenplumClusterMasterHost>[]>;
    /**
     * Settings for master subcluster.
     */
    masterSubcluster?: pulumi.Input<inputs.MdbGreenplumClusterMasterSubcluster>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    networkId?: pulumi.Input<string>;
    /**
     * Configuration of the connection pooler.
     */
    poolerConfig?: pulumi.Input<inputs.MdbGreenplumClusterPoolerConfig>;
    /**
     * Configuration of the PXF daemon.
     */
    pxfConfig?: pulumi.Input<inputs.MdbGreenplumClusterPxfConfig>;
    /**
     * The list of security groups applied to resource or their components.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of hosts in segment subcluster (from 1 to 32).
     */
    segmentHostCount?: pulumi.Input<number>;
    /**
     * A list of IDs of the host groups to place segment subclusters' VMs of the cluster on.
     */
    segmentHostGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Info about hosts in segment subcluster.
     */
    segmentHosts?: pulumi.Input<pulumi.Input<inputs.MdbGreenplumClusterSegmentHost>[]>;
    /**
     * Number of segments on segment host (not more then 1 + RAM/8).
     */
    segmentInHost?: pulumi.Input<number>;
    /**
     * Settings for segment subcluster.
     */
    segmentSubcluster?: pulumi.Input<inputs.MdbGreenplumClusterSegmentSubcluster>;
    /**
     * ID of service account to use with Yandex Cloud resources (e.g. S3, Cloud Logging).
     */
    serviceAccountId?: pulumi.Input<string>;
    /**
     * Status of the cluster.
     */
    status?: pulumi.Input<string>;
    /**
     * The ID of the subnet, to which the hosts belongs. The subnet must be a part of the network to which the cluster belongs.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Greenplum cluster admin user name.
     */
    userName?: pulumi.Input<string>;
    /**
     * Greenplum cluster admin password name.
     */
    userPassword?: pulumi.Input<string>;
    /**
     * Version of the Greenplum cluster. (`6.25`)
     */
    version?: pulumi.Input<string>;
    /**
     * The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not
     * provided, the default provider zone will be used.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MdbGreenplumCluster resource.
 */
export interface MdbGreenplumClusterArgs {
    /**
     * Access policy to the Greenplum cluster.
     */
    access?: pulumi.Input<inputs.MdbGreenplumClusterAccess>;
    /**
     * Sets whether the master hosts should get a public IP address on creation. Changing this parameter for an existing host
     * is not supported at the moment.
     */
    assignPublicIp: pulumi.Input<boolean>;
    /**
     * Background activities settings.
     */
    backgroundActivities?: pulumi.Input<pulumi.Input<inputs.MdbGreenplumClusterBackgroundActivity>[]>;
    /**
     * Time to start the daily backup, in the UTC timezone.
     */
    backupWindowStart?: pulumi.Input<inputs.MdbGreenplumClusterBackupWindowStart>;
    /**
     * Cloud Storage settings of the Greenplum cluster.
     */
    cloudStorage?: pulumi.Input<inputs.MdbGreenplumClusterCloudStorage>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * Deployment environment of the Greenplum cluster. (PRODUCTION, PRESTABLE)
     */
    environment: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Greenplum cluster config. Detail info in `Greenplum cluster settings` block.
     */
    greenplumConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    logging?: pulumi.Input<inputs.MdbGreenplumClusterLogging>;
    /**
     * Maintenance policy of the Greenplum cluster.
     */
    maintenanceWindow?: pulumi.Input<inputs.MdbGreenplumClusterMaintenanceWindow>;
    /**
     * Number of hosts in master subcluster (1 or 2).
     */
    masterHostCount: pulumi.Input<number>;
    /**
     * A list of IDs of the host groups to place master subclusters' VMs of the cluster on.
     */
    masterHostGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Settings for master subcluster.
     */
    masterSubcluster: pulumi.Input<inputs.MdbGreenplumClusterMasterSubcluster>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    networkId: pulumi.Input<string>;
    /**
     * Configuration of the connection pooler.
     */
    poolerConfig?: pulumi.Input<inputs.MdbGreenplumClusterPoolerConfig>;
    /**
     * Configuration of the PXF daemon.
     */
    pxfConfig?: pulumi.Input<inputs.MdbGreenplumClusterPxfConfig>;
    /**
     * The list of security groups applied to resource or their components.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of hosts in segment subcluster (from 1 to 32).
     */
    segmentHostCount: pulumi.Input<number>;
    /**
     * A list of IDs of the host groups to place segment subclusters' VMs of the cluster on.
     */
    segmentHostGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of segments on segment host (not more then 1 + RAM/8).
     */
    segmentInHost: pulumi.Input<number>;
    /**
     * Settings for segment subcluster.
     */
    segmentSubcluster: pulumi.Input<inputs.MdbGreenplumClusterSegmentSubcluster>;
    /**
     * ID of service account to use with Yandex Cloud resources (e.g. S3, Cloud Logging).
     */
    serviceAccountId?: pulumi.Input<string>;
    /**
     * The ID of the subnet, to which the hosts belongs. The subnet must be a part of the network to which the cluster belongs.
     */
    subnetId: pulumi.Input<string>;
    /**
     * Greenplum cluster admin user name.
     */
    userName: pulumi.Input<string>;
    /**
     * Greenplum cluster admin password name.
     */
    userPassword: pulumi.Input<string>;
    /**
     * Version of the Greenplum cluster. (`6.25`)
     */
    version: pulumi.Input<string>;
    /**
     * The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not
     * provided, the default provider zone will be used.
     */
    zone: pulumi.Input<string>;
}
