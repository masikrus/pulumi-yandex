// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MdbMysqlUser extends pulumi.CustomResource {
    /**
     * Get an existing MdbMysqlUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdbMysqlUserState, opts?: pulumi.CustomResourceOptions): MdbMysqlUser {
        return new MdbMysqlUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/mdbMysqlUser:MdbMysqlUser';

    /**
     * Returns true if the given object is an instance of MdbMysqlUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdbMysqlUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdbMysqlUser.__pulumiType;
    }

    /**
     * Authentication plugin. Allowed values: `MYSQL_NATIVE_PASSWORD`, `CACHING_SHA2_PASSWORD`, `SHA256_PASSWORD` (for version
     * 5.7 `MYSQL_NATIVE_PASSWORD`, `SHA256_PASSWORD`)
     */
    public readonly authenticationPlugin!: pulumi.Output<string>;
    /**
     * The ID of the MySQL cluster.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * User's connection limits. If the attribute is not specified there will be no changes. Default value is `-1`. When these
     * parameters are set to `-1`, backend default values will be actually used.
     */
    public readonly connectionLimits!: pulumi.Output<outputs.MdbMysqlUserConnectionLimits>;
    /**
     * Connection Manager connection configuration. Filled in by the server automatically.
     */
    public /*out*/ readonly connectionManager!: pulumi.Output<{[key: string]: string}>;
    /**
     * Generate password using Connection Manager. Allowed values: `true` or `false`. It's used only during user creation and
     * is ignored during updating. > **Must specify either password or generate_password**.
     */
    public readonly generatePassword!: pulumi.Output<boolean | undefined>;
    /**
     * List user's global permissions. Allowed permissions: `REPLICATION_CLIENT`, `REPLICATION_SLAVE`, `PROCESS` for clear list
     * use empty list. If the attribute is not specified there will be no changes.
     */
    public readonly globalPermissions!: pulumi.Output<string[]>;
    /**
     * The name of the user.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The password of the user.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Set of permissions granted to the user.
     */
    public readonly permissions!: pulumi.Output<outputs.MdbMysqlUserPermission[]>;

    /**
     * Create a MdbMysqlUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MdbMysqlUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdbMysqlUserArgs | MdbMysqlUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MdbMysqlUserState | undefined;
            resourceInputs["authenticationPlugin"] = state ? state.authenticationPlugin : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["connectionLimits"] = state ? state.connectionLimits : undefined;
            resourceInputs["connectionManager"] = state ? state.connectionManager : undefined;
            resourceInputs["generatePassword"] = state ? state.generatePassword : undefined;
            resourceInputs["globalPermissions"] = state ? state.globalPermissions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
        } else {
            const args = argsOrState as MdbMysqlUserArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["authenticationPlugin"] = args ? args.authenticationPlugin : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["connectionLimits"] = args ? args.connectionLimits : undefined;
            resourceInputs["generatePassword"] = args ? args.generatePassword : undefined;
            resourceInputs["globalPermissions"] = args ? args.globalPermissions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["connectionManager"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MdbMysqlUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MdbMysqlUser resources.
 */
export interface MdbMysqlUserState {
    /**
     * Authentication plugin. Allowed values: `MYSQL_NATIVE_PASSWORD`, `CACHING_SHA2_PASSWORD`, `SHA256_PASSWORD` (for version
     * 5.7 `MYSQL_NATIVE_PASSWORD`, `SHA256_PASSWORD`)
     */
    authenticationPlugin?: pulumi.Input<string>;
    /**
     * The ID of the MySQL cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * User's connection limits. If the attribute is not specified there will be no changes. Default value is `-1`. When these
     * parameters are set to `-1`, backend default values will be actually used.
     */
    connectionLimits?: pulumi.Input<inputs.MdbMysqlUserConnectionLimits>;
    /**
     * Connection Manager connection configuration. Filled in by the server automatically.
     */
    connectionManager?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Generate password using Connection Manager. Allowed values: `true` or `false`. It's used only during user creation and
     * is ignored during updating. > **Must specify either password or generate_password**.
     */
    generatePassword?: pulumi.Input<boolean>;
    /**
     * List user's global permissions. Allowed permissions: `REPLICATION_CLIENT`, `REPLICATION_SLAVE`, `PROCESS` for clear list
     * use empty list. If the attribute is not specified there will be no changes.
     */
    globalPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the user.
     */
    name?: pulumi.Input<string>;
    /**
     * The password of the user.
     */
    password?: pulumi.Input<string>;
    /**
     * Set of permissions granted to the user.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.MdbMysqlUserPermission>[]>;
}

/**
 * The set of arguments for constructing a MdbMysqlUser resource.
 */
export interface MdbMysqlUserArgs {
    /**
     * Authentication plugin. Allowed values: `MYSQL_NATIVE_PASSWORD`, `CACHING_SHA2_PASSWORD`, `SHA256_PASSWORD` (for version
     * 5.7 `MYSQL_NATIVE_PASSWORD`, `SHA256_PASSWORD`)
     */
    authenticationPlugin?: pulumi.Input<string>;
    /**
     * The ID of the MySQL cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * User's connection limits. If the attribute is not specified there will be no changes. Default value is `-1`. When these
     * parameters are set to `-1`, backend default values will be actually used.
     */
    connectionLimits?: pulumi.Input<inputs.MdbMysqlUserConnectionLimits>;
    /**
     * Generate password using Connection Manager. Allowed values: `true` or `false`. It's used only during user creation and
     * is ignored during updating. > **Must specify either password or generate_password**.
     */
    generatePassword?: pulumi.Input<boolean>;
    /**
     * List user's global permissions. Allowed permissions: `REPLICATION_CLIENT`, `REPLICATION_SLAVE`, `PROCESS` for clear list
     * use empty list. If the attribute is not specified there will be no changes.
     */
    globalPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the user.
     */
    name?: pulumi.Input<string>;
    /**
     * The password of the user.
     */
    password?: pulumi.Input<string>;
    /**
     * Set of permissions granted to the user.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.MdbMysqlUserPermission>[]>;
}
