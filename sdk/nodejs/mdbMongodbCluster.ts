// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MdbMongodbCluster extends pulumi.CustomResource {
    /**
     * Get an existing MdbMongodbCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdbMongodbClusterState, opts?: pulumi.CustomResourceOptions): MdbMongodbCluster {
        return new MdbMongodbCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/mdbMongodbCluster:MdbMongodbCluster';

    /**
     * Returns true if the given object is an instance of MdbMongodbCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdbMongodbCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdbMongodbCluster.__pulumiType;
    }

    /**
     * Configuration of the MongoDB subcluster.
     */
    public readonly clusterConfig!: pulumi.Output<outputs.MdbMongodbClusterClusterConfig>;
    /**
     * The ID of the cluster.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * The creation timestamp of the resource.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * A database of the MongoDB cluster.
     *
     * @deprecated to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database
     */
    public readonly databases!: pulumi.Output<outputs.MdbMongodbClusterDatabase[]>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    public readonly deletionProtection!: pulumi.Output<boolean>;
    /**
     * The resource description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly diskSizeAutoscalingMongocfg!: pulumi.Output<outputs.MdbMongodbClusterDiskSizeAutoscalingMongocfg>;
    public readonly diskSizeAutoscalingMongod!: pulumi.Output<outputs.MdbMongodbClusterDiskSizeAutoscalingMongod>;
    public readonly diskSizeAutoscalingMongoinfra!: pulumi.Output<outputs.MdbMongodbClusterDiskSizeAutoscalingMongoinfra>;
    public readonly diskSizeAutoscalingMongos!: pulumi.Output<outputs.MdbMongodbClusterDiskSizeAutoscalingMongos>;
    /**
     * Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
     */
    public readonly environment!: pulumi.Output<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    public readonly folderId!: pulumi.Output<string>;
    /**
     * Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information
     * see `health` field of JSON representation in [the official
     * documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
     */
    public /*out*/ readonly health!: pulumi.Output<string>;
    /**
     * A host of the MongoDB cluster.
     */
    public readonly hosts!: pulumi.Output<outputs.MdbMongodbClusterHost[]>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Maintenance window settings of the MongoDB cluster.
     */
    public readonly maintenanceWindow!: pulumi.Output<outputs.MdbMongodbClusterMaintenanceWindow>;
    /**
     * The resource name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * (**DEPRECATED**, use `resources_*` instead) Resources allocated to hosts of the MongoDB cluster.
     *
     * @deprecated to manage `resources`s, please switch to using a separate resource type `resources_mongo*`
     */
    public readonly resources!: pulumi.Output<outputs.MdbMongodbClusterResources | undefined>;
    /**
     * Resources allocated to `mongocfg` hosts of the MongoDB cluster.
     */
    public readonly resourcesMongocfg!: pulumi.Output<outputs.MdbMongodbClusterResourcesMongocfg | undefined>;
    /**
     * Resources allocated to `mongod` hosts of the MongoDB cluster.
     */
    public readonly resourcesMongod!: pulumi.Output<outputs.MdbMongodbClusterResourcesMongod | undefined>;
    /**
     * Resources allocated to `mongoinfra` hosts of the MongoDB cluster.
     */
    public readonly resourcesMongoinfra!: pulumi.Output<outputs.MdbMongodbClusterResourcesMongoinfra | undefined>;
    /**
     * Resources allocated to `mongos` hosts of the MongoDB cluster.
     */
    public readonly resourcesMongos!: pulumi.Output<outputs.MdbMongodbClusterResourcesMongos | undefined>;
    /**
     * The cluster will be created from the specified backup.
     */
    public readonly restore!: pulumi.Output<outputs.MdbMongodbClusterRestore | undefined>;
    /**
     * The list of security groups applied to resource or their components.
     */
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    /**
     * MongoDB Cluster mode enabled/disabled.
     */
    public /*out*/ readonly sharded!: pulumi.Output<boolean>;
    /**
     * Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or
     * `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official
     * documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * A user of the MongoDB cluster.
     *
     * @deprecated to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user
     */
    public readonly users!: pulumi.Output<outputs.MdbMongodbClusterUser[]>;

    /**
     * Create a MdbMongodbCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MdbMongodbClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdbMongodbClusterArgs | MdbMongodbClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MdbMongodbClusterState | undefined;
            resourceInputs["clusterConfig"] = state ? state.clusterConfig : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["databases"] = state ? state.databases : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskSizeAutoscalingMongocfg"] = state ? state.diskSizeAutoscalingMongocfg : undefined;
            resourceInputs["diskSizeAutoscalingMongod"] = state ? state.diskSizeAutoscalingMongod : undefined;
            resourceInputs["diskSizeAutoscalingMongoinfra"] = state ? state.diskSizeAutoscalingMongoinfra : undefined;
            resourceInputs["diskSizeAutoscalingMongos"] = state ? state.diskSizeAutoscalingMongos : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["folderId"] = state ? state.folderId : undefined;
            resourceInputs["health"] = state ? state.health : undefined;
            resourceInputs["hosts"] = state ? state.hosts : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
            resourceInputs["resourcesMongocfg"] = state ? state.resourcesMongocfg : undefined;
            resourceInputs["resourcesMongod"] = state ? state.resourcesMongod : undefined;
            resourceInputs["resourcesMongoinfra"] = state ? state.resourcesMongoinfra : undefined;
            resourceInputs["resourcesMongos"] = state ? state.resourcesMongos : undefined;
            resourceInputs["restore"] = state ? state.restore : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["sharded"] = state ? state.sharded : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as MdbMongodbClusterArgs | undefined;
            if ((!args || args.clusterConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterConfig'");
            }
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.hosts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hosts'");
            }
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["clusterConfig"] = args ? args.clusterConfig : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["databases"] = args ? args.databases : undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskSizeAutoscalingMongocfg"] = args ? args.diskSizeAutoscalingMongocfg : undefined;
            resourceInputs["diskSizeAutoscalingMongod"] = args ? args.diskSizeAutoscalingMongod : undefined;
            resourceInputs["diskSizeAutoscalingMongoinfra"] = args ? args.diskSizeAutoscalingMongoinfra : undefined;
            resourceInputs["diskSizeAutoscalingMongos"] = args ? args.diskSizeAutoscalingMongos : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["folderId"] = args ? args.folderId : undefined;
            resourceInputs["hosts"] = args ? args.hosts : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
            resourceInputs["resourcesMongocfg"] = args ? args.resourcesMongocfg : undefined;
            resourceInputs["resourcesMongod"] = args ? args.resourcesMongod : undefined;
            resourceInputs["resourcesMongoinfra"] = args ? args.resourcesMongoinfra : undefined;
            resourceInputs["resourcesMongos"] = args ? args.resourcesMongos : undefined;
            resourceInputs["restore"] = args ? args.restore : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["health"] = undefined /*out*/;
            resourceInputs["sharded"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MdbMongodbCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MdbMongodbCluster resources.
 */
export interface MdbMongodbClusterState {
    /**
     * Configuration of the MongoDB subcluster.
     */
    clusterConfig?: pulumi.Input<inputs.MdbMongodbClusterClusterConfig>;
    /**
     * The ID of the cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The creation timestamp of the resource.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * A database of the MongoDB cluster.
     *
     * @deprecated to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database
     */
    databases?: pulumi.Input<pulumi.Input<inputs.MdbMongodbClusterDatabase>[]>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    diskSizeAutoscalingMongocfg?: pulumi.Input<inputs.MdbMongodbClusterDiskSizeAutoscalingMongocfg>;
    diskSizeAutoscalingMongod?: pulumi.Input<inputs.MdbMongodbClusterDiskSizeAutoscalingMongod>;
    diskSizeAutoscalingMongoinfra?: pulumi.Input<inputs.MdbMongodbClusterDiskSizeAutoscalingMongoinfra>;
    diskSizeAutoscalingMongos?: pulumi.Input<inputs.MdbMongodbClusterDiskSizeAutoscalingMongos>;
    /**
     * Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
     */
    environment?: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information
     * see `health` field of JSON representation in [the official
     * documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
     */
    health?: pulumi.Input<string>;
    /**
     * A host of the MongoDB cluster.
     */
    hosts?: pulumi.Input<pulumi.Input<inputs.MdbMongodbClusterHost>[]>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Maintenance window settings of the MongoDB cluster.
     */
    maintenanceWindow?: pulumi.Input<inputs.MdbMongodbClusterMaintenanceWindow>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    networkId?: pulumi.Input<string>;
    /**
     * (**DEPRECATED**, use `resources_*` instead) Resources allocated to hosts of the MongoDB cluster.
     *
     * @deprecated to manage `resources`s, please switch to using a separate resource type `resources_mongo*`
     */
    resources?: pulumi.Input<inputs.MdbMongodbClusterResources>;
    /**
     * Resources allocated to `mongocfg` hosts of the MongoDB cluster.
     */
    resourcesMongocfg?: pulumi.Input<inputs.MdbMongodbClusterResourcesMongocfg>;
    /**
     * Resources allocated to `mongod` hosts of the MongoDB cluster.
     */
    resourcesMongod?: pulumi.Input<inputs.MdbMongodbClusterResourcesMongod>;
    /**
     * Resources allocated to `mongoinfra` hosts of the MongoDB cluster.
     */
    resourcesMongoinfra?: pulumi.Input<inputs.MdbMongodbClusterResourcesMongoinfra>;
    /**
     * Resources allocated to `mongos` hosts of the MongoDB cluster.
     */
    resourcesMongos?: pulumi.Input<inputs.MdbMongodbClusterResourcesMongos>;
    /**
     * The cluster will be created from the specified backup.
     */
    restore?: pulumi.Input<inputs.MdbMongodbClusterRestore>;
    /**
     * The list of security groups applied to resource or their components.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * MongoDB Cluster mode enabled/disabled.
     */
    sharded?: pulumi.Input<boolean>;
    /**
     * Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or
     * `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official
     * documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
     */
    status?: pulumi.Input<string>;
    /**
     * A user of the MongoDB cluster.
     *
     * @deprecated to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user
     */
    users?: pulumi.Input<pulumi.Input<inputs.MdbMongodbClusterUser>[]>;
}

/**
 * The set of arguments for constructing a MdbMongodbCluster resource.
 */
export interface MdbMongodbClusterArgs {
    /**
     * Configuration of the MongoDB subcluster.
     */
    clusterConfig: pulumi.Input<inputs.MdbMongodbClusterClusterConfig>;
    /**
     * The ID of the cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * A database of the MongoDB cluster.
     *
     * @deprecated to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database
     */
    databases?: pulumi.Input<pulumi.Input<inputs.MdbMongodbClusterDatabase>[]>;
    /**
     * The `true` value means that resource is protected from accidental deletion.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    diskSizeAutoscalingMongocfg?: pulumi.Input<inputs.MdbMongodbClusterDiskSizeAutoscalingMongocfg>;
    diskSizeAutoscalingMongod?: pulumi.Input<inputs.MdbMongodbClusterDiskSizeAutoscalingMongod>;
    diskSizeAutoscalingMongoinfra?: pulumi.Input<inputs.MdbMongodbClusterDiskSizeAutoscalingMongoinfra>;
    diskSizeAutoscalingMongos?: pulumi.Input<inputs.MdbMongodbClusterDiskSizeAutoscalingMongos>;
    /**
     * Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
     */
    environment: pulumi.Input<string>;
    /**
     * The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * A host of the MongoDB cluster.
     */
    hosts: pulumi.Input<pulumi.Input<inputs.MdbMongodbClusterHost>[]>;
    /**
     * A set of key/value label pairs which assigned to resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Maintenance window settings of the MongoDB cluster.
     */
    maintenanceWindow?: pulumi.Input<inputs.MdbMongodbClusterMaintenanceWindow>;
    /**
     * The resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The `VPC Network ID` of subnets which resource attached to.
     */
    networkId: pulumi.Input<string>;
    /**
     * (**DEPRECATED**, use `resources_*` instead) Resources allocated to hosts of the MongoDB cluster.
     *
     * @deprecated to manage `resources`s, please switch to using a separate resource type `resources_mongo*`
     */
    resources?: pulumi.Input<inputs.MdbMongodbClusterResources>;
    /**
     * Resources allocated to `mongocfg` hosts of the MongoDB cluster.
     */
    resourcesMongocfg?: pulumi.Input<inputs.MdbMongodbClusterResourcesMongocfg>;
    /**
     * Resources allocated to `mongod` hosts of the MongoDB cluster.
     */
    resourcesMongod?: pulumi.Input<inputs.MdbMongodbClusterResourcesMongod>;
    /**
     * Resources allocated to `mongoinfra` hosts of the MongoDB cluster.
     */
    resourcesMongoinfra?: pulumi.Input<inputs.MdbMongodbClusterResourcesMongoinfra>;
    /**
     * Resources allocated to `mongos` hosts of the MongoDB cluster.
     */
    resourcesMongos?: pulumi.Input<inputs.MdbMongodbClusterResourcesMongos>;
    /**
     * The cluster will be created from the specified backup.
     */
    restore?: pulumi.Input<inputs.MdbMongodbClusterRestore>;
    /**
     * The list of security groups applied to resource or their components.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A user of the MongoDB cluster.
     *
     * @deprecated to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user
     */
    users?: pulumi.Input<pulumi.Input<inputs.MdbMongodbClusterUser>[]>;
}
