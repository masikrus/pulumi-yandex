// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IamServiceAccountApiKey extends pulumi.CustomResource {
    /**
     * Get an existing IamServiceAccountApiKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamServiceAccountApiKeyState, opts?: pulumi.CustomResourceOptions): IamServiceAccountApiKey {
        return new IamServiceAccountApiKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/iamServiceAccountApiKey:IamServiceAccountApiKey';

    /**
     * Returns true if the given object is an instance of IamServiceAccountApiKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamServiceAccountApiKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamServiceAccountApiKey.__pulumiType;
    }

    /**
     * The creation timestamp of the resource.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The resource description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The encrypted secret key, base64 encoded. This is only populated when `pgpKey` is supplied.
     */
    public /*out*/ readonly encryptedSecretKey!: pulumi.Output<string>;
    /**
     * The key will be no longer valid after expiration timestamp.
     */
    public readonly expiresAt!: pulumi.Output<string | undefined>;
    /**
     * The fingerprint of the PGP key used to encrypt the secret key. This is only populated when `pgpKey` is supplied.
     */
    public /*out*/ readonly keyFingerprint!: pulumi.Output<string>;
    /**
     * option to create a Lockbox secret version from sensitive outputs
     */
    public readonly outputToLockbox!: pulumi.Output<outputs.IamServiceAccountApiKeyOutputToLockbox | undefined>;
    /**
     * ID of the Lockbox secret version that contains the value of `secretKey`. This is only populated when `outputToLockbox`
     * is supplied. This version will be destroyed when the IAM key is destroyed, or when `outputToLockbox` is removed.
     */
    public /*out*/ readonly outputToLockboxVersionId!: pulumi.Output<string>;
    /**
     * An optional PGP key to encrypt the resulting secret key material. May either be a base64-encoded public key or a keybase
     * username in the form `keybase:keybaseusername`.
     */
    public readonly pgpKey!: pulumi.Output<string | undefined>;
    /**
     * The scope of the key.
     *
     * @deprecated Attribute `scope` deprecated and will be removed in the next major version of the provider. Use attribute `scopes` instead.
     */
    public readonly scope!: pulumi.Output<string | undefined>;
    /**
     * The list of scopes of the key.
     */
    public readonly scopes!: pulumi.Output<string[]>;
    /**
     * The secret key. This is only populated when neither `pgpKey` nor `outputToLockbox` are provided.
     */
    public /*out*/ readonly secretKey!: pulumi.Output<string>;
    /**
     * ID of the service account to an API key for.
     */
    public readonly serviceAccountId!: pulumi.Output<string>;

    /**
     * Create a IamServiceAccountApiKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IamServiceAccountApiKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamServiceAccountApiKeyArgs | IamServiceAccountApiKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamServiceAccountApiKeyState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["encryptedSecretKey"] = state ? state.encryptedSecretKey : undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["keyFingerprint"] = state ? state.keyFingerprint : undefined;
            resourceInputs["outputToLockbox"] = state ? state.outputToLockbox : undefined;
            resourceInputs["outputToLockboxVersionId"] = state ? state.outputToLockboxVersionId : undefined;
            resourceInputs["pgpKey"] = state ? state.pgpKey : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["secretKey"] = state ? state.secretKey : undefined;
            resourceInputs["serviceAccountId"] = state ? state.serviceAccountId : undefined;
        } else {
            const args = argsOrState as IamServiceAccountApiKeyArgs | undefined;
            if ((!args || args.serviceAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["expiresAt"] = args ? args.expiresAt : undefined;
            resourceInputs["outputToLockbox"] = args ? args.outputToLockbox : undefined;
            resourceInputs["pgpKey"] = args ? args.pgpKey : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["serviceAccountId"] = args ? args.serviceAccountId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["encryptedSecretKey"] = undefined /*out*/;
            resourceInputs["keyFingerprint"] = undefined /*out*/;
            resourceInputs["outputToLockboxVersionId"] = undefined /*out*/;
            resourceInputs["secretKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IamServiceAccountApiKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IamServiceAccountApiKey resources.
 */
export interface IamServiceAccountApiKeyState {
    /**
     * The creation timestamp of the resource.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * The encrypted secret key, base64 encoded. This is only populated when `pgpKey` is supplied.
     */
    encryptedSecretKey?: pulumi.Input<string>;
    /**
     * The key will be no longer valid after expiration timestamp.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The fingerprint of the PGP key used to encrypt the secret key. This is only populated when `pgpKey` is supplied.
     */
    keyFingerprint?: pulumi.Input<string>;
    /**
     * option to create a Lockbox secret version from sensitive outputs
     */
    outputToLockbox?: pulumi.Input<inputs.IamServiceAccountApiKeyOutputToLockbox>;
    /**
     * ID of the Lockbox secret version that contains the value of `secretKey`. This is only populated when `outputToLockbox`
     * is supplied. This version will be destroyed when the IAM key is destroyed, or when `outputToLockbox` is removed.
     */
    outputToLockboxVersionId?: pulumi.Input<string>;
    /**
     * An optional PGP key to encrypt the resulting secret key material. May either be a base64-encoded public key or a keybase
     * username in the form `keybase:keybaseusername`.
     */
    pgpKey?: pulumi.Input<string>;
    /**
     * The scope of the key.
     *
     * @deprecated Attribute `scope` deprecated and will be removed in the next major version of the provider. Use attribute `scopes` instead.
     */
    scope?: pulumi.Input<string>;
    /**
     * The list of scopes of the key.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The secret key. This is only populated when neither `pgpKey` nor `outputToLockbox` are provided.
     */
    secretKey?: pulumi.Input<string>;
    /**
     * ID of the service account to an API key for.
     */
    serviceAccountId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IamServiceAccountApiKey resource.
 */
export interface IamServiceAccountApiKeyArgs {
    /**
     * The resource description.
     */
    description?: pulumi.Input<string>;
    /**
     * The key will be no longer valid after expiration timestamp.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * option to create a Lockbox secret version from sensitive outputs
     */
    outputToLockbox?: pulumi.Input<inputs.IamServiceAccountApiKeyOutputToLockbox>;
    /**
     * An optional PGP key to encrypt the resulting secret key material. May either be a base64-encoded public key or a keybase
     * username in the form `keybase:keybaseusername`.
     */
    pgpKey?: pulumi.Input<string>;
    /**
     * The scope of the key.
     *
     * @deprecated Attribute `scope` deprecated and will be removed in the next major version of the provider. Use attribute `scopes` instead.
     */
    scope?: pulumi.Input<string>;
    /**
     * The list of scopes of the key.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the service account to an API key for.
     */
    serviceAccountId: pulumi.Input<string>;
}
