// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Outputs
{

    [OutputType]
    public sealed class MdbKafkaTopicTopicConfig
    {
        /// <summary>
        /// Retention policy to use on log segments.
        /// </summary>
        public readonly string? CleanupPolicy;
        /// <summary>
        /// Compression type of kafka topic.
        /// </summary>
        public readonly string? CompressionType;
        /// <summary>
        /// The amount of time to retain delete tombstone markers for log compacted topics.
        /// </summary>
        public readonly string? DeleteRetentionMs;
        /// <summary>
        /// The time to wait before deleting a file from the filesystem.
        /// </summary>
        public readonly string? FileDeleteDelayMs;
        /// <summary>
        /// This setting allows specifying an interval at which we will force an fsync of data written to the log.
        /// </summary>
        public readonly string? FlushMessages;
        /// <summary>
        /// This setting allows specifying a time interval at which we will force an fsync of data written to the log.
        /// </summary>
        public readonly string? FlushMs;
        /// <summary>
        /// The largest record batch size allowed by Kafka (after compression if compression is enabled).
        /// </summary>
        public readonly string? MaxMessageBytes;
        /// <summary>
        /// The minimum time a message will remain uncompacted in the log. Only applicable for logs that are being compacted.
        /// </summary>
        public readonly string? MinCompactionLagMs;
        /// <summary>
        /// When a producer sets acks to "all" (or "-1"), this configuration specifies the minimum number of replicas that must acknowledge a write for the write to be considered successful.
        /// </summary>
        public readonly string? MinInsyncReplicas;
        /// <summary>
        /// True if we should preallocate the file on disk when creating a new log segment.
        /// </summary>
        public readonly bool? Preallocate;
        /// <summary>
        /// This configuration controls the maximum size a partition (which consists of log segments) can grow to before we will discard old log segments to free up space if we are using the "delete" retention policy.
        /// </summary>
        public readonly string? RetentionBytes;
        /// <summary>
        /// This configuration controls the maximum time we will retain a log before we will discard old log segments to free up space if we are using the "delete" retention policy.
        /// </summary>
        public readonly string? RetentionMs;
        /// <summary>
        /// This configuration controls the segment file size for the log.
        /// </summary>
        public readonly string? SegmentBytes;

        [OutputConstructor]
        private MdbKafkaTopicTopicConfig(
            string? cleanupPolicy,

            string? compressionType,

            string? deleteRetentionMs,

            string? fileDeleteDelayMs,

            string? flushMessages,

            string? flushMs,

            string? maxMessageBytes,

            string? minCompactionLagMs,

            string? minInsyncReplicas,

            bool? preallocate,

            string? retentionBytes,

            string? retentionMs,

            string? segmentBytes)
        {
            CleanupPolicy = cleanupPolicy;
            CompressionType = compressionType;
            DeleteRetentionMs = deleteRetentionMs;
            FileDeleteDelayMs = fileDeleteDelayMs;
            FlushMessages = flushMessages;
            FlushMs = flushMs;
            MaxMessageBytes = maxMessageBytes;
            MinCompactionLagMs = minCompactionLagMs;
            MinInsyncReplicas = minInsyncReplicas;
            Preallocate = preallocate;
            RetentionBytes = retentionBytes;
            RetentionMs = retentionMs;
            SegmentBytes = segmentBytes;
        }
    }
}
