// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Outputs
{

    [OutputType]
    public sealed class GetMdbClickhouseClusterClickhouseConfigResult
    {
        /// <summary>
        /// Enable or disable asynchronous_insert_log system table.
        /// </summary>
        public readonly bool AsynchronousInsertLogEnabled;
        /// <summary>
        /// The maximum size that asynchronous_insert_log can grow to before old data will be removed.
        /// </summary>
        public readonly int AsynchronousInsertLogRetentionSize;
        /// <summary>
        /// The maximum time that asynchronous_insert_log records will be retained before removal.
        /// </summary>
        public readonly int AsynchronousInsertLogRetentionTime;
        /// <summary>
        /// Enable or disable asynchronous_metric_log system table.
        /// </summary>
        public readonly bool AsynchronousMetricLogEnabled;
        /// <summary>
        /// The maximum size that asynchronous_metric_log can grow to before old data will be removed.
        /// </summary>
        public readonly int AsynchronousMetricLogRetentionSize;
        /// <summary>
        /// The maximum time that asynchronous_metric_log records will be retained before removal.
        /// </summary>
        public readonly int AsynchronousMetricLogRetentionTime;
        /// <summary>
        /// The maximum number of threads that will be used for performing flush operations for Buffer-engine tables in the background.
        /// </summary>
        public readonly int BackgroundBufferFlushSchedulePoolSize;
        /// <summary>
        /// The maximum number of threads that will be used for performing a variety of operations (mostly garbage collection) for MergeTree-engine tables in a background.
        /// </summary>
        public readonly int BackgroundCommonPoolSize;
        /// <summary>
        /// The maximum number of threads that will be used for executing distributed sends.
        /// </summary>
        public readonly int BackgroundDistributedSchedulePoolSize;
        /// <summary>
        /// The maximum number of threads that will be used for fetching data parts from another replica for MergeTree-engine tables in a background.
        /// </summary>
        public readonly int BackgroundFetchesPoolSize;
        /// <summary>
        /// Sets a ratio between the number of threads and the number of background merges and mutations that can be executed concurrently.
        /// </summary>
        public readonly int BackgroundMergesMutationsConcurrencyRatio;
        /// <summary>
        /// The maximum number of threads that will be used for executing background operations for message streaming.
        /// </summary>
        public readonly int BackgroundMessageBrokerSchedulePoolSize;
        /// <summary>
        /// The maximum number of threads that will be used for moving data parts to another disk or volume for MergeTree-engine tables in a background.
        /// </summary>
        public readonly int BackgroundMovePoolSize;
        /// <summary>
        /// Sets the number of threads performing background merges and mutations for MergeTree-engine tables.
        /// </summary>
        public readonly int BackgroundPoolSize;
        /// <summary>
        /// The maximum number of threads that will be used for constantly executing some lightweight periodic operations for replicated tables, Kafka streaming, and DNS cache updates.
        /// </summary>
        public readonly int BackgroundSchedulePoolSize;
        /// <summary>
        /// Data compression configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMdbClickhouseClusterClickhouseConfigCompressionResult> Compressions;
        /// <summary>
        /// Default database name.
        /// </summary>
        public readonly string DefaultDatabase;
        /// <summary>
        /// Lazy loading of dictionaries. If true, then each dictionary is loaded on the first use.
        /// </summary>
        public readonly bool DictionariesLazyLoad;
        /// <summary>
        /// Enable or disable geobase.
        /// </summary>
        public readonly bool GeobaseEnabled;
        /// <summary>
        /// Address of the archive with the user geobase in Object Storage.
        /// </summary>
        public readonly string GeobaseUri;
        /// <summary>
        /// Graphite rollup configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupResult> GraphiteRollups;
        /// <summary>
        /// JDBC bridge configuration.
        /// </summary>
        public readonly Outputs.GetMdbClickhouseClusterClickhouseConfigJdbcBridgeResult JdbcBridge;
        /// <summary>
        /// Kafka connection configuration.
        /// </summary>
        public readonly Outputs.GetMdbClickhouseClusterClickhouseConfigKafkaResult Kafka;
        /// <summary>
        /// Kafka topic connection configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicResult> KafkaTopics;
        /// <summary>
        /// The number of seconds that ClickHouse waits for incoming requests for HTTP protocol before closing the connection.
        /// </summary>
        public readonly int KeepAliveTimeout;
        /// <summary>
        /// Logging level.
        /// </summary>
        public readonly string LogLevel;
        /// <summary>
        /// Maximum size of cache for marks
        /// </summary>
        public readonly int MarkCacheSize;
        /// <summary>
        /// Limit on total number of concurrently executed queries.
        /// </summary>
        public readonly int MaxConcurrentQueries;
        /// <summary>
        /// Max server connections.
        /// </summary>
        public readonly int MaxConnections;
        /// <summary>
        /// Restriction on dropping partitions.
        /// </summary>
        public readonly int MaxPartitionSizeToDrop;
        /// <summary>
        /// Restriction on deleting tables.
        /// </summary>
        public readonly int MaxTableSizeToDrop;
        /// <summary>
        /// MergeTree engine configuration.
        /// </summary>
        public readonly Outputs.GetMdbClickhouseClusterClickhouseConfigMergeTreeResult MergeTree;
        /// <summary>
        /// Enable or disable metric_log system table.
        /// </summary>
        public readonly bool MetricLogEnabled;
        /// <summary>
        /// The maximum size that metric_log can grow to before old data will be removed.
        /// </summary>
        public readonly int MetricLogRetentionSize;
        /// <summary>
        /// The maximum time that metric_log records will be retained before removal.
        /// </summary>
        public readonly int MetricLogRetentionTime;
        /// <summary>
        /// Enable or disable opentelemetry_span_log system table.
        /// </summary>
        public readonly bool OpentelemetrySpanLogEnabled;
        /// <summary>
        /// The maximum size that opentelemetry_span_log can grow to before old data will be removed.
        /// </summary>
        public readonly int OpentelemetrySpanLogRetentionSize;
        /// <summary>
        /// The maximum time that opentelemetry_span_log records will be retained before removal.
        /// </summary>
        public readonly int OpentelemetrySpanLogRetentionTime;
        /// <summary>
        /// The maximum size that part_log can grow to before old data will be removed.
        /// </summary>
        public readonly int PartLogRetentionSize;
        /// <summary>
        /// The maximum time that part_log records will be retained before removal.
        /// </summary>
        public readonly int PartLogRetentionTime;
        /// <summary>
        /// Query cache configuration.
        /// </summary>
        public readonly Outputs.GetMdbClickhouseClusterClickhouseConfigQueryCacheResult QueryCache;
        /// <summary>
        /// The maximum size that query_log can grow to before old data will be removed.
        /// </summary>
        public readonly int QueryLogRetentionSize;
        /// <summary>
        /// The maximum time that query_log records will be retained before removal.
        /// </summary>
        public readonly int QueryLogRetentionTime;
        /// <summary>
        /// Query masking rules configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMdbClickhouseClusterClickhouseConfigQueryMaskingRuleResult> QueryMaskingRules;
        /// <summary>
        /// Enable or disable query_thread_log system table.
        /// </summary>
        public readonly bool QueryThreadLogEnabled;
        /// <summary>
        /// The maximum size that query_thread_log can grow to before old data will be removed.
        /// </summary>
        public readonly int QueryThreadLogRetentionSize;
        /// <summary>
        /// The maximum time that query_thread_log records will be retained before removal.
        /// </summary>
        public readonly int QueryThreadLogRetentionTime;
        /// <summary>
        /// Enable or disable query_views_log system table.
        /// </summary>
        public readonly bool QueryViewsLogEnabled;
        /// <summary>
        /// The maximum size that query_views_log can grow to before old data will be removed.
        /// </summary>
        public readonly int QueryViewsLogRetentionSize;
        /// <summary>
        /// The maximum time that query_views_log records will be retained before removal.
        /// </summary>
        public readonly int QueryViewsLogRetentionTime;
        /// <summary>
        /// RabbitMQ connection configuration.
        /// </summary>
        public readonly Outputs.GetMdbClickhouseClusterClickhouseConfigRabbitmqResult Rabbitmq;
        /// <summary>
        /// Enable or disable session_log system table.
        /// </summary>
        public readonly bool SessionLogEnabled;
        /// <summary>
        /// The maximum size that session_log can grow to before old data will be removed.
        /// </summary>
        public readonly int SessionLogRetentionSize;
        /// <summary>
        /// The maximum time that session_log records will be retained before removal.
        /// </summary>
        public readonly int SessionLogRetentionTime;
        /// <summary>
        /// Enable or disable text_log system table.
        /// </summary>
        public readonly bool TextLogEnabled;
        /// <summary>
        /// Logging level for text_log system table.
        /// </summary>
        public readonly string TextLogLevel;
        /// <summary>
        /// The maximum size that text_log can grow to before old data will be removed.
        /// </summary>
        public readonly int TextLogRetentionSize;
        /// <summary>
        /// The maximum time that text_log records will be retained before removal.
        /// </summary>
        public readonly int TextLogRetentionTime;
        /// <summary>
        /// The server's time zone.
        /// </summary>
        public readonly string Timezone;
        /// <summary>
        /// Whenever server memory usage becomes larger than every next step in number of bytes the memory profiler will collect the allocating stack trace.
        /// </summary>
        public readonly int TotalMemoryProfilerStep;
        /// <summary>
        /// Enable or disable trace_log system table.
        /// </summary>
        public readonly bool TraceLogEnabled;
        /// <summary>
        /// The maximum size that trace_log can grow to before old data will be removed.
        /// </summary>
        public readonly int TraceLogRetentionSize;
        /// <summary>
        /// The maximum time that trace_log records will be retained before removal.
        /// </summary>
        public readonly int TraceLogRetentionTime;
        /// <summary>
        /// Cache size (in bytes) for uncompressed data used by table engines from the MergeTree family. Zero means disabled.
        /// </summary>
        public readonly int UncompressedCacheSize;
        /// <summary>
        /// Enable or disable zookeeper_log system table.
        /// </summary>
        public readonly bool ZookeeperLogEnabled;
        /// <summary>
        /// The maximum size that zookeeper_log can grow to before old data will be removed.
        /// </summary>
        public readonly int ZookeeperLogRetentionSize;
        /// <summary>
        /// The maximum time that zookeeper_log records will be retained before removal.
        /// </summary>
        public readonly int ZookeeperLogRetentionTime;

        [OutputConstructor]
        private GetMdbClickhouseClusterClickhouseConfigResult(
            bool asynchronousInsertLogEnabled,

            int asynchronousInsertLogRetentionSize,

            int asynchronousInsertLogRetentionTime,

            bool asynchronousMetricLogEnabled,

            int asynchronousMetricLogRetentionSize,

            int asynchronousMetricLogRetentionTime,

            int backgroundBufferFlushSchedulePoolSize,

            int backgroundCommonPoolSize,

            int backgroundDistributedSchedulePoolSize,

            int backgroundFetchesPoolSize,

            int backgroundMergesMutationsConcurrencyRatio,

            int backgroundMessageBrokerSchedulePoolSize,

            int backgroundMovePoolSize,

            int backgroundPoolSize,

            int backgroundSchedulePoolSize,

            ImmutableArray<Outputs.GetMdbClickhouseClusterClickhouseConfigCompressionResult> compressions,

            string defaultDatabase,

            bool dictionariesLazyLoad,

            bool geobaseEnabled,

            string geobaseUri,

            ImmutableArray<Outputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupResult> graphiteRollups,

            Outputs.GetMdbClickhouseClusterClickhouseConfigJdbcBridgeResult jdbcBridge,

            Outputs.GetMdbClickhouseClusterClickhouseConfigKafkaResult kafka,

            ImmutableArray<Outputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicResult> kafkaTopics,

            int keepAliveTimeout,

            string logLevel,

            int markCacheSize,

            int maxConcurrentQueries,

            int maxConnections,

            int maxPartitionSizeToDrop,

            int maxTableSizeToDrop,

            Outputs.GetMdbClickhouseClusterClickhouseConfigMergeTreeResult mergeTree,

            bool metricLogEnabled,

            int metricLogRetentionSize,

            int metricLogRetentionTime,

            bool opentelemetrySpanLogEnabled,

            int opentelemetrySpanLogRetentionSize,

            int opentelemetrySpanLogRetentionTime,

            int partLogRetentionSize,

            int partLogRetentionTime,

            Outputs.GetMdbClickhouseClusterClickhouseConfigQueryCacheResult queryCache,

            int queryLogRetentionSize,

            int queryLogRetentionTime,

            ImmutableArray<Outputs.GetMdbClickhouseClusterClickhouseConfigQueryMaskingRuleResult> queryMaskingRules,

            bool queryThreadLogEnabled,

            int queryThreadLogRetentionSize,

            int queryThreadLogRetentionTime,

            bool queryViewsLogEnabled,

            int queryViewsLogRetentionSize,

            int queryViewsLogRetentionTime,

            Outputs.GetMdbClickhouseClusterClickhouseConfigRabbitmqResult rabbitmq,

            bool sessionLogEnabled,

            int sessionLogRetentionSize,

            int sessionLogRetentionTime,

            bool textLogEnabled,

            string textLogLevel,

            int textLogRetentionSize,

            int textLogRetentionTime,

            string timezone,

            int totalMemoryProfilerStep,

            bool traceLogEnabled,

            int traceLogRetentionSize,

            int traceLogRetentionTime,

            int uncompressedCacheSize,

            bool zookeeperLogEnabled,

            int zookeeperLogRetentionSize,

            int zookeeperLogRetentionTime)
        {
            AsynchronousInsertLogEnabled = asynchronousInsertLogEnabled;
            AsynchronousInsertLogRetentionSize = asynchronousInsertLogRetentionSize;
            AsynchronousInsertLogRetentionTime = asynchronousInsertLogRetentionTime;
            AsynchronousMetricLogEnabled = asynchronousMetricLogEnabled;
            AsynchronousMetricLogRetentionSize = asynchronousMetricLogRetentionSize;
            AsynchronousMetricLogRetentionTime = asynchronousMetricLogRetentionTime;
            BackgroundBufferFlushSchedulePoolSize = backgroundBufferFlushSchedulePoolSize;
            BackgroundCommonPoolSize = backgroundCommonPoolSize;
            BackgroundDistributedSchedulePoolSize = backgroundDistributedSchedulePoolSize;
            BackgroundFetchesPoolSize = backgroundFetchesPoolSize;
            BackgroundMergesMutationsConcurrencyRatio = backgroundMergesMutationsConcurrencyRatio;
            BackgroundMessageBrokerSchedulePoolSize = backgroundMessageBrokerSchedulePoolSize;
            BackgroundMovePoolSize = backgroundMovePoolSize;
            BackgroundPoolSize = backgroundPoolSize;
            BackgroundSchedulePoolSize = backgroundSchedulePoolSize;
            Compressions = compressions;
            DefaultDatabase = defaultDatabase;
            DictionariesLazyLoad = dictionariesLazyLoad;
            GeobaseEnabled = geobaseEnabled;
            GeobaseUri = geobaseUri;
            GraphiteRollups = graphiteRollups;
            JdbcBridge = jdbcBridge;
            Kafka = kafka;
            KafkaTopics = kafkaTopics;
            KeepAliveTimeout = keepAliveTimeout;
            LogLevel = logLevel;
            MarkCacheSize = markCacheSize;
            MaxConcurrentQueries = maxConcurrentQueries;
            MaxConnections = maxConnections;
            MaxPartitionSizeToDrop = maxPartitionSizeToDrop;
            MaxTableSizeToDrop = maxTableSizeToDrop;
            MergeTree = mergeTree;
            MetricLogEnabled = metricLogEnabled;
            MetricLogRetentionSize = metricLogRetentionSize;
            MetricLogRetentionTime = metricLogRetentionTime;
            OpentelemetrySpanLogEnabled = opentelemetrySpanLogEnabled;
            OpentelemetrySpanLogRetentionSize = opentelemetrySpanLogRetentionSize;
            OpentelemetrySpanLogRetentionTime = opentelemetrySpanLogRetentionTime;
            PartLogRetentionSize = partLogRetentionSize;
            PartLogRetentionTime = partLogRetentionTime;
            QueryCache = queryCache;
            QueryLogRetentionSize = queryLogRetentionSize;
            QueryLogRetentionTime = queryLogRetentionTime;
            QueryMaskingRules = queryMaskingRules;
            QueryThreadLogEnabled = queryThreadLogEnabled;
            QueryThreadLogRetentionSize = queryThreadLogRetentionSize;
            QueryThreadLogRetentionTime = queryThreadLogRetentionTime;
            QueryViewsLogEnabled = queryViewsLogEnabled;
            QueryViewsLogRetentionSize = queryViewsLogRetentionSize;
            QueryViewsLogRetentionTime = queryViewsLogRetentionTime;
            Rabbitmq = rabbitmq;
            SessionLogEnabled = sessionLogEnabled;
            SessionLogRetentionSize = sessionLogRetentionSize;
            SessionLogRetentionTime = sessionLogRetentionTime;
            TextLogEnabled = textLogEnabled;
            TextLogLevel = textLogLevel;
            TextLogRetentionSize = textLogRetentionSize;
            TextLogRetentionTime = textLogRetentionTime;
            Timezone = timezone;
            TotalMemoryProfilerStep = totalMemoryProfilerStep;
            TraceLogEnabled = traceLogEnabled;
            TraceLogRetentionSize = traceLogRetentionSize;
            TraceLogRetentionTime = traceLogRetentionTime;
            UncompressedCacheSize = uncompressedCacheSize;
            ZookeeperLogEnabled = zookeeperLogEnabled;
            ZookeeperLogRetentionSize = zookeeperLogRetentionSize;
            ZookeeperLogRetentionTime = zookeeperLogRetentionTime;
        }
    }
}
