// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Outputs
{

    [OutputType]
    public sealed class MdbRedisClusterConfig
    {
        /// <summary>
        /// Allows some data to be lost in favor of faster switchover/restart by RDSync.
        /// </summary>
        public readonly bool? AllowDataLoss;
        /// <summary>
        /// Time to start the daily backup, in the UTC timezone.
        /// </summary>
        public readonly Outputs.MdbRedisClusterConfigBackupWindowStart? BackupWindowStart;
        /// <summary>
        /// Normal clients output buffer limits. See [redis config file](https://github.com/redis/redis/blob/6.2/redis.conf#L1841).
        /// </summary>
        public readonly string? ClientOutputBufferLimitNormal;
        /// <summary>
        /// Pubsub clients output buffer limits. See [redis config file](https://github.com/redis/redis/blob/6.2/redis.conf#L1843).
        /// </summary>
        public readonly string? ClientOutputBufferLimitPubsub;
        /// <summary>
        /// Permits Pub/Sub shard operations when cluster is down.
        /// </summary>
        public readonly bool? ClusterAllowPubsubshardWhenDown;
        /// <summary>
        /// Allows read operations when cluster is down.
        /// </summary>
        public readonly bool? ClusterAllowReadsWhenDown;
        /// <summary>
        /// Controls whether all hash slots must be covered by nodes.
        /// </summary>
        public readonly bool? ClusterRequireFullCoverage;
        /// <summary>
        /// Number of databases (changing requires redis-server restart).
        /// </summary>
        public readonly int? Databases;
        /// <summary>
        /// Allow Redis to use io-threads.
        /// </summary>
        public readonly bool? IoThreadsAllowed;
        /// <summary>
        /// The time, in minutes, that must elapse in order for the key counter to be divided by two (or decremented if it has a value less &lt;= 10).
        /// </summary>
        public readonly int? LfuDecayTime;
        /// <summary>
        /// Determines how the frequency counter represents key hits.
        /// </summary>
        public readonly int? LfuLogFactor;
        /// <summary>
        /// Maximum time in milliseconds for Lua scripts.
        /// </summary>
        public readonly int? LuaTimeLimit;
        /// <summary>
        /// Redis maxmemory usage in percent
        /// </summary>
        public readonly int? MaxmemoryPercent;
        /// <summary>
        /// Redis key eviction policy for a dataset that reaches maximum memory. Can be any of the listed in [the official RedisDB documentation](https://docs.redislabs.com/latest/rs/administering/database-operations/eviction-policy/).
        /// </summary>
        public readonly string? MaxmemoryPolicy;
        /// <summary>
        /// Select the events that Redis will notify among a set of classes.
        /// </summary>
        public readonly string? NotifyKeyspaceEvents;
        /// <summary>
        /// Password for the Redis cluster.
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// Replication backlog size as a percentage of flavor maxmemory.
        /// </summary>
        public readonly int? ReplBacklogSizePercent;
        /// <summary>
        /// Log slow queries below this number in microseconds.
        /// </summary>
        public readonly int? SlowlogLogSlowerThan;
        /// <summary>
        /// Slow queries log length.
        /// </summary>
        public readonly int? SlowlogMaxLen;
        /// <summary>
        /// Close the connection after a client is idle for N seconds.
        /// </summary>
        public readonly int? Timeout;
        /// <summary>
        /// Allows to turn before switchover in RDSync.
        /// </summary>
        public readonly bool? TurnBeforeSwitchover;
        /// <summary>
        /// Use JIT for lua scripts and functions.
        /// </summary>
        public readonly bool? UseLuajit;
        /// <summary>
        /// Version of Redis.
        /// </summary>
        public readonly string Version;
        /// <summary>
        /// Controls max number of entries in zset before conversion from memory-efficient listpack to CPU-efficient hash table and skiplist
        /// </summary>
        public readonly int? ZsetMaxListpackEntries;

        [OutputConstructor]
        private MdbRedisClusterConfig(
            bool? allowDataLoss,

            Outputs.MdbRedisClusterConfigBackupWindowStart? backupWindowStart,

            string? clientOutputBufferLimitNormal,

            string? clientOutputBufferLimitPubsub,

            bool? clusterAllowPubsubshardWhenDown,

            bool? clusterAllowReadsWhenDown,

            bool? clusterRequireFullCoverage,

            int? databases,

            bool? ioThreadsAllowed,

            int? lfuDecayTime,

            int? lfuLogFactor,

            int? luaTimeLimit,

            int? maxmemoryPercent,

            string? maxmemoryPolicy,

            string? notifyKeyspaceEvents,

            string password,

            int? replBacklogSizePercent,

            int? slowlogLogSlowerThan,

            int? slowlogMaxLen,

            int? timeout,

            bool? turnBeforeSwitchover,

            bool? useLuajit,

            string version,

            int? zsetMaxListpackEntries)
        {
            AllowDataLoss = allowDataLoss;
            BackupWindowStart = backupWindowStart;
            ClientOutputBufferLimitNormal = clientOutputBufferLimitNormal;
            ClientOutputBufferLimitPubsub = clientOutputBufferLimitPubsub;
            ClusterAllowPubsubshardWhenDown = clusterAllowPubsubshardWhenDown;
            ClusterAllowReadsWhenDown = clusterAllowReadsWhenDown;
            ClusterRequireFullCoverage = clusterRequireFullCoverage;
            Databases = databases;
            IoThreadsAllowed = ioThreadsAllowed;
            LfuDecayTime = lfuDecayTime;
            LfuLogFactor = lfuLogFactor;
            LuaTimeLimit = luaTimeLimit;
            MaxmemoryPercent = maxmemoryPercent;
            MaxmemoryPolicy = maxmemoryPolicy;
            NotifyKeyspaceEvents = notifyKeyspaceEvents;
            Password = password;
            ReplBacklogSizePercent = replBacklogSizePercent;
            SlowlogLogSlowerThan = slowlogLogSlowerThan;
            SlowlogMaxLen = slowlogMaxLen;
            Timeout = timeout;
            TurnBeforeSwitchover = turnBeforeSwitchover;
            UseLuajit = useLuajit;
            Version = version;
            ZsetMaxListpackEntries = zsetMaxListpackEntries;
        }
    }
}
