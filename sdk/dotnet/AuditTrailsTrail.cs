// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    [YandexResourceType("yandex:index/auditTrailsTrail:AuditTrailsTrail")]
    public partial class AuditTrailsTrail : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Structure describing destination data stream of the trail. Mutually exclusive with `logging_destination` and
        /// `storage_destination`.
        /// </summary>
        [Output("dataStreamDestination")]
        public Output<Outputs.AuditTrailsTrailDataStreamDestination?> DataStreamDestination { get; private set; } = null!;

        /// <summary>
        /// The resource description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Structure describing event filtering process for the trail.
        /// </summary>
        [Output("filter")]
        public Output<Outputs.AuditTrailsTrailFilter?> Filter { get; private set; } = null!;

        /// <summary>
        /// Structure describing event filtering process for the trail. Mutually exclusive with `filter`. At least one of the
        /// `management_events_filter` or `data_events_filter` fields will be filled.
        /// </summary>
        [Output("filteringPolicy")]
        public Output<Outputs.AuditTrailsTrailFilteringPolicy?> FilteringPolicy { get; private set; } = null!;

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Output("folderId")]
        public Output<string> FolderId { get; private set; } = null!;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Structure describing destination log group of the trail. Mutually exclusive with `storage_destination` and
        /// `data_stream_destination`.
        /// </summary>
        [Output("loggingDestination")]
        public Output<Outputs.AuditTrailsTrailLoggingDestination?> LoggingDestination { get; private set; } = null!;

        /// <summary>
        /// The resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
        /// </summary>
        [Output("serviceAccountId")]
        public Output<string> ServiceAccountId { get; private set; } = null!;

        /// <summary>
        /// Status of this trail.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Structure describing destination bucket of the trail. Mutually exclusive with `logging_destination` and
        /// `data_stream_destination`.
        /// </summary>
        [Output("storageDestination")]
        public Output<Outputs.AuditTrailsTrailStorageDestination?> StorageDestination { get; private set; } = null!;

        /// <summary>
        /// ID of the trail resource.
        /// </summary>
        [Output("trailId")]
        public Output<string> TrailId { get; private set; } = null!;


        /// <summary>
        /// Create a AuditTrailsTrail resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AuditTrailsTrail(string name, AuditTrailsTrailArgs args, CustomResourceOptions? options = null)
            : base("yandex:index/auditTrailsTrail:AuditTrailsTrail", name, args ?? new AuditTrailsTrailArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AuditTrailsTrail(string name, Input<string> id, AuditTrailsTrailState? state = null, CustomResourceOptions? options = null)
            : base("yandex:index/auditTrailsTrail:AuditTrailsTrail", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AuditTrailsTrail resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AuditTrailsTrail Get(string name, Input<string> id, AuditTrailsTrailState? state = null, CustomResourceOptions? options = null)
        {
            return new AuditTrailsTrail(name, id, state, options);
        }
    }

    public sealed class AuditTrailsTrailArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Structure describing destination data stream of the trail. Mutually exclusive with `logging_destination` and
        /// `storage_destination`.
        /// </summary>
        [Input("dataStreamDestination")]
        public Input<Inputs.AuditTrailsTrailDataStreamDestinationArgs>? DataStreamDestination { get; set; }

        /// <summary>
        /// The resource description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Structure describing event filtering process for the trail.
        /// </summary>
        [Input("filter")]
        public Input<Inputs.AuditTrailsTrailFilterArgs>? Filter { get; set; }

        /// <summary>
        /// Structure describing event filtering process for the trail. Mutually exclusive with `filter`. At least one of the
        /// `management_events_filter` or `data_events_filter` fields will be filled.
        /// </summary>
        [Input("filteringPolicy")]
        public Input<Inputs.AuditTrailsTrailFilteringPolicyArgs>? FilteringPolicy { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId", required: true)]
        public Input<string> FolderId { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Structure describing destination log group of the trail. Mutually exclusive with `storage_destination` and
        /// `data_stream_destination`.
        /// </summary>
        [Input("loggingDestination")]
        public Input<Inputs.AuditTrailsTrailLoggingDestinationArgs>? LoggingDestination { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
        /// </summary>
        [Input("serviceAccountId", required: true)]
        public Input<string> ServiceAccountId { get; set; } = null!;

        /// <summary>
        /// Structure describing destination bucket of the trail. Mutually exclusive with `logging_destination` and
        /// `data_stream_destination`.
        /// </summary>
        [Input("storageDestination")]
        public Input<Inputs.AuditTrailsTrailStorageDestinationArgs>? StorageDestination { get; set; }

        public AuditTrailsTrailArgs()
        {
        }
        public static new AuditTrailsTrailArgs Empty => new AuditTrailsTrailArgs();
    }

    public sealed class AuditTrailsTrailState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Structure describing destination data stream of the trail. Mutually exclusive with `logging_destination` and
        /// `storage_destination`.
        /// </summary>
        [Input("dataStreamDestination")]
        public Input<Inputs.AuditTrailsTrailDataStreamDestinationGetArgs>? DataStreamDestination { get; set; }

        /// <summary>
        /// The resource description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Structure describing event filtering process for the trail.
        /// </summary>
        [Input("filter")]
        public Input<Inputs.AuditTrailsTrailFilterGetArgs>? Filter { get; set; }

        /// <summary>
        /// Structure describing event filtering process for the trail. Mutually exclusive with `filter`. At least one of the
        /// `management_events_filter` or `data_events_filter` fields will be filled.
        /// </summary>
        [Input("filteringPolicy")]
        public Input<Inputs.AuditTrailsTrailFilteringPolicyGetArgs>? FilteringPolicy { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Structure describing destination log group of the trail. Mutually exclusive with `storage_destination` and
        /// `data_stream_destination`.
        /// </summary>
        [Input("loggingDestination")]
        public Input<Inputs.AuditTrailsTrailLoggingDestinationGetArgs>? LoggingDestination { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// [Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource.
        /// </summary>
        [Input("serviceAccountId")]
        public Input<string>? ServiceAccountId { get; set; }

        /// <summary>
        /// Status of this trail.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Structure describing destination bucket of the trail. Mutually exclusive with `logging_destination` and
        /// `data_stream_destination`.
        /// </summary>
        [Input("storageDestination")]
        public Input<Inputs.AuditTrailsTrailStorageDestinationGetArgs>? StorageDestination { get; set; }

        /// <summary>
        /// ID of the trail resource.
        /// </summary>
        [Input("trailId")]
        public Input<string>? TrailId { get; set; }

        public AuditTrailsTrailState()
        {
        }
        public static new AuditTrailsTrailState Empty => new AuditTrailsTrailState();
    }
}
