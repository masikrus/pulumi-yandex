// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    [YandexResourceType("yandex:index/cdnResource:CdnResource")]
    public partial class CdnResource : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Flag to create Resource either in active or disabled state. `True` - the content from CDN is available to clients.
        /// </summary>
        [Output("active")]
        public Output<bool?> Active { get; private set; } = null!;

        /// <summary>
        /// CDN endpoint CNAME, must be unique among resources.
        /// </summary>
        [Output("cname")]
        public Output<string> Cname { get; private set; } = null!;

        /// <summary>
        /// The creation timestamp of the resource.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Output("folderId")]
        public Output<string> FolderId { get; private set; } = null!;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// CDN Resource settings and options to tune CDN edge behavior.
        /// </summary>
        [Output("options")]
        public Output<Outputs.CdnResourceOptions> Options { get; private set; } = null!;

        [Output("originGroupId")]
        public Output<int?> OriginGroupId { get; private set; } = null!;

        [Output("originGroupName")]
        public Output<string?> OriginGroupName { get; private set; } = null!;

        [Output("originProtocol")]
        public Output<string?> OriginProtocol { get; private set; } = null!;

        /// <summary>
        /// Provider CNAME of CDN resource, computed value for read and update operations.
        /// </summary>
        [Output("providerCname")]
        public Output<string> ProviderCname { get; private set; } = null!;

        /// <summary>
        /// List of secondary hostname strings.
        /// </summary>
        [Output("secondaryHostnames")]
        public Output<ImmutableArray<string>> SecondaryHostnames { get; private set; } = null!;

        /// <summary>
        /// SSL certificate of CDN resource.
        /// </summary>
        [Output("sslCertificate")]
        public Output<Outputs.CdnResourceSslCertificate> SslCertificate { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a CdnResource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CdnResource(string name, CdnResourceArgs? args = null, CustomResourceOptions? options = null)
            : base("yandex:index/cdnResource:CdnResource", name, args ?? new CdnResourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CdnResource(string name, Input<string> id, CdnResourceState? state = null, CustomResourceOptions? options = null)
            : base("yandex:index/cdnResource:CdnResource", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CdnResource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CdnResource Get(string name, Input<string> id, CdnResourceState? state = null, CustomResourceOptions? options = null)
        {
            return new CdnResource(name, id, state, options);
        }
    }

    public sealed class CdnResourceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Flag to create Resource either in active or disabled state. `True` - the content from CDN is available to clients.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// CDN endpoint CNAME, must be unique among resources.
        /// </summary>
        [Input("cname")]
        public Input<string>? Cname { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// CDN Resource settings and options to tune CDN edge behavior.
        /// </summary>
        [Input("options")]
        public Input<Inputs.CdnResourceOptionsArgs>? Options { get; set; }

        [Input("originGroupId")]
        public Input<int>? OriginGroupId { get; set; }

        [Input("originGroupName")]
        public Input<string>? OriginGroupName { get; set; }

        [Input("originProtocol")]
        public Input<string>? OriginProtocol { get; set; }

        [Input("secondaryHostnames")]
        private InputList<string>? _secondaryHostnames;

        /// <summary>
        /// List of secondary hostname strings.
        /// </summary>
        public InputList<string> SecondaryHostnames
        {
            get => _secondaryHostnames ?? (_secondaryHostnames = new InputList<string>());
            set => _secondaryHostnames = value;
        }

        /// <summary>
        /// SSL certificate of CDN resource.
        /// </summary>
        [Input("sslCertificate")]
        public Input<Inputs.CdnResourceSslCertificateArgs>? SslCertificate { get; set; }

        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public CdnResourceArgs()
        {
        }
        public static new CdnResourceArgs Empty => new CdnResourceArgs();
    }

    public sealed class CdnResourceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Flag to create Resource either in active or disabled state. `True` - the content from CDN is available to clients.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// CDN endpoint CNAME, must be unique among resources.
        /// </summary>
        [Input("cname")]
        public Input<string>? Cname { get; set; }

        /// <summary>
        /// The creation timestamp of the resource.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// CDN Resource settings and options to tune CDN edge behavior.
        /// </summary>
        [Input("options")]
        public Input<Inputs.CdnResourceOptionsGetArgs>? Options { get; set; }

        [Input("originGroupId")]
        public Input<int>? OriginGroupId { get; set; }

        [Input("originGroupName")]
        public Input<string>? OriginGroupName { get; set; }

        [Input("originProtocol")]
        public Input<string>? OriginProtocol { get; set; }

        /// <summary>
        /// Provider CNAME of CDN resource, computed value for read and update operations.
        /// </summary>
        [Input("providerCname")]
        public Input<string>? ProviderCname { get; set; }

        [Input("secondaryHostnames")]
        private InputList<string>? _secondaryHostnames;

        /// <summary>
        /// List of secondary hostname strings.
        /// </summary>
        public InputList<string> SecondaryHostnames
        {
            get => _secondaryHostnames ?? (_secondaryHostnames = new InputList<string>());
            set => _secondaryHostnames = value;
        }

        /// <summary>
        /// SSL certificate of CDN resource.
        /// </summary>
        [Input("sslCertificate")]
        public Input<Inputs.CdnResourceSslCertificateGetArgs>? SslCertificate { get; set; }

        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public CdnResourceState()
        {
        }
        public static new CdnResourceState Empty => new CdnResourceState();
    }
}
