// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    [YandexResourceType("yandex:index/backupPolicy:BackupPolicy")]
    public partial class BackupPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of generated archives. Default `[Machine Name]-[Plan ID]-[Unique ID]a`.
        /// </summary>
        [Output("archiveName")]
        public Output<string?> ArchiveName { get; private set; } = null!;

        /// <summary>
        /// Configuration of Changed Block Tracking. Available values are: `USE_IF_ENABLED`, `ENABLED_AND_USE`, `DO_NOT_USE`.
        /// Default `DO_NOT_USE`.
        /// </summary>
        [Output("cbt")]
        public Output<string?> Cbt { get; private set; } = null!;

        /// <summary>
        /// Archive compression level. Affects CPU. Available values: `NORMAL`, `HIGH`, `MAX`, `OFF`. Default: `NORMAL`.
        /// </summary>
        [Output("compression")]
        public Output<string?> Compression { get; private set; } = null!;

        /// <summary>
        /// The creation timestamp of the resource.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// If this field is true, it means that the policy is enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// If true, determines whether a file has changed by the file size and timestamp. Otherwise, the entire file contents are
        /// compared to those stored in the backup.
        /// </summary>
        [Output("fastBackupEnabled")]
        public Output<bool?> FastBackupEnabled { get; private set; } = null!;

        /// <summary>
        /// File filters to specify masks of files to backup or to exclude of backuping.
        /// </summary>
        [Output("fileFilters")]
        public Output<Outputs.BackupPolicyFileFilters?> FileFilters { get; private set; } = null!;

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Output("folderId")]
        public Output<string> FolderId { get; private set; } = null!;

        /// <summary>
        /// Format of the backup. It's strongly recommend to leave this option empty or `AUTO`. Available values: `AUTO`,
        /// `VERSION_11`, `VERSION_12`.
        /// </summary>
        [Output("format")]
        public Output<string?> Format { get; private set; } = null!;

        /// <summary>
        /// If true, snapshots of multiple volumes will be taken simultaneously. Default `true`.
        /// </summary>
        [Output("multiVolumeSnapshottingEnabled")]
        public Output<bool?> MultiVolumeSnapshottingEnabled { get; private set; } = null!;

        /// <summary>
        /// The resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Time windows for performance limitations of backup. Default `false`.
        /// </summary>
        [Output("performanceWindowEnabled")]
        public Output<bool?> PerformanceWindowEnabled { get; private set; } = null!;

        /// <summary>
        /// Preserves file security settings. It's better to set this option to true. Default `true`.
        /// </summary>
        [Output("preserveFileSecuritySettings")]
        public Output<bool?> PreserveFileSecuritySettings { get; private set; } = null!;

        /// <summary>
        /// If true, a quiesced snapshot of the virtual machine will be taken. Default `false`.
        /// </summary>
        [Output("quiesceSnapshottingEnabled")]
        public Output<bool?> QuiesceSnapshottingEnabled { get; private set; } = null!;

        /// <summary>
        /// Amount of reattempts that should be performed while trying to make backup at the host.
        /// </summary>
        [Output("reattempts")]
        public Output<Outputs.BackupPolicyReattempts> Reattempts { get; private set; } = null!;

        /// <summary>
        /// Retention policy for backups. Allows to setup backups lifecycle.
        /// </summary>
        [Output("retention")]
        public Output<Outputs.BackupPolicyRetention> Retention { get; private set; } = null!;

        /// <summary>
        /// Schedule settings for creating backups on the host.
        /// </summary>
        [Output("scheduling")]
        public Output<Outputs.BackupPolicyScheduling> Scheduling { get; private set; } = null!;

        /// <summary>
        /// If true, a user interaction will be avoided when possible. Default `true`.
        /// </summary>
        [Output("silentModeEnabled")]
        public Output<bool?> SilentModeEnabled { get; private set; } = null!;

        /// <summary>
        /// Determines the size to split backups. It's better to leave this option unchanged. Default `9223372036854775807`.
        /// </summary>
        [Output("splittingBytes")]
        public Output<string?> SplittingBytes { get; private set; } = null!;

        /// <summary>
        /// The update timestamp of the resource.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// Amount of reattempts that should be performed while trying to make snapshot.
        /// </summary>
        [Output("vmSnapshotReattempts")]
        public Output<Outputs.BackupPolicyVmSnapshotReattempts> VmSnapshotReattempts { get; private set; } = null!;

        /// <summary>
        /// Settings for the volume shadow copy service. Available values are: `NATIVE`, `TARGET_SYSTEM_DEFINED`. Default `NATIVE`.
        /// </summary>
        [Output("vssProvider")]
        public Output<string?> VssProvider { get; private set; } = null!;


        /// <summary>
        /// Create a BackupPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BackupPolicy(string name, BackupPolicyArgs args, CustomResourceOptions? options = null)
            : base("yandex:index/backupPolicy:BackupPolicy", name, args ?? new BackupPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BackupPolicy(string name, Input<string> id, BackupPolicyState? state = null, CustomResourceOptions? options = null)
            : base("yandex:index/backupPolicy:BackupPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BackupPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BackupPolicy Get(string name, Input<string> id, BackupPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new BackupPolicy(name, id, state, options);
        }
    }

    public sealed class BackupPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of generated archives. Default `[Machine Name]-[Plan ID]-[Unique ID]a`.
        /// </summary>
        [Input("archiveName")]
        public Input<string>? ArchiveName { get; set; }

        /// <summary>
        /// Configuration of Changed Block Tracking. Available values are: `USE_IF_ENABLED`, `ENABLED_AND_USE`, `DO_NOT_USE`.
        /// Default `DO_NOT_USE`.
        /// </summary>
        [Input("cbt")]
        public Input<string>? Cbt { get; set; }

        /// <summary>
        /// Archive compression level. Affects CPU. Available values: `NORMAL`, `HIGH`, `MAX`, `OFF`. Default: `NORMAL`.
        /// </summary>
        [Input("compression")]
        public Input<string>? Compression { get; set; }

        /// <summary>
        /// If true, determines whether a file has changed by the file size and timestamp. Otherwise, the entire file contents are
        /// compared to those stored in the backup.
        /// </summary>
        [Input("fastBackupEnabled")]
        public Input<bool>? FastBackupEnabled { get; set; }

        /// <summary>
        /// File filters to specify masks of files to backup or to exclude of backuping.
        /// </summary>
        [Input("fileFilters")]
        public Input<Inputs.BackupPolicyFileFiltersArgs>? FileFilters { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// Format of the backup. It's strongly recommend to leave this option empty or `AUTO`. Available values: `AUTO`,
        /// `VERSION_11`, `VERSION_12`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// If true, snapshots of multiple volumes will be taken simultaneously. Default `true`.
        /// </summary>
        [Input("multiVolumeSnapshottingEnabled")]
        public Input<bool>? MultiVolumeSnapshottingEnabled { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Time windows for performance limitations of backup. Default `false`.
        /// </summary>
        [Input("performanceWindowEnabled")]
        public Input<bool>? PerformanceWindowEnabled { get; set; }

        /// <summary>
        /// Preserves file security settings. It's better to set this option to true. Default `true`.
        /// </summary>
        [Input("preserveFileSecuritySettings")]
        public Input<bool>? PreserveFileSecuritySettings { get; set; }

        /// <summary>
        /// If true, a quiesced snapshot of the virtual machine will be taken. Default `false`.
        /// </summary>
        [Input("quiesceSnapshottingEnabled")]
        public Input<bool>? QuiesceSnapshottingEnabled { get; set; }

        /// <summary>
        /// Amount of reattempts that should be performed while trying to make backup at the host.
        /// </summary>
        [Input("reattempts", required: true)]
        public Input<Inputs.BackupPolicyReattemptsArgs> Reattempts { get; set; } = null!;

        /// <summary>
        /// Retention policy for backups. Allows to setup backups lifecycle.
        /// </summary>
        [Input("retention", required: true)]
        public Input<Inputs.BackupPolicyRetentionArgs> Retention { get; set; } = null!;

        /// <summary>
        /// Schedule settings for creating backups on the host.
        /// </summary>
        [Input("scheduling", required: true)]
        public Input<Inputs.BackupPolicySchedulingArgs> Scheduling { get; set; } = null!;

        /// <summary>
        /// If true, a user interaction will be avoided when possible. Default `true`.
        /// </summary>
        [Input("silentModeEnabled")]
        public Input<bool>? SilentModeEnabled { get; set; }

        /// <summary>
        /// Determines the size to split backups. It's better to leave this option unchanged. Default `9223372036854775807`.
        /// </summary>
        [Input("splittingBytes")]
        public Input<string>? SplittingBytes { get; set; }

        /// <summary>
        /// Amount of reattempts that should be performed while trying to make snapshot.
        /// </summary>
        [Input("vmSnapshotReattempts", required: true)]
        public Input<Inputs.BackupPolicyVmSnapshotReattemptsArgs> VmSnapshotReattempts { get; set; } = null!;

        /// <summary>
        /// Settings for the volume shadow copy service. Available values are: `NATIVE`, `TARGET_SYSTEM_DEFINED`. Default `NATIVE`.
        /// </summary>
        [Input("vssProvider")]
        public Input<string>? VssProvider { get; set; }

        public BackupPolicyArgs()
        {
        }
        public static new BackupPolicyArgs Empty => new BackupPolicyArgs();
    }

    public sealed class BackupPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of generated archives. Default `[Machine Name]-[Plan ID]-[Unique ID]a`.
        /// </summary>
        [Input("archiveName")]
        public Input<string>? ArchiveName { get; set; }

        /// <summary>
        /// Configuration of Changed Block Tracking. Available values are: `USE_IF_ENABLED`, `ENABLED_AND_USE`, `DO_NOT_USE`.
        /// Default `DO_NOT_USE`.
        /// </summary>
        [Input("cbt")]
        public Input<string>? Cbt { get; set; }

        /// <summary>
        /// Archive compression level. Affects CPU. Available values: `NORMAL`, `HIGH`, `MAX`, `OFF`. Default: `NORMAL`.
        /// </summary>
        [Input("compression")]
        public Input<string>? Compression { get; set; }

        /// <summary>
        /// The creation timestamp of the resource.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// If this field is true, it means that the policy is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// If true, determines whether a file has changed by the file size and timestamp. Otherwise, the entire file contents are
        /// compared to those stored in the backup.
        /// </summary>
        [Input("fastBackupEnabled")]
        public Input<bool>? FastBackupEnabled { get; set; }

        /// <summary>
        /// File filters to specify masks of files to backup or to exclude of backuping.
        /// </summary>
        [Input("fileFilters")]
        public Input<Inputs.BackupPolicyFileFiltersGetArgs>? FileFilters { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// Format of the backup. It's strongly recommend to leave this option empty or `AUTO`. Available values: `AUTO`,
        /// `VERSION_11`, `VERSION_12`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// If true, snapshots of multiple volumes will be taken simultaneously. Default `true`.
        /// </summary>
        [Input("multiVolumeSnapshottingEnabled")]
        public Input<bool>? MultiVolumeSnapshottingEnabled { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Time windows for performance limitations of backup. Default `false`.
        /// </summary>
        [Input("performanceWindowEnabled")]
        public Input<bool>? PerformanceWindowEnabled { get; set; }

        /// <summary>
        /// Preserves file security settings. It's better to set this option to true. Default `true`.
        /// </summary>
        [Input("preserveFileSecuritySettings")]
        public Input<bool>? PreserveFileSecuritySettings { get; set; }

        /// <summary>
        /// If true, a quiesced snapshot of the virtual machine will be taken. Default `false`.
        /// </summary>
        [Input("quiesceSnapshottingEnabled")]
        public Input<bool>? QuiesceSnapshottingEnabled { get; set; }

        /// <summary>
        /// Amount of reattempts that should be performed while trying to make backup at the host.
        /// </summary>
        [Input("reattempts")]
        public Input<Inputs.BackupPolicyReattemptsGetArgs>? Reattempts { get; set; }

        /// <summary>
        /// Retention policy for backups. Allows to setup backups lifecycle.
        /// </summary>
        [Input("retention")]
        public Input<Inputs.BackupPolicyRetentionGetArgs>? Retention { get; set; }

        /// <summary>
        /// Schedule settings for creating backups on the host.
        /// </summary>
        [Input("scheduling")]
        public Input<Inputs.BackupPolicySchedulingGetArgs>? Scheduling { get; set; }

        /// <summary>
        /// If true, a user interaction will be avoided when possible. Default `true`.
        /// </summary>
        [Input("silentModeEnabled")]
        public Input<bool>? SilentModeEnabled { get; set; }

        /// <summary>
        /// Determines the size to split backups. It's better to leave this option unchanged. Default `9223372036854775807`.
        /// </summary>
        [Input("splittingBytes")]
        public Input<string>? SplittingBytes { get; set; }

        /// <summary>
        /// The update timestamp of the resource.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// Amount of reattempts that should be performed while trying to make snapshot.
        /// </summary>
        [Input("vmSnapshotReattempts")]
        public Input<Inputs.BackupPolicyVmSnapshotReattemptsGetArgs>? VmSnapshotReattempts { get; set; }

        /// <summary>
        /// Settings for the volume shadow copy service. Available values are: `NATIVE`, `TARGET_SYSTEM_DEFINED`. Default `NATIVE`.
        /// </summary>
        [Input("vssProvider")]
        public Input<string>? VssProvider { get; set; }

        public BackupPolicyState()
        {
        }
        public static new BackupPolicyState Empty => new BackupPolicyState();
    }
}
