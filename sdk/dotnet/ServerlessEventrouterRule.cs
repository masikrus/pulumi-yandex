// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    [YandexResourceType("yandex:index/serverlessEventrouterRule:ServerlessEventrouterRule")]
    public partial class ServerlessEventrouterRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the bus that the rule belongs to
        /// </summary>
        [Output("busId")]
        public Output<string> BusId { get; private set; } = null!;

        /// <summary>
        /// ID of the cloud that the rule resides in
        /// </summary>
        [Output("cloudId")]
        public Output<string> CloudId { get; private set; } = null!;

        /// <summary>
        /// ContainerTarget
        /// </summary>
        [Output("containers")]
        public Output<ImmutableArray<Outputs.ServerlessEventrouterRuleContainer>> Containers { get; private set; } = null!;

        /// <summary>
        /// Creation timestamp
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Deletion protection
        /// </summary>
        [Output("deletionProtection")]
        public Output<bool> DeletionProtection { get; private set; } = null!;

        /// <summary>
        /// Description of the rule
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// ID of the folder that the rule resides in
        /// </summary>
        [Output("folderId")]
        public Output<string> FolderId { get; private set; } = null!;

        /// <summary>
        /// FunctionTarget
        /// </summary>
        [Output("functions")]
        public Output<ImmutableArray<Outputs.ServerlessEventrouterRuleFunction>> Functions { get; private set; } = null!;

        /// <summary>
        /// GatewayWebsocketBroadcastTarget
        /// </summary>
        [Output("gatewayWebsocketBroadcasts")]
        public Output<ImmutableArray<Outputs.ServerlessEventrouterRuleGatewayWebsocketBroadcast>> GatewayWebsocketBroadcasts { get; private set; } = null!;

        /// <summary>
        /// JQ filter for matching events
        /// </summary>
        [Output("jqFilter")]
        public Output<string?> JqFilter { get; private set; } = null!;

        /// <summary>
        /// Rule labels
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// LoggingTarget. Includes either log_group_id or folder_id
        /// </summary>
        [Output("loggings")]
        public Output<ImmutableArray<Outputs.ServerlessEventrouterRuleLogging>> Loggings { get; private set; } = null!;

        /// <summary>
        /// Name of the rule
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// WorkflowTarget
        /// </summary>
        [Output("workflows")]
        public Output<ImmutableArray<Outputs.ServerlessEventrouterRuleWorkflow>> Workflows { get; private set; } = null!;

        /// <summary>
        /// YdsTarget
        /// </summary>
        [Output("yds")]
        public Output<ImmutableArray<Outputs.ServerlessEventrouterRuleYd>> Yds { get; private set; } = null!;

        /// <summary>
        /// YmqTarget
        /// </summary>
        [Output("ymqs")]
        public Output<ImmutableArray<Outputs.ServerlessEventrouterRuleYmq>> Ymqs { get; private set; } = null!;


        /// <summary>
        /// Create a ServerlessEventrouterRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServerlessEventrouterRule(string name, ServerlessEventrouterRuleArgs args, CustomResourceOptions? options = null)
            : base("yandex:index/serverlessEventrouterRule:ServerlessEventrouterRule", name, args ?? new ServerlessEventrouterRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServerlessEventrouterRule(string name, Input<string> id, ServerlessEventrouterRuleState? state = null, CustomResourceOptions? options = null)
            : base("yandex:index/serverlessEventrouterRule:ServerlessEventrouterRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServerlessEventrouterRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServerlessEventrouterRule Get(string name, Input<string> id, ServerlessEventrouterRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new ServerlessEventrouterRule(name, id, state, options);
        }
    }

    public sealed class ServerlessEventrouterRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the bus that the rule belongs to
        /// </summary>
        [Input("busId", required: true)]
        public Input<string> BusId { get; set; } = null!;

        [Input("containers")]
        private InputList<Inputs.ServerlessEventrouterRuleContainerArgs>? _containers;

        /// <summary>
        /// ContainerTarget
        /// </summary>
        public InputList<Inputs.ServerlessEventrouterRuleContainerArgs> Containers
        {
            get => _containers ?? (_containers = new InputList<Inputs.ServerlessEventrouterRuleContainerArgs>());
            set => _containers = value;
        }

        /// <summary>
        /// Description of the rule
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("functions")]
        private InputList<Inputs.ServerlessEventrouterRuleFunctionArgs>? _functions;

        /// <summary>
        /// FunctionTarget
        /// </summary>
        public InputList<Inputs.ServerlessEventrouterRuleFunctionArgs> Functions
        {
            get => _functions ?? (_functions = new InputList<Inputs.ServerlessEventrouterRuleFunctionArgs>());
            set => _functions = value;
        }

        [Input("gatewayWebsocketBroadcasts")]
        private InputList<Inputs.ServerlessEventrouterRuleGatewayWebsocketBroadcastArgs>? _gatewayWebsocketBroadcasts;

        /// <summary>
        /// GatewayWebsocketBroadcastTarget
        /// </summary>
        public InputList<Inputs.ServerlessEventrouterRuleGatewayWebsocketBroadcastArgs> GatewayWebsocketBroadcasts
        {
            get => _gatewayWebsocketBroadcasts ?? (_gatewayWebsocketBroadcasts = new InputList<Inputs.ServerlessEventrouterRuleGatewayWebsocketBroadcastArgs>());
            set => _gatewayWebsocketBroadcasts = value;
        }

        /// <summary>
        /// JQ filter for matching events
        /// </summary>
        [Input("jqFilter")]
        public Input<string>? JqFilter { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Rule labels
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("loggings")]
        private InputList<Inputs.ServerlessEventrouterRuleLoggingArgs>? _loggings;

        /// <summary>
        /// LoggingTarget. Includes either log_group_id or folder_id
        /// </summary>
        public InputList<Inputs.ServerlessEventrouterRuleLoggingArgs> Loggings
        {
            get => _loggings ?? (_loggings = new InputList<Inputs.ServerlessEventrouterRuleLoggingArgs>());
            set => _loggings = value;
        }

        /// <summary>
        /// Name of the rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("workflows")]
        private InputList<Inputs.ServerlessEventrouterRuleWorkflowArgs>? _workflows;

        /// <summary>
        /// WorkflowTarget
        /// </summary>
        public InputList<Inputs.ServerlessEventrouterRuleWorkflowArgs> Workflows
        {
            get => _workflows ?? (_workflows = new InputList<Inputs.ServerlessEventrouterRuleWorkflowArgs>());
            set => _workflows = value;
        }

        [Input("yds")]
        private InputList<Inputs.ServerlessEventrouterRuleYdArgs>? _yds;

        /// <summary>
        /// YdsTarget
        /// </summary>
        public InputList<Inputs.ServerlessEventrouterRuleYdArgs> Yds
        {
            get => _yds ?? (_yds = new InputList<Inputs.ServerlessEventrouterRuleYdArgs>());
            set => _yds = value;
        }

        [Input("ymqs")]
        private InputList<Inputs.ServerlessEventrouterRuleYmqArgs>? _ymqs;

        /// <summary>
        /// YmqTarget
        /// </summary>
        public InputList<Inputs.ServerlessEventrouterRuleYmqArgs> Ymqs
        {
            get => _ymqs ?? (_ymqs = new InputList<Inputs.ServerlessEventrouterRuleYmqArgs>());
            set => _ymqs = value;
        }

        public ServerlessEventrouterRuleArgs()
        {
        }
        public static new ServerlessEventrouterRuleArgs Empty => new ServerlessEventrouterRuleArgs();
    }

    public sealed class ServerlessEventrouterRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the bus that the rule belongs to
        /// </summary>
        [Input("busId")]
        public Input<string>? BusId { get; set; }

        /// <summary>
        /// ID of the cloud that the rule resides in
        /// </summary>
        [Input("cloudId")]
        public Input<string>? CloudId { get; set; }

        [Input("containers")]
        private InputList<Inputs.ServerlessEventrouterRuleContainerGetArgs>? _containers;

        /// <summary>
        /// ContainerTarget
        /// </summary>
        public InputList<Inputs.ServerlessEventrouterRuleContainerGetArgs> Containers
        {
            get => _containers ?? (_containers = new InputList<Inputs.ServerlessEventrouterRuleContainerGetArgs>());
            set => _containers = value;
        }

        /// <summary>
        /// Creation timestamp
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Deletion protection
        /// </summary>
        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// Description of the rule
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// ID of the folder that the rule resides in
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("functions")]
        private InputList<Inputs.ServerlessEventrouterRuleFunctionGetArgs>? _functions;

        /// <summary>
        /// FunctionTarget
        /// </summary>
        public InputList<Inputs.ServerlessEventrouterRuleFunctionGetArgs> Functions
        {
            get => _functions ?? (_functions = new InputList<Inputs.ServerlessEventrouterRuleFunctionGetArgs>());
            set => _functions = value;
        }

        [Input("gatewayWebsocketBroadcasts")]
        private InputList<Inputs.ServerlessEventrouterRuleGatewayWebsocketBroadcastGetArgs>? _gatewayWebsocketBroadcasts;

        /// <summary>
        /// GatewayWebsocketBroadcastTarget
        /// </summary>
        public InputList<Inputs.ServerlessEventrouterRuleGatewayWebsocketBroadcastGetArgs> GatewayWebsocketBroadcasts
        {
            get => _gatewayWebsocketBroadcasts ?? (_gatewayWebsocketBroadcasts = new InputList<Inputs.ServerlessEventrouterRuleGatewayWebsocketBroadcastGetArgs>());
            set => _gatewayWebsocketBroadcasts = value;
        }

        /// <summary>
        /// JQ filter for matching events
        /// </summary>
        [Input("jqFilter")]
        public Input<string>? JqFilter { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Rule labels
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("loggings")]
        private InputList<Inputs.ServerlessEventrouterRuleLoggingGetArgs>? _loggings;

        /// <summary>
        /// LoggingTarget. Includes either log_group_id or folder_id
        /// </summary>
        public InputList<Inputs.ServerlessEventrouterRuleLoggingGetArgs> Loggings
        {
            get => _loggings ?? (_loggings = new InputList<Inputs.ServerlessEventrouterRuleLoggingGetArgs>());
            set => _loggings = value;
        }

        /// <summary>
        /// Name of the rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("workflows")]
        private InputList<Inputs.ServerlessEventrouterRuleWorkflowGetArgs>? _workflows;

        /// <summary>
        /// WorkflowTarget
        /// </summary>
        public InputList<Inputs.ServerlessEventrouterRuleWorkflowGetArgs> Workflows
        {
            get => _workflows ?? (_workflows = new InputList<Inputs.ServerlessEventrouterRuleWorkflowGetArgs>());
            set => _workflows = value;
        }

        [Input("yds")]
        private InputList<Inputs.ServerlessEventrouterRuleYdGetArgs>? _yds;

        /// <summary>
        /// YdsTarget
        /// </summary>
        public InputList<Inputs.ServerlessEventrouterRuleYdGetArgs> Yds
        {
            get => _yds ?? (_yds = new InputList<Inputs.ServerlessEventrouterRuleYdGetArgs>());
            set => _yds = value;
        }

        [Input("ymqs")]
        private InputList<Inputs.ServerlessEventrouterRuleYmqGetArgs>? _ymqs;

        /// <summary>
        /// YmqTarget
        /// </summary>
        public InputList<Inputs.ServerlessEventrouterRuleYmqGetArgs> Ymqs
        {
            get => _ymqs ?? (_ymqs = new InputList<Inputs.ServerlessEventrouterRuleYmqGetArgs>());
            set => _ymqs = value;
        }

        public ServerlessEventrouterRuleState()
        {
        }
        public static new ServerlessEventrouterRuleState Empty => new ServerlessEventrouterRuleState();
    }
}
