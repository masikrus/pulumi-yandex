// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    [YandexResourceType("yandex:index/kubernetesNodeGroup:KubernetesNodeGroup")]
    public partial class KubernetesNodeGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This argument specify subnets (zones), that will be used by node group compute instances.
        /// </summary>
        [Output("allocationPolicy")]
        public Output<Outputs.KubernetesNodeGroupAllocationPolicy> AllocationPolicy { get; private set; } = null!;

        /// <summary>
        /// A list of allowed unsafe `sysctl` parameters for this node group. For more details see
        /// [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster).
        /// </summary>
        [Output("allowedUnsafeSysctls")]
        public Output<ImmutableArray<string>> AllowedUnsafeSysctls { get; private set; } = null!;

        /// <summary>
        /// The ID of the Kubernetes cluster that this node group belongs to.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The creation timestamp of the resource.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Deploy policy of the node group.
        /// </summary>
        [Output("deployPolicy")]
        public Output<Outputs.KubernetesNodeGroupDeployPolicy> DeployPolicy { get; private set; } = null!;

        /// <summary>
        /// The resource description.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// ID of instance group that is used to manage this Kubernetes node group.
        /// </summary>
        [Output("instanceGroupId")]
        public Output<string> InstanceGroupId { get; private set; } = null!;

        /// <summary>
        /// Template used to create compute instances in this Kubernetes node group.
        /// </summary>
        [Output("instanceTemplate")]
        public Output<Outputs.KubernetesNodeGroupInstanceTemplate> InstanceTemplate { get; private set; } = null!;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// Maintenance policy for this Kubernetes node group. If policy is omitted, automatic revision upgrades are enabled and
        /// could happen at any time. Revision upgrades are performed only within the same minor version, e.g. `1.29`. Minor version
        /// upgrades (e.g. `1.29`-&gt;`1.30`) should be performed manually.
        /// </summary>
        [Output("maintenancePolicy")]
        public Output<Outputs.KubernetesNodeGroupMaintenancePolicy> MaintenancePolicy { get; private set; } = null!;

        /// <summary>
        /// The resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A set of key/value label pairs, that are assigned to all the nodes of this Kubernetes node group.
        /// </summary>
        [Output("nodeLabels")]
        public Output<ImmutableDictionary<string, string>?> NodeLabels { get; private set; } = null!;

        /// <summary>
        /// A list of Kubernetes taints, that are applied to all the nodes of this Kubernetes node group.
        /// </summary>
        [Output("nodeTaints")]
        public Output<ImmutableArray<string>> NodeTaints { get; private set; } = null!;

        /// <summary>
        /// Scale policy of the node group.
        /// </summary>
        [Output("scalePolicy")]
        public Output<Outputs.KubernetesNodeGroupScalePolicy> ScalePolicy { get; private set; } = null!;

        /// <summary>
        /// Status of the Kubernetes node group.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Version of Kubernetes that will be used for Kubernetes node group.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;

        /// <summary>
        /// Information about Kubernetes node group version.
        /// </summary>
        [Output("versionInfos")]
        public Output<ImmutableArray<Outputs.KubernetesNodeGroupVersionInfo>> VersionInfos { get; private set; } = null!;


        /// <summary>
        /// Create a KubernetesNodeGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KubernetesNodeGroup(string name, KubernetesNodeGroupArgs args, CustomResourceOptions? options = null)
            : base("yandex:index/kubernetesNodeGroup:KubernetesNodeGroup", name, args ?? new KubernetesNodeGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KubernetesNodeGroup(string name, Input<string> id, KubernetesNodeGroupState? state = null, CustomResourceOptions? options = null)
            : base("yandex:index/kubernetesNodeGroup:KubernetesNodeGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KubernetesNodeGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KubernetesNodeGroup Get(string name, Input<string> id, KubernetesNodeGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new KubernetesNodeGroup(name, id, state, options);
        }
    }

    public sealed class KubernetesNodeGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This argument specify subnets (zones), that will be used by node group compute instances.
        /// </summary>
        [Input("allocationPolicy")]
        public Input<Inputs.KubernetesNodeGroupAllocationPolicyArgs>? AllocationPolicy { get; set; }

        [Input("allowedUnsafeSysctls")]
        private InputList<string>? _allowedUnsafeSysctls;

        /// <summary>
        /// A list of allowed unsafe `sysctl` parameters for this node group. For more details see
        /// [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster).
        /// </summary>
        public InputList<string> AllowedUnsafeSysctls
        {
            get => _allowedUnsafeSysctls ?? (_allowedUnsafeSysctls = new InputList<string>());
            set => _allowedUnsafeSysctls = value;
        }

        /// <summary>
        /// The ID of the Kubernetes cluster that this node group belongs to.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Deploy policy of the node group.
        /// </summary>
        [Input("deployPolicy")]
        public Input<Inputs.KubernetesNodeGroupDeployPolicyArgs>? DeployPolicy { get; set; }

        /// <summary>
        /// The resource description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Template used to create compute instances in this Kubernetes node group.
        /// </summary>
        [Input("instanceTemplate", required: true)]
        public Input<Inputs.KubernetesNodeGroupInstanceTemplateArgs> InstanceTemplate { get; set; } = null!;

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Maintenance policy for this Kubernetes node group. If policy is omitted, automatic revision upgrades are enabled and
        /// could happen at any time. Revision upgrades are performed only within the same minor version, e.g. `1.29`. Minor version
        /// upgrades (e.g. `1.29`-&gt;`1.30`) should be performed manually.
        /// </summary>
        [Input("maintenancePolicy")]
        public Input<Inputs.KubernetesNodeGroupMaintenancePolicyArgs>? MaintenancePolicy { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodeLabels")]
        private InputMap<string>? _nodeLabels;

        /// <summary>
        /// A set of key/value label pairs, that are assigned to all the nodes of this Kubernetes node group.
        /// </summary>
        public InputMap<string> NodeLabels
        {
            get => _nodeLabels ?? (_nodeLabels = new InputMap<string>());
            set => _nodeLabels = value;
        }

        [Input("nodeTaints")]
        private InputList<string>? _nodeTaints;

        /// <summary>
        /// A list of Kubernetes taints, that are applied to all the nodes of this Kubernetes node group.
        /// </summary>
        public InputList<string> NodeTaints
        {
            get => _nodeTaints ?? (_nodeTaints = new InputList<string>());
            set => _nodeTaints = value;
        }

        /// <summary>
        /// Scale policy of the node group.
        /// </summary>
        [Input("scalePolicy", required: true)]
        public Input<Inputs.KubernetesNodeGroupScalePolicyArgs> ScalePolicy { get; set; } = null!;

        /// <summary>
        /// Version of Kubernetes that will be used for Kubernetes node group.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public KubernetesNodeGroupArgs()
        {
        }
        public static new KubernetesNodeGroupArgs Empty => new KubernetesNodeGroupArgs();
    }

    public sealed class KubernetesNodeGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This argument specify subnets (zones), that will be used by node group compute instances.
        /// </summary>
        [Input("allocationPolicy")]
        public Input<Inputs.KubernetesNodeGroupAllocationPolicyGetArgs>? AllocationPolicy { get; set; }

        [Input("allowedUnsafeSysctls")]
        private InputList<string>? _allowedUnsafeSysctls;

        /// <summary>
        /// A list of allowed unsafe `sysctl` parameters for this node group. For more details see
        /// [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster).
        /// </summary>
        public InputList<string> AllowedUnsafeSysctls
        {
            get => _allowedUnsafeSysctls ?? (_allowedUnsafeSysctls = new InputList<string>());
            set => _allowedUnsafeSysctls = value;
        }

        /// <summary>
        /// The ID of the Kubernetes cluster that this node group belongs to.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The creation timestamp of the resource.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Deploy policy of the node group.
        /// </summary>
        [Input("deployPolicy")]
        public Input<Inputs.KubernetesNodeGroupDeployPolicyGetArgs>? DeployPolicy { get; set; }

        /// <summary>
        /// The resource description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// ID of instance group that is used to manage this Kubernetes node group.
        /// </summary>
        [Input("instanceGroupId")]
        public Input<string>? InstanceGroupId { get; set; }

        /// <summary>
        /// Template used to create compute instances in this Kubernetes node group.
        /// </summary>
        [Input("instanceTemplate")]
        public Input<Inputs.KubernetesNodeGroupInstanceTemplateGetArgs>? InstanceTemplate { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Maintenance policy for this Kubernetes node group. If policy is omitted, automatic revision upgrades are enabled and
        /// could happen at any time. Revision upgrades are performed only within the same minor version, e.g. `1.29`. Minor version
        /// upgrades (e.g. `1.29`-&gt;`1.30`) should be performed manually.
        /// </summary>
        [Input("maintenancePolicy")]
        public Input<Inputs.KubernetesNodeGroupMaintenancePolicyGetArgs>? MaintenancePolicy { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodeLabels")]
        private InputMap<string>? _nodeLabels;

        /// <summary>
        /// A set of key/value label pairs, that are assigned to all the nodes of this Kubernetes node group.
        /// </summary>
        public InputMap<string> NodeLabels
        {
            get => _nodeLabels ?? (_nodeLabels = new InputMap<string>());
            set => _nodeLabels = value;
        }

        [Input("nodeTaints")]
        private InputList<string>? _nodeTaints;

        /// <summary>
        /// A list of Kubernetes taints, that are applied to all the nodes of this Kubernetes node group.
        /// </summary>
        public InputList<string> NodeTaints
        {
            get => _nodeTaints ?? (_nodeTaints = new InputList<string>());
            set => _nodeTaints = value;
        }

        /// <summary>
        /// Scale policy of the node group.
        /// </summary>
        [Input("scalePolicy")]
        public Input<Inputs.KubernetesNodeGroupScalePolicyGetArgs>? ScalePolicy { get; set; }

        /// <summary>
        /// Status of the Kubernetes node group.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Version of Kubernetes that will be used for Kubernetes node group.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        [Input("versionInfos")]
        private InputList<Inputs.KubernetesNodeGroupVersionInfoGetArgs>? _versionInfos;

        /// <summary>
        /// Information about Kubernetes node group version.
        /// </summary>
        public InputList<Inputs.KubernetesNodeGroupVersionInfoGetArgs> VersionInfos
        {
            get => _versionInfos ?? (_versionInfos = new InputList<Inputs.KubernetesNodeGroupVersionInfoGetArgs>());
            set => _versionInfos = value;
        }

        public KubernetesNodeGroupState()
        {
        }
        public static new KubernetesNodeGroupState Empty => new KubernetesNodeGroupState();
    }
}
