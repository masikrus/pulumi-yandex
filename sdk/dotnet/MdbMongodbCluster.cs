// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    [YandexResourceType("yandex:index/mdbMongodbCluster:MdbMongodbCluster")]
    public partial class MdbMongodbCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration of the MongoDB subcluster.
        /// </summary>
        [Output("clusterConfig")]
        public Output<Outputs.MdbMongodbClusterClusterConfig> ClusterConfig { get; private set; } = null!;

        /// <summary>
        /// The ID of the cluster.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The creation timestamp of the resource.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// A database of the MongoDB cluster.
        /// </summary>
        [Output("databases")]
        public Output<ImmutableArray<Outputs.MdbMongodbClusterDatabase>> Databases { get; private set; } = null!;

        /// <summary>
        /// The `true` value means that resource is protected from accidental deletion.
        /// </summary>
        [Output("deletionProtection")]
        public Output<bool> DeletionProtection { get; private set; } = null!;

        /// <summary>
        /// The resource description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("diskSizeAutoscalingMongocfg")]
        public Output<Outputs.MdbMongodbClusterDiskSizeAutoscalingMongocfg> DiskSizeAutoscalingMongocfg { get; private set; } = null!;

        [Output("diskSizeAutoscalingMongod")]
        public Output<Outputs.MdbMongodbClusterDiskSizeAutoscalingMongod> DiskSizeAutoscalingMongod { get; private set; } = null!;

        [Output("diskSizeAutoscalingMongoinfra")]
        public Output<Outputs.MdbMongodbClusterDiskSizeAutoscalingMongoinfra> DiskSizeAutoscalingMongoinfra { get; private set; } = null!;

        [Output("diskSizeAutoscalingMongos")]
        public Output<Outputs.MdbMongodbClusterDiskSizeAutoscalingMongos> DiskSizeAutoscalingMongos { get; private set; } = null!;

        /// <summary>
        /// Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
        /// </summary>
        [Output("environment")]
        public Output<string> Environment { get; private set; } = null!;

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Output("folderId")]
        public Output<string> FolderId { get; private set; } = null!;

        /// <summary>
        /// Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information
        /// see `health` field of JSON representation in [the official
        /// documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
        /// </summary>
        [Output("health")]
        public Output<string> Health { get; private set; } = null!;

        /// <summary>
        /// A host of the MongoDB cluster.
        /// </summary>
        [Output("hosts")]
        public Output<ImmutableArray<Outputs.MdbMongodbClusterHost>> Hosts { get; private set; } = null!;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// Maintenance window settings of the MongoDB cluster.
        /// </summary>
        [Output("maintenanceWindow")]
        public Output<Outputs.MdbMongodbClusterMaintenanceWindow> MaintenanceWindow { get; private set; } = null!;

        /// <summary>
        /// The resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The `VPC Network ID` of subnets which resource attached to.
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// (**DEPRECATED**, use `resources_*` instead) Resources allocated to hosts of the MongoDB cluster.
        /// </summary>
        [Output("resources")]
        public Output<Outputs.MdbMongodbClusterResources?> Resources { get; private set; } = null!;

        /// <summary>
        /// Resources allocated to `mongocfg` hosts of the MongoDB cluster.
        /// </summary>
        [Output("resourcesMongocfg")]
        public Output<Outputs.MdbMongodbClusterResourcesMongocfg?> ResourcesMongocfg { get; private set; } = null!;

        /// <summary>
        /// Resources allocated to `mongod` hosts of the MongoDB cluster.
        /// </summary>
        [Output("resourcesMongod")]
        public Output<Outputs.MdbMongodbClusterResourcesMongod?> ResourcesMongod { get; private set; } = null!;

        /// <summary>
        /// Resources allocated to `mongoinfra` hosts of the MongoDB cluster.
        /// </summary>
        [Output("resourcesMongoinfra")]
        public Output<Outputs.MdbMongodbClusterResourcesMongoinfra?> ResourcesMongoinfra { get; private set; } = null!;

        /// <summary>
        /// Resources allocated to `mongos` hosts of the MongoDB cluster.
        /// </summary>
        [Output("resourcesMongos")]
        public Output<Outputs.MdbMongodbClusterResourcesMongos?> ResourcesMongos { get; private set; } = null!;

        /// <summary>
        /// The cluster will be created from the specified backup.
        /// </summary>
        [Output("restore")]
        public Output<Outputs.MdbMongodbClusterRestore?> Restore { get; private set; } = null!;

        /// <summary>
        /// The list of security groups applied to resource or their components.
        /// </summary>
        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// MongoDB Cluster mode enabled/disabled.
        /// </summary>
        [Output("sharded")]
        public Output<bool> Sharded { get; private set; } = null!;

        /// <summary>
        /// Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or
        /// `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official
        /// documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// A user of the MongoDB cluster.
        /// </summary>
        [Output("users")]
        public Output<ImmutableArray<Outputs.MdbMongodbClusterUser>> Users { get; private set; } = null!;


        /// <summary>
        /// Create a MdbMongodbCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MdbMongodbCluster(string name, MdbMongodbClusterArgs args, CustomResourceOptions? options = null)
            : base("yandex:index/mdbMongodbCluster:MdbMongodbCluster", name, args ?? new MdbMongodbClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MdbMongodbCluster(string name, Input<string> id, MdbMongodbClusterState? state = null, CustomResourceOptions? options = null)
            : base("yandex:index/mdbMongodbCluster:MdbMongodbCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MdbMongodbCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MdbMongodbCluster Get(string name, Input<string> id, MdbMongodbClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new MdbMongodbCluster(name, id, state, options);
        }
    }

    public sealed class MdbMongodbClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration of the MongoDB subcluster.
        /// </summary>
        [Input("clusterConfig", required: true)]
        public Input<Inputs.MdbMongodbClusterClusterConfigArgs> ClusterConfig { get; set; } = null!;

        /// <summary>
        /// The ID of the cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("databases")]
        private InputList<Inputs.MdbMongodbClusterDatabaseArgs>? _databases;

        /// <summary>
        /// A database of the MongoDB cluster.
        /// </summary>
        [Obsolete(@"to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database")]
        public InputList<Inputs.MdbMongodbClusterDatabaseArgs> Databases
        {
            get => _databases ?? (_databases = new InputList<Inputs.MdbMongodbClusterDatabaseArgs>());
            set => _databases = value;
        }

        /// <summary>
        /// The `true` value means that resource is protected from accidental deletion.
        /// </summary>
        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// The resource description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("diskSizeAutoscalingMongocfg")]
        public Input<Inputs.MdbMongodbClusterDiskSizeAutoscalingMongocfgArgs>? DiskSizeAutoscalingMongocfg { get; set; }

        [Input("diskSizeAutoscalingMongod")]
        public Input<Inputs.MdbMongodbClusterDiskSizeAutoscalingMongodArgs>? DiskSizeAutoscalingMongod { get; set; }

        [Input("diskSizeAutoscalingMongoinfra")]
        public Input<Inputs.MdbMongodbClusterDiskSizeAutoscalingMongoinfraArgs>? DiskSizeAutoscalingMongoinfra { get; set; }

        [Input("diskSizeAutoscalingMongos")]
        public Input<Inputs.MdbMongodbClusterDiskSizeAutoscalingMongosArgs>? DiskSizeAutoscalingMongos { get; set; }

        /// <summary>
        /// Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
        /// </summary>
        [Input("environment", required: true)]
        public Input<string> Environment { get; set; } = null!;

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("hosts", required: true)]
        private InputList<Inputs.MdbMongodbClusterHostArgs>? _hosts;

        /// <summary>
        /// A host of the MongoDB cluster.
        /// </summary>
        public InputList<Inputs.MdbMongodbClusterHostArgs> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<Inputs.MdbMongodbClusterHostArgs>());
            set => _hosts = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Maintenance window settings of the MongoDB cluster.
        /// </summary>
        [Input("maintenanceWindow")]
        public Input<Inputs.MdbMongodbClusterMaintenanceWindowArgs>? MaintenanceWindow { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The `VPC Network ID` of subnets which resource attached to.
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// (**DEPRECATED**, use `resources_*` instead) Resources allocated to hosts of the MongoDB cluster.
        /// </summary>
        [Input("resources")]
        public Input<Inputs.MdbMongodbClusterResourcesArgs>? Resources { get; set; }

        /// <summary>
        /// Resources allocated to `mongocfg` hosts of the MongoDB cluster.
        /// </summary>
        [Input("resourcesMongocfg")]
        public Input<Inputs.MdbMongodbClusterResourcesMongocfgArgs>? ResourcesMongocfg { get; set; }

        /// <summary>
        /// Resources allocated to `mongod` hosts of the MongoDB cluster.
        /// </summary>
        [Input("resourcesMongod")]
        public Input<Inputs.MdbMongodbClusterResourcesMongodArgs>? ResourcesMongod { get; set; }

        /// <summary>
        /// Resources allocated to `mongoinfra` hosts of the MongoDB cluster.
        /// </summary>
        [Input("resourcesMongoinfra")]
        public Input<Inputs.MdbMongodbClusterResourcesMongoinfraArgs>? ResourcesMongoinfra { get; set; }

        /// <summary>
        /// Resources allocated to `mongos` hosts of the MongoDB cluster.
        /// </summary>
        [Input("resourcesMongos")]
        public Input<Inputs.MdbMongodbClusterResourcesMongosArgs>? ResourcesMongos { get; set; }

        /// <summary>
        /// The cluster will be created from the specified backup.
        /// </summary>
        [Input("restore")]
        public Input<Inputs.MdbMongodbClusterRestoreArgs>? Restore { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// The list of security groups applied to resource or their components.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("users")]
        private InputList<Inputs.MdbMongodbClusterUserArgs>? _users;

        /// <summary>
        /// A user of the MongoDB cluster.
        /// </summary>
        [Obsolete(@"to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user")]
        public InputList<Inputs.MdbMongodbClusterUserArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.MdbMongodbClusterUserArgs>());
            set => _users = value;
        }

        public MdbMongodbClusterArgs()
        {
        }
        public static new MdbMongodbClusterArgs Empty => new MdbMongodbClusterArgs();
    }

    public sealed class MdbMongodbClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration of the MongoDB subcluster.
        /// </summary>
        [Input("clusterConfig")]
        public Input<Inputs.MdbMongodbClusterClusterConfigGetArgs>? ClusterConfig { get; set; }

        /// <summary>
        /// The ID of the cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The creation timestamp of the resource.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("databases")]
        private InputList<Inputs.MdbMongodbClusterDatabaseGetArgs>? _databases;

        /// <summary>
        /// A database of the MongoDB cluster.
        /// </summary>
        [Obsolete(@"to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database")]
        public InputList<Inputs.MdbMongodbClusterDatabaseGetArgs> Databases
        {
            get => _databases ?? (_databases = new InputList<Inputs.MdbMongodbClusterDatabaseGetArgs>());
            set => _databases = value;
        }

        /// <summary>
        /// The `true` value means that resource is protected from accidental deletion.
        /// </summary>
        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// The resource description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("diskSizeAutoscalingMongocfg")]
        public Input<Inputs.MdbMongodbClusterDiskSizeAutoscalingMongocfgGetArgs>? DiskSizeAutoscalingMongocfg { get; set; }

        [Input("diskSizeAutoscalingMongod")]
        public Input<Inputs.MdbMongodbClusterDiskSizeAutoscalingMongodGetArgs>? DiskSizeAutoscalingMongod { get; set; }

        [Input("diskSizeAutoscalingMongoinfra")]
        public Input<Inputs.MdbMongodbClusterDiskSizeAutoscalingMongoinfraGetArgs>? DiskSizeAutoscalingMongoinfra { get; set; }

        [Input("diskSizeAutoscalingMongos")]
        public Input<Inputs.MdbMongodbClusterDiskSizeAutoscalingMongosGetArgs>? DiskSizeAutoscalingMongos { get; set; }

        /// <summary>
        /// Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information
        /// see `health` field of JSON representation in [the official
        /// documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
        /// </summary>
        [Input("health")]
        public Input<string>? Health { get; set; }

        [Input("hosts")]
        private InputList<Inputs.MdbMongodbClusterHostGetArgs>? _hosts;

        /// <summary>
        /// A host of the MongoDB cluster.
        /// </summary>
        public InputList<Inputs.MdbMongodbClusterHostGetArgs> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<Inputs.MdbMongodbClusterHostGetArgs>());
            set => _hosts = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A set of key/value label pairs which assigned to resource.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Maintenance window settings of the MongoDB cluster.
        /// </summary>
        [Input("maintenanceWindow")]
        public Input<Inputs.MdbMongodbClusterMaintenanceWindowGetArgs>? MaintenanceWindow { get; set; }

        /// <summary>
        /// The resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The `VPC Network ID` of subnets which resource attached to.
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// (**DEPRECATED**, use `resources_*` instead) Resources allocated to hosts of the MongoDB cluster.
        /// </summary>
        [Input("resources")]
        public Input<Inputs.MdbMongodbClusterResourcesGetArgs>? Resources { get; set; }

        /// <summary>
        /// Resources allocated to `mongocfg` hosts of the MongoDB cluster.
        /// </summary>
        [Input("resourcesMongocfg")]
        public Input<Inputs.MdbMongodbClusterResourcesMongocfgGetArgs>? ResourcesMongocfg { get; set; }

        /// <summary>
        /// Resources allocated to `mongod` hosts of the MongoDB cluster.
        /// </summary>
        [Input("resourcesMongod")]
        public Input<Inputs.MdbMongodbClusterResourcesMongodGetArgs>? ResourcesMongod { get; set; }

        /// <summary>
        /// Resources allocated to `mongoinfra` hosts of the MongoDB cluster.
        /// </summary>
        [Input("resourcesMongoinfra")]
        public Input<Inputs.MdbMongodbClusterResourcesMongoinfraGetArgs>? ResourcesMongoinfra { get; set; }

        /// <summary>
        /// Resources allocated to `mongos` hosts of the MongoDB cluster.
        /// </summary>
        [Input("resourcesMongos")]
        public Input<Inputs.MdbMongodbClusterResourcesMongosGetArgs>? ResourcesMongos { get; set; }

        /// <summary>
        /// The cluster will be created from the specified backup.
        /// </summary>
        [Input("restore")]
        public Input<Inputs.MdbMongodbClusterRestoreGetArgs>? Restore { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// The list of security groups applied to resource or their components.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// MongoDB Cluster mode enabled/disabled.
        /// </summary>
        [Input("sharded")]
        public Input<bool>? Sharded { get; set; }

        /// <summary>
        /// Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or
        /// `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official
        /// documentation](https://yandex.cloud/docs/managed-mongodb/api-ref/Cluster/).
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("users")]
        private InputList<Inputs.MdbMongodbClusterUserGetArgs>? _users;

        /// <summary>
        /// A user of the MongoDB cluster.
        /// </summary>
        [Obsolete(@"to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user")]
        public InputList<Inputs.MdbMongodbClusterUserGetArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.MdbMongodbClusterUserGetArgs>());
            set => _users = value;
        }

        public MdbMongodbClusterState()
        {
        }
        public static new MdbMongodbClusterState Empty => new MdbMongodbClusterState();
    }
}
