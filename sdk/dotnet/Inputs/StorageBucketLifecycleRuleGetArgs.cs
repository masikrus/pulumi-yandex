// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Inputs
{

    public sealed class StorageBucketLifecycleRuleGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
        /// </summary>
        [Input("abortIncompleteMultipartUploadDays")]
        public Input<int>? AbortIncompleteMultipartUploadDays { get; set; }

        /// <summary>
        /// Specifies lifecycle rule status.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Specifies a period in the object's expire.
        /// </summary>
        [Input("expiration")]
        public Input<Inputs.StorageBucketLifecycleRuleExpirationGetArgs>? Expiration { get; set; }

        /// <summary>
        /// Filter block identifies one or more objects to which the rule applies. A Filter must have exactly one of Prefix, Tag, or And specified. The filter supports options listed below.
        /// 
        /// At least one of `abort_incomplete_multipart_upload_days`, `expiration`, `transition`, `noncurrent_version_expiration`, `noncurrent_version_transition` must be specified.
        /// </summary>
        [Input("filter")]
        public Input<Inputs.StorageBucketLifecycleRuleFilterGetArgs>? Filter { get; set; }

        /// <summary>
        /// Unique identifier for the rule. Must be less than or equal to 255 characters in length.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Specifies when noncurrent object versions expire.
        /// </summary>
        [Input("noncurrentVersionExpiration")]
        public Input<Inputs.StorageBucketLifecycleRuleNoncurrentVersionExpirationGetArgs>? NoncurrentVersionExpiration { get; set; }

        [Input("noncurrentVersionTransitions")]
        private InputList<Inputs.StorageBucketLifecycleRuleNoncurrentVersionTransitionGetArgs>? _noncurrentVersionTransitions;

        /// <summary>
        /// Specifies when noncurrent object versions transitions.
        /// </summary>
        public InputList<Inputs.StorageBucketLifecycleRuleNoncurrentVersionTransitionGetArgs> NoncurrentVersionTransitions
        {
            get => _noncurrentVersionTransitions ?? (_noncurrentVersionTransitions = new InputList<Inputs.StorageBucketLifecycleRuleNoncurrentVersionTransitionGetArgs>());
            set => _noncurrentVersionTransitions = value;
        }

        /// <summary>
        /// Object key prefix identifying one or more objects to which the rule applies.
        /// </summary>
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        [Input("transitions")]
        private InputList<Inputs.StorageBucketLifecycleRuleTransitionGetArgs>? _transitions;

        /// <summary>
        /// Specifies a period in the object's transitions.
        /// </summary>
        public InputList<Inputs.StorageBucketLifecycleRuleTransitionGetArgs> Transitions
        {
            get => _transitions ?? (_transitions = new InputList<Inputs.StorageBucketLifecycleRuleTransitionGetArgs>());
            set => _transitions = value;
        }

        public StorageBucketLifecycleRuleGetArgs()
        {
        }
        public static new StorageBucketLifecycleRuleGetArgs Empty => new StorageBucketLifecycleRuleGetArgs();
    }
}
