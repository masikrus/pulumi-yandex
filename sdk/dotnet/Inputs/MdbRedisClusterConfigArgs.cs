// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Inputs
{

    public sealed class MdbRedisClusterConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allows some data to be lost in favor of faster switchover/restart by RDSync.
        /// </summary>
        [Input("allowDataLoss")]
        public Input<bool>? AllowDataLoss { get; set; }

        /// <summary>
        /// Time to start the daily backup, in the UTC timezone.
        /// </summary>
        [Input("backupWindowStart")]
        public Input<Inputs.MdbRedisClusterConfigBackupWindowStartArgs>? BackupWindowStart { get; set; }

        /// <summary>
        /// Normal clients output buffer limits. See [redis config file](https://github.com/redis/redis/blob/6.2/redis.conf#L1841).
        /// </summary>
        [Input("clientOutputBufferLimitNormal")]
        public Input<string>? ClientOutputBufferLimitNormal { get; set; }

        /// <summary>
        /// Pubsub clients output buffer limits. See [redis config file](https://github.com/redis/redis/blob/6.2/redis.conf#L1843).
        /// </summary>
        [Input("clientOutputBufferLimitPubsub")]
        public Input<string>? ClientOutputBufferLimitPubsub { get; set; }

        /// <summary>
        /// Permits Pub/Sub shard operations when cluster is down.
        /// </summary>
        [Input("clusterAllowPubsubshardWhenDown")]
        public Input<bool>? ClusterAllowPubsubshardWhenDown { get; set; }

        /// <summary>
        /// Allows read operations when cluster is down.
        /// </summary>
        [Input("clusterAllowReadsWhenDown")]
        public Input<bool>? ClusterAllowReadsWhenDown { get; set; }

        /// <summary>
        /// Controls whether all hash slots must be covered by nodes.
        /// </summary>
        [Input("clusterRequireFullCoverage")]
        public Input<bool>? ClusterRequireFullCoverage { get; set; }

        /// <summary>
        /// Number of databases (changing requires redis-server restart).
        /// </summary>
        [Input("databases")]
        public Input<int>? Databases { get; set; }

        /// <summary>
        /// Allow Redis to use io-threads.
        /// </summary>
        [Input("ioThreadsAllowed")]
        public Input<bool>? IoThreadsAllowed { get; set; }

        /// <summary>
        /// The time, in minutes, that must elapse in order for the key counter to be divided by two (or decremented if it has a value less &lt;= 10).
        /// </summary>
        [Input("lfuDecayTime")]
        public Input<int>? LfuDecayTime { get; set; }

        /// <summary>
        /// Determines how the frequency counter represents key hits.
        /// </summary>
        [Input("lfuLogFactor")]
        public Input<int>? LfuLogFactor { get; set; }

        /// <summary>
        /// Maximum time in milliseconds for Lua scripts.
        /// </summary>
        [Input("luaTimeLimit")]
        public Input<int>? LuaTimeLimit { get; set; }

        /// <summary>
        /// Redis maxmemory usage in percent
        /// </summary>
        [Input("maxmemoryPercent")]
        public Input<int>? MaxmemoryPercent { get; set; }

        /// <summary>
        /// Redis key eviction policy for a dataset that reaches maximum memory. Can be any of the listed in [the official RedisDB documentation](https://docs.redislabs.com/latest/rs/administering/database-operations/eviction-policy/).
        /// </summary>
        [Input("maxmemoryPolicy")]
        public Input<string>? MaxmemoryPolicy { get; set; }

        /// <summary>
        /// Select the events that Redis will notify among a set of classes.
        /// </summary>
        [Input("notifyKeyspaceEvents")]
        public Input<string>? NotifyKeyspaceEvents { get; set; }

        [Input("password", required: true)]
        private Input<string>? _password;

        /// <summary>
        /// Password for the Redis cluster.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Replication backlog size as a percentage of flavor maxmemory.
        /// </summary>
        [Input("replBacklogSizePercent")]
        public Input<int>? ReplBacklogSizePercent { get; set; }

        /// <summary>
        /// Log slow queries below this number in microseconds.
        /// </summary>
        [Input("slowlogLogSlowerThan")]
        public Input<int>? SlowlogLogSlowerThan { get; set; }

        /// <summary>
        /// Slow queries log length.
        /// </summary>
        [Input("slowlogMaxLen")]
        public Input<int>? SlowlogMaxLen { get; set; }

        /// <summary>
        /// Close the connection after a client is idle for N seconds.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// Allows to turn before switchover in RDSync.
        /// </summary>
        [Input("turnBeforeSwitchover")]
        public Input<bool>? TurnBeforeSwitchover { get; set; }

        /// <summary>
        /// Use JIT for lua scripts and functions.
        /// </summary>
        [Input("useLuajit")]
        public Input<bool>? UseLuajit { get; set; }

        /// <summary>
        /// Version of Redis.
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        /// <summary>
        /// Controls max number of entries in zset before conversion from memory-efficient listpack to CPU-efficient hash table and skiplist
        /// </summary>
        [Input("zsetMaxListpackEntries")]
        public Input<int>? ZsetMaxListpackEntries { get; set; }

        public MdbRedisClusterConfigArgs()
        {
        }
        public static new MdbRedisClusterConfigArgs Empty => new MdbRedisClusterConfigArgs();
    }
}
