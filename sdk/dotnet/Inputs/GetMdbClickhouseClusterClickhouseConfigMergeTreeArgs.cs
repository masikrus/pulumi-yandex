// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Inputs
{

    public sealed class GetMdbClickhouseClusterClickhouseConfigMergeTreeInputArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When this setting has a value greater than zero only a single replica starts the merge immediately if merged part on shared storage and allow_remote_fs_zero_copy_replication is enabled.
        /// </summary>
        [Input("allowRemoteFsZeroCopyReplication", required: true)]
        public Input<bool> AllowRemoteFsZeroCopyReplication { get; set; } = null!;

        /// <summary>
        /// Enables the check at table creation, that the data type of a column for sampling or sampling expression is correct. The data type must be one of unsigned integer types: UInt8, UInt16, UInt32, UInt64. Default value: true.
        /// </summary>
        [Input("checkSampleColumnIsCorrect", required: true)]
        public Input<bool> CheckSampleColumnIsCorrect { get; set; } = null!;

        /// <summary>
        /// Minimum period to clean old queue logs, blocks hashes and parts.
        /// </summary>
        [Input("cleanupDelayPeriod", required: true)]
        public Input<int> CleanupDelayPeriod { get; set; } = null!;

        /// <summary>
        /// If the number of inactive parts in a single partition in the table at least that many the inactive_parts_to_delay_insert value, an INSERT artificially slows down. It is useful when a server fails to clean up parts quickly enough.
        /// </summary>
        [Input("inactivePartsToDelayInsert", required: true)]
        public Input<int> InactivePartsToDelayInsert { get; set; } = null!;

        /// <summary>
        /// If the number of inactive parts in a single partition more than the inactive_parts_to_throw_insert value, INSERT is interrupted with the `Too many inactive parts (N). Parts cleaning are processing significantly slower than inserts` exception.
        /// </summary>
        [Input("inactivePartsToThrowInsert", required: true)]
        public Input<int> InactivePartsToThrowInsert { get; set; } = null!;

        /// <summary>
        /// The `too many parts` check according to `parts_to_delay_insert` and `parts_to_throw_insert` will be active only if the average part size (in the relevant partition) is not larger than the specified threshold. If it is larger than the specified threshold, the INSERTs will be neither delayed or rejected. This allows to have hundreds of terabytes in a single table on a single server if the parts are successfully merged to larger parts. This does not affect the thresholds on inactive parts or total parts.
        /// </summary>
        [Input("maxAvgPartSizeForTooManyParts", required: true)]
        public Input<int> MaxAvgPartSizeForTooManyParts { get; set; } = null!;

        /// <summary>
        /// The maximum total parts size (in bytes) to be merged into one part, if there are enough resources available. max_bytes_to_merge_at_max_space_in_pool -- roughly corresponds to the maximum possible part size created by an automatic background merge.
        /// </summary>
        [Input("maxBytesToMergeAtMaxSpaceInPool", required: true)]
        public Input<int> MaxBytesToMergeAtMaxSpaceInPool { get; set; } = null!;

        /// <summary>
        /// Max bytes to merge at min space in pool: Maximum total size of a data part to merge when the number of free threads in the background pool is minimum.
        /// </summary>
        [Input("maxBytesToMergeAtMinSpaceInPool", required: true)]
        public Input<int> MaxBytesToMergeAtMinSpaceInPool { get; set; } = null!;

        /// <summary>
        /// Maximum period to clean old queue logs, blocks hashes and parts. Default value: 300 seconds.
        /// </summary>
        [Input("maxCleanupDelayPeriod", required: true)]
        public Input<int> MaxCleanupDelayPeriod { get; set; } = null!;

        /// <summary>
        /// Maximum sleep time for merge selecting, a lower setting will trigger selecting tasks in background_schedule_pool frequently which result in large amount of requests to zookeeper in large-scale clusters. Default value: 60000 milliseconds (60 seconds).
        /// </summary>
        [Input("maxMergeSelectingSleepMs", required: true)]
        public Input<int> MaxMergeSelectingSleepMs { get; set; } = null!;

        /// <summary>
        /// When there is more than specified number of merges with TTL entries in pool, do not assign new merge with TTL.
        /// </summary>
        [Input("maxNumberOfMergesWithTtlInPool", required: true)]
        public Input<int> MaxNumberOfMergesWithTtlInPool { get; set; } = null!;

        /// <summary>
        /// Maximum number of parts in all partitions.
        /// </summary>
        [Input("maxPartsInTotal", required: true)]
        public Input<int> MaxPartsInTotal { get; set; } = null!;

        /// <summary>
        /// Max replicated merges in queue: Maximum number of merge tasks that can be in the ReplicatedMergeTree queue at the same time.
        /// </summary>
        [Input("maxReplicatedMergesInQueue", required: true)]
        public Input<int> MaxReplicatedMergesInQueue { get; set; } = null!;

        /// <summary>
        /// The number of rows that are read from the merged parts into memory. Default value: 8192.
        /// </summary>
        [Input("mergeMaxBlockSize", required: true)]
        public Input<int> MergeMaxBlockSize { get; set; } = null!;

        /// <summary>
        /// Sleep time for merge selecting when no part is selected. A lower setting triggers selecting tasks in background_schedule_pool frequently, which results in a large number of requests to ClickHouse Keeper in large-scale clusters.
        /// </summary>
        [Input("mergeSelectingSleepMs", required: true)]
        public Input<int> MergeSelectingSleepMs { get; set; } = null!;

        /// <summary>
        /// Minimum delay in seconds before repeating a merge with recompression TTL. Default value: 14400 seconds (4 hours).
        /// </summary>
        [Input("mergeWithRecompressionTtlTimeout", required: true)]
        public Input<int> MergeWithRecompressionTtlTimeout { get; set; } = null!;

        /// <summary>
        /// Minimum delay in seconds before repeating a merge with delete TTL. Default value: 14400 seconds (4 hours).
        /// </summary>
        [Input("mergeWithTtlTimeout", required: true)]
        public Input<int> MergeWithTtlTimeout { get; set; } = null!;

        /// <summary>
        /// Whether min_age_to_force_merge_seconds should be applied only on the entire partition and not on subset.
        /// </summary>
        [Input("minAgeToForceMergeOnPartitionOnly", required: true)]
        public Input<bool> MinAgeToForceMergeOnPartitionOnly { get; set; } = null!;

        /// <summary>
        /// Merge parts if every part in the range is older than the value of `min_age_to_force_merge_seconds`.
        /// </summary>
        [Input("minAgeToForceMergeSeconds", required: true)]
        public Input<int> MinAgeToForceMergeSeconds { get; set; } = null!;

        /// <summary>
        /// Minimum number of bytes in a data part that can be stored in Wide format. You can set one, both or none of these settings.
        /// </summary>
        [Input("minBytesForWidePart", required: true)]
        public Input<int> MinBytesForWidePart { get; set; } = null!;

        /// <summary>
        /// Minimum number of rows in a data part that can be stored in Wide format. You can set one, both or none of these settings.
        /// </summary>
        [Input("minRowsForWidePart", required: true)]
        public Input<int> MinRowsForWidePart { get; set; } = null!;

        /// <summary>
        /// When there is less than specified number of free entries in pool, do not execute part mutations. This is to leave free threads for regular merges and avoid `Too many parts`. Default value: 20.
        /// </summary>
        [Input("numberOfFreeEntriesInPoolToExecuteMutation", required: true)]
        public Input<int> NumberOfFreeEntriesInPoolToExecuteMutation { get; set; } = null!;

        /// <summary>
        /// Number of free entries in pool to lower max size of merge: Threshold value of free entries in the pool. If the number of entries in the pool falls below this value, ClickHouse reduces the maximum size of a data part to merge. This helps handle small merges faster, rather than filling the pool with lengthy merges.
        /// </summary>
        [Input("numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge", required: true)]
        public Input<int> NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge { get; set; } = null!;

        /// <summary>
        /// Parts to delay insert: Number of active data parts in a table, on exceeding which ClickHouse starts artificially reduce the rate of inserting data into the table
        /// </summary>
        [Input("partsToDelayInsert", required: true)]
        public Input<int> PartsToDelayInsert { get; set; } = null!;

        /// <summary>
        /// Parts to throw insert: Threshold value of active data parts in a table, on exceeding which ClickHouse throws the 'Too many parts ...' exception.
        /// </summary>
        [Input("partsToThrowInsert", required: true)]
        public Input<int> PartsToThrowInsert { get; set; } = null!;

        /// <summary>
        /// Replicated deduplication window: Number of recent hash blocks that ZooKeeper will store (the old ones will be deleted).
        /// </summary>
        [Input("replicatedDeduplicationWindow", required: true)]
        public Input<int> ReplicatedDeduplicationWindow { get; set; } = null!;

        /// <summary>
        /// Replicated deduplication window seconds: Time during which ZooKeeper stores the hash blocks (the old ones wil be deleted).
        /// </summary>
        [Input("replicatedDeduplicationWindowSeconds", required: true)]
        public Input<int> ReplicatedDeduplicationWindowSeconds { get; set; } = null!;

        /// <summary>
        /// Enables zero-copy replication when a replica is located on a remote filesystem.
        /// </summary>
        [Input("ttlOnlyDropParts", required: true)]
        public Input<bool> TtlOnlyDropParts { get; set; } = null!;

        public GetMdbClickhouseClusterClickhouseConfigMergeTreeInputArgs()
        {
        }
        public static new GetMdbClickhouseClusterClickhouseConfigMergeTreeInputArgs Empty => new GetMdbClickhouseClusterClickhouseConfigMergeTreeInputArgs();
    }
}
