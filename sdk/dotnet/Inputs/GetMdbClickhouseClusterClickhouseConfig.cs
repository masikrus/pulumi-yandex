// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Inputs
{

    public sealed class GetMdbClickhouseClusterClickhouseConfigArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Enable or disable asynchronous_insert_log system table.
        /// </summary>
        [Input("asynchronousInsertLogEnabled", required: true)]
        public bool AsynchronousInsertLogEnabled { get; set; }

        /// <summary>
        /// The maximum size that asynchronous_insert_log can grow to before old data will be removed.
        /// </summary>
        [Input("asynchronousInsertLogRetentionSize", required: true)]
        public int AsynchronousInsertLogRetentionSize { get; set; }

        /// <summary>
        /// The maximum time that asynchronous_insert_log records will be retained before removal.
        /// </summary>
        [Input("asynchronousInsertLogRetentionTime", required: true)]
        public int AsynchronousInsertLogRetentionTime { get; set; }

        /// <summary>
        /// Enable or disable asynchronous_metric_log system table.
        /// </summary>
        [Input("asynchronousMetricLogEnabled", required: true)]
        public bool AsynchronousMetricLogEnabled { get; set; }

        /// <summary>
        /// The maximum size that asynchronous_metric_log can grow to before old data will be removed.
        /// </summary>
        [Input("asynchronousMetricLogRetentionSize", required: true)]
        public int AsynchronousMetricLogRetentionSize { get; set; }

        /// <summary>
        /// The maximum time that asynchronous_metric_log records will be retained before removal.
        /// </summary>
        [Input("asynchronousMetricLogRetentionTime", required: true)]
        public int AsynchronousMetricLogRetentionTime { get; set; }

        /// <summary>
        /// The maximum number of threads that will be used for performing flush operations for Buffer-engine tables in the background.
        /// </summary>
        [Input("backgroundBufferFlushSchedulePoolSize", required: true)]
        public int BackgroundBufferFlushSchedulePoolSize { get; set; }

        /// <summary>
        /// The maximum number of threads that will be used for performing a variety of operations (mostly garbage collection) for MergeTree-engine tables in a background.
        /// </summary>
        [Input("backgroundCommonPoolSize", required: true)]
        public int BackgroundCommonPoolSize { get; set; }

        /// <summary>
        /// The maximum number of threads that will be used for executing distributed sends.
        /// </summary>
        [Input("backgroundDistributedSchedulePoolSize", required: true)]
        public int BackgroundDistributedSchedulePoolSize { get; set; }

        /// <summary>
        /// The maximum number of threads that will be used for fetching data parts from another replica for MergeTree-engine tables in a background.
        /// </summary>
        [Input("backgroundFetchesPoolSize", required: true)]
        public int BackgroundFetchesPoolSize { get; set; }

        /// <summary>
        /// Sets a ratio between the number of threads and the number of background merges and mutations that can be executed concurrently.
        /// </summary>
        [Input("backgroundMergesMutationsConcurrencyRatio", required: true)]
        public int BackgroundMergesMutationsConcurrencyRatio { get; set; }

        /// <summary>
        /// The maximum number of threads that will be used for executing background operations for message streaming.
        /// </summary>
        [Input("backgroundMessageBrokerSchedulePoolSize", required: true)]
        public int BackgroundMessageBrokerSchedulePoolSize { get; set; }

        /// <summary>
        /// The maximum number of threads that will be used for moving data parts to another disk or volume for MergeTree-engine tables in a background.
        /// </summary>
        [Input("backgroundMovePoolSize", required: true)]
        public int BackgroundMovePoolSize { get; set; }

        /// <summary>
        /// Sets the number of threads performing background merges and mutations for MergeTree-engine tables.
        /// </summary>
        [Input("backgroundPoolSize", required: true)]
        public int BackgroundPoolSize { get; set; }

        /// <summary>
        /// The maximum number of threads that will be used for constantly executing some lightweight periodic operations for replicated tables, Kafka streaming, and DNS cache updates.
        /// </summary>
        [Input("backgroundSchedulePoolSize", required: true)]
        public int BackgroundSchedulePoolSize { get; set; }

        [Input("compressions")]
        private List<Inputs.GetMdbClickhouseClusterClickhouseConfigCompressionArgs>? _compressions;

        /// <summary>
        /// Data compression configuration.
        /// </summary>
        public List<Inputs.GetMdbClickhouseClusterClickhouseConfigCompressionArgs> Compressions
        {
            get => _compressions ?? (_compressions = new List<Inputs.GetMdbClickhouseClusterClickhouseConfigCompressionArgs>());
            set => _compressions = value;
        }

        /// <summary>
        /// Default database name.
        /// </summary>
        [Input("defaultDatabase", required: true)]
        public string DefaultDatabase { get; set; } = null!;

        /// <summary>
        /// Lazy loading of dictionaries. If true, then each dictionary is loaded on the first use.
        /// </summary>
        [Input("dictionariesLazyLoad", required: true)]
        public bool DictionariesLazyLoad { get; set; }

        /// <summary>
        /// Enable or disable geobase.
        /// </summary>
        [Input("geobaseEnabled", required: true)]
        public bool GeobaseEnabled { get; set; }

        /// <summary>
        /// Address of the archive with the user geobase in Object Storage.
        /// </summary>
        [Input("geobaseUri", required: true)]
        public string GeobaseUri { get; set; } = null!;

        [Input("graphiteRollups")]
        private List<Inputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupArgs>? _graphiteRollups;

        /// <summary>
        /// Graphite rollup configuration.
        /// </summary>
        public List<Inputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupArgs> GraphiteRollups
        {
            get => _graphiteRollups ?? (_graphiteRollups = new List<Inputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupArgs>());
            set => _graphiteRollups = value;
        }

        /// <summary>
        /// JDBC bridge configuration.
        /// </summary>
        [Input("jdbcBridge", required: true)]
        public Inputs.GetMdbClickhouseClusterClickhouseConfigJdbcBridgeArgs JdbcBridge { get; set; } = null!;

        /// <summary>
        /// Kafka connection configuration.
        /// </summary>
        [Input("kafka", required: true)]
        public Inputs.GetMdbClickhouseClusterClickhouseConfigKafkaArgs Kafka { get; set; } = null!;

        [Input("kafkaTopics")]
        private List<Inputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicArgs>? _kafkaTopics;

        /// <summary>
        /// Kafka topic connection configuration.
        /// </summary>
        public List<Inputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicArgs> KafkaTopics
        {
            get => _kafkaTopics ?? (_kafkaTopics = new List<Inputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicArgs>());
            set => _kafkaTopics = value;
        }

        /// <summary>
        /// The number of seconds that ClickHouse waits for incoming requests for HTTP protocol before closing the connection.
        /// </summary>
        [Input("keepAliveTimeout", required: true)]
        public int KeepAliveTimeout { get; set; }

        /// <summary>
        /// Logging level.
        /// </summary>
        [Input("logLevel", required: true)]
        public string LogLevel { get; set; } = null!;

        /// <summary>
        /// Maximum size of cache for marks
        /// </summary>
        [Input("markCacheSize", required: true)]
        public int MarkCacheSize { get; set; }

        /// <summary>
        /// Limit on total number of concurrently executed queries.
        /// </summary>
        [Input("maxConcurrentQueries", required: true)]
        public int MaxConcurrentQueries { get; set; }

        /// <summary>
        /// Max server connections.
        /// </summary>
        [Input("maxConnections", required: true)]
        public int MaxConnections { get; set; }

        /// <summary>
        /// Restriction on dropping partitions.
        /// </summary>
        [Input("maxPartitionSizeToDrop", required: true)]
        public int MaxPartitionSizeToDrop { get; set; }

        /// <summary>
        /// Restriction on deleting tables.
        /// </summary>
        [Input("maxTableSizeToDrop", required: true)]
        public int MaxTableSizeToDrop { get; set; }

        /// <summary>
        /// MergeTree engine configuration.
        /// </summary>
        [Input("mergeTree", required: true)]
        public Inputs.GetMdbClickhouseClusterClickhouseConfigMergeTreeArgs MergeTree { get; set; } = null!;

        /// <summary>
        /// Enable or disable metric_log system table.
        /// </summary>
        [Input("metricLogEnabled", required: true)]
        public bool MetricLogEnabled { get; set; }

        /// <summary>
        /// The maximum size that metric_log can grow to before old data will be removed.
        /// </summary>
        [Input("metricLogRetentionSize", required: true)]
        public int MetricLogRetentionSize { get; set; }

        /// <summary>
        /// The maximum time that metric_log records will be retained before removal.
        /// </summary>
        [Input("metricLogRetentionTime", required: true)]
        public int MetricLogRetentionTime { get; set; }

        /// <summary>
        /// Enable or disable opentelemetry_span_log system table.
        /// </summary>
        [Input("opentelemetrySpanLogEnabled", required: true)]
        public bool OpentelemetrySpanLogEnabled { get; set; }

        /// <summary>
        /// The maximum size that opentelemetry_span_log can grow to before old data will be removed.
        /// </summary>
        [Input("opentelemetrySpanLogRetentionSize", required: true)]
        public int OpentelemetrySpanLogRetentionSize { get; set; }

        /// <summary>
        /// The maximum time that opentelemetry_span_log records will be retained before removal.
        /// </summary>
        [Input("opentelemetrySpanLogRetentionTime", required: true)]
        public int OpentelemetrySpanLogRetentionTime { get; set; }

        /// <summary>
        /// The maximum size that part_log can grow to before old data will be removed.
        /// </summary>
        [Input("partLogRetentionSize", required: true)]
        public int PartLogRetentionSize { get; set; }

        /// <summary>
        /// The maximum time that part_log records will be retained before removal.
        /// </summary>
        [Input("partLogRetentionTime", required: true)]
        public int PartLogRetentionTime { get; set; }

        /// <summary>
        /// Query cache configuration.
        /// </summary>
        [Input("queryCache", required: true)]
        public Inputs.GetMdbClickhouseClusterClickhouseConfigQueryCacheArgs QueryCache { get; set; } = null!;

        /// <summary>
        /// The maximum size that query_log can grow to before old data will be removed.
        /// </summary>
        [Input("queryLogRetentionSize", required: true)]
        public int QueryLogRetentionSize { get; set; }

        /// <summary>
        /// The maximum time that query_log records will be retained before removal.
        /// </summary>
        [Input("queryLogRetentionTime", required: true)]
        public int QueryLogRetentionTime { get; set; }

        [Input("queryMaskingRules")]
        private List<Inputs.GetMdbClickhouseClusterClickhouseConfigQueryMaskingRuleArgs>? _queryMaskingRules;

        /// <summary>
        /// Query masking rules configuration.
        /// </summary>
        public List<Inputs.GetMdbClickhouseClusterClickhouseConfigQueryMaskingRuleArgs> QueryMaskingRules
        {
            get => _queryMaskingRules ?? (_queryMaskingRules = new List<Inputs.GetMdbClickhouseClusterClickhouseConfigQueryMaskingRuleArgs>());
            set => _queryMaskingRules = value;
        }

        /// <summary>
        /// Enable or disable query_thread_log system table.
        /// </summary>
        [Input("queryThreadLogEnabled", required: true)]
        public bool QueryThreadLogEnabled { get; set; }

        /// <summary>
        /// The maximum size that query_thread_log can grow to before old data will be removed.
        /// </summary>
        [Input("queryThreadLogRetentionSize", required: true)]
        public int QueryThreadLogRetentionSize { get; set; }

        /// <summary>
        /// The maximum time that query_thread_log records will be retained before removal.
        /// </summary>
        [Input("queryThreadLogRetentionTime", required: true)]
        public int QueryThreadLogRetentionTime { get; set; }

        /// <summary>
        /// Enable or disable query_views_log system table.
        /// </summary>
        [Input("queryViewsLogEnabled", required: true)]
        public bool QueryViewsLogEnabled { get; set; }

        /// <summary>
        /// The maximum size that query_views_log can grow to before old data will be removed.
        /// </summary>
        [Input("queryViewsLogRetentionSize", required: true)]
        public int QueryViewsLogRetentionSize { get; set; }

        /// <summary>
        /// The maximum time that query_views_log records will be retained before removal.
        /// </summary>
        [Input("queryViewsLogRetentionTime", required: true)]
        public int QueryViewsLogRetentionTime { get; set; }

        /// <summary>
        /// RabbitMQ connection configuration.
        /// </summary>
        [Input("rabbitmq", required: true)]
        public Inputs.GetMdbClickhouseClusterClickhouseConfigRabbitmqArgs Rabbitmq { get; set; } = null!;

        /// <summary>
        /// Enable or disable session_log system table.
        /// </summary>
        [Input("sessionLogEnabled", required: true)]
        public bool SessionLogEnabled { get; set; }

        /// <summary>
        /// The maximum size that session_log can grow to before old data will be removed.
        /// </summary>
        [Input("sessionLogRetentionSize", required: true)]
        public int SessionLogRetentionSize { get; set; }

        /// <summary>
        /// The maximum time that session_log records will be retained before removal.
        /// </summary>
        [Input("sessionLogRetentionTime", required: true)]
        public int SessionLogRetentionTime { get; set; }

        /// <summary>
        /// Enable or disable text_log system table.
        /// </summary>
        [Input("textLogEnabled", required: true)]
        public bool TextLogEnabled { get; set; }

        /// <summary>
        /// Logging level for text_log system table.
        /// </summary>
        [Input("textLogLevel", required: true)]
        public string TextLogLevel { get; set; } = null!;

        /// <summary>
        /// The maximum size that text_log can grow to before old data will be removed.
        /// </summary>
        [Input("textLogRetentionSize", required: true)]
        public int TextLogRetentionSize { get; set; }

        /// <summary>
        /// The maximum time that text_log records will be retained before removal.
        /// </summary>
        [Input("textLogRetentionTime", required: true)]
        public int TextLogRetentionTime { get; set; }

        /// <summary>
        /// The server's time zone.
        /// </summary>
        [Input("timezone", required: true)]
        public string Timezone { get; set; } = null!;

        /// <summary>
        /// Whenever server memory usage becomes larger than every next step in number of bytes the memory profiler will collect the allocating stack trace.
        /// </summary>
        [Input("totalMemoryProfilerStep", required: true)]
        public int TotalMemoryProfilerStep { get; set; }

        /// <summary>
        /// Enable or disable trace_log system table.
        /// </summary>
        [Input("traceLogEnabled", required: true)]
        public bool TraceLogEnabled { get; set; }

        /// <summary>
        /// The maximum size that trace_log can grow to before old data will be removed.
        /// </summary>
        [Input("traceLogRetentionSize", required: true)]
        public int TraceLogRetentionSize { get; set; }

        /// <summary>
        /// The maximum time that trace_log records will be retained before removal.
        /// </summary>
        [Input("traceLogRetentionTime", required: true)]
        public int TraceLogRetentionTime { get; set; }

        /// <summary>
        /// Cache size (in bytes) for uncompressed data used by table engines from the MergeTree family. Zero means disabled.
        /// </summary>
        [Input("uncompressedCacheSize", required: true)]
        public int UncompressedCacheSize { get; set; }

        /// <summary>
        /// Enable or disable zookeeper_log system table.
        /// </summary>
        [Input("zookeeperLogEnabled", required: true)]
        public bool ZookeeperLogEnabled { get; set; }

        /// <summary>
        /// The maximum size that zookeeper_log can grow to before old data will be removed.
        /// </summary>
        [Input("zookeeperLogRetentionSize", required: true)]
        public int ZookeeperLogRetentionSize { get; set; }

        /// <summary>
        /// The maximum time that zookeeper_log records will be retained before removal.
        /// </summary>
        [Input("zookeeperLogRetentionTime", required: true)]
        public int ZookeeperLogRetentionTime { get; set; }

        public GetMdbClickhouseClusterClickhouseConfigArgs()
        {
        }
        public static new GetMdbClickhouseClusterClickhouseConfigArgs Empty => new GetMdbClickhouseClusterClickhouseConfigArgs();
    }
}
