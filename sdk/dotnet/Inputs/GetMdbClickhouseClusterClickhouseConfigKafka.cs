// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Inputs
{

    public sealed class GetMdbClickhouseClusterClickhouseConfigKafkaArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Action to take when there is no initial offset in offset store or the desired offset is out of range: 'smallest','earliest' - automatically reset the offset to the smallest offset, 'largest','latest' - automatically reset the offset to the largest offset, 'error' - trigger an error (ERR__AUTO_OFFSET_RESET) which is retrieved by consuming messages and checking 'message-&gt;err'.
        /// </summary>
        [Input("autoOffsetReset", required: true)]
        public string AutoOffsetReset { get; set; } = null!;

        /// <summary>
        /// A comma-separated list of debug contexts to enable.
        /// </summary>
        [Input("debug", required: true)]
        public string Debug { get; set; } = null!;

        /// <summary>
        /// Enable verification of SSL certificates.
        /// </summary>
        [Input("enableSslCertificateVerification", required: true)]
        public bool EnableSslCertificateVerification { get; set; }

        /// <summary>
        /// Maximum allowed time between calls to consume messages (e.g., `rd_kafka_consumer_poll()` for high-level consumers. If this interval is exceeded the consumer is considered failed and the group will rebalance in order to reassign the partitions to another consumer group member.
        /// </summary>
        [Input("maxPollIntervalMs", required: true)]
        public int MaxPollIntervalMs { get; set; }

        /// <summary>
        /// SASL mechanism used in kafka authentication.
        /// </summary>
        [Input("saslMechanism", required: true)]
        public string SaslMechanism { get; set; } = null!;

        [Input("saslPassword", required: true)]
        private string? _saslPassword;

        /// <summary>
        /// User password on kafka server.
        /// </summary>
        public string? SaslPassword
        {
            get => _saslPassword;
            set => _saslPassword = value;
        }

        /// <summary>
        /// Username on kafka server.
        /// </summary>
        [Input("saslUsername", required: true)]
        public string SaslUsername { get; set; } = null!;

        /// <summary>
        /// Security protocol used to connect to kafka server.
        /// </summary>
        [Input("securityProtocol", required: true)]
        public string SecurityProtocol { get; set; } = null!;

        /// <summary>
        /// Client group session and failure detection timeout. The consumer sends periodic heartbeats (heartbeat.interval.ms) to indicate its liveness to the broker. If no hearts are received by the broker for a group member within the session timeout, the broker will remove the consumer from the group and trigger a rebalance.
        /// </summary>
        [Input("sessionTimeoutMs", required: true)]
        public int SessionTimeoutMs { get; set; }

        public GetMdbClickhouseClusterClickhouseConfigKafkaArgs()
        {
        }
        public static new GetMdbClickhouseClusterClickhouseConfigKafkaArgs Empty => new GetMdbClickhouseClusterClickhouseConfigKafkaArgs();
    }
}
